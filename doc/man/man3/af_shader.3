.TH "af_shader" 3 "Thu Jun 14 2018" "afd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
af_shader \- \fBaf_shader\fP, process unit of gpu for rendering ui components 
.br
 

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <af_shader\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBaf_shader\fP (const GLchar *vertex_shader_source, const GLchar *fragment_shader_source)"
.br
.ti -1c
.RI "\fB~af_shader\fP ()"
.br
.ti -1c
.RI "string \fBget_name\fP ()"
.br
.ti -1c
.RI "void \fBset_name\fP (string name)"
.br
.ti -1c
.RI "\fBmshader_variable_list\fP & \fBget_uf_defs\fP ()"
.br
.ti -1c
.RI "string \fBget_vs_code\fP ()"
.br
.ti -1c
.RI "string \fBget_fs_code\fP ()"
.br
.ti -1c
.RI "void \fBreset_sel\fP ()"
.br
.ti -1c
.RI "bool \fBis_valid\fP ()"
.br
.ti -1c
.RI "void \fBuse\fP ()"
.br
.ti -1c
.RI "bool \fBvertex_att_pointer\fP (initializer_list< string > att_name_list)"
.br
.ti -1c
.RI "bool \fBuniform\fP (string unf_name, float *pvalue)"
.br
.ti -1c
.RI "bool \fBuniform\fP (string unf_name, int *pvalue)"
.br
.ti -1c
.RI "bool \fBuniform\fP (string unf_name, double *pvalue)"
.br
.ti -1c
.RI "bool \fBuniform\fP (string unf_name, int ivalue)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "string \fBcompile_error_info\fP"
.br
.ti -1c
.RI "string \fB_vs_name\fP"
.br
.ti -1c
.RI "string \fB_fs_name\fP"
.br
.ti -1c
.RI "bool \fB_vs_selected\fP { false }"
.br
.ti -1c
.RI "bool \fB_fs_selected\fP { false }"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBmshader_variable_list\fP \fB_att_list\fP"
.br
.ti -1c
.RI "\fBmshader_variable_list\fP \fB_unf_list\fP"
.br
.ti -1c
.RI "GLuint \fB_shader_program_id\fP"
.br
.ti -1c
.RI "GLuint \fB_vertex_shader\fP"
.br
.ti -1c
.RI "GLuint \fB_fragment_shader\fP"
.br
.ti -1c
.RI "string \fB_name\fP"
.br
.ti -1c
.RI "bool \fB_valid\fP { true }"
.br
.ti -1c
.RI "string \fB_vs_code\fP"
.br
.ti -1c
.RI "string \fB_fs_code\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBaf_shader\fP, process unit of gpu for rendering ui components 
.br

.SH "Constructor & Destructor Documentation"
.PP 
.SS "af_shader::af_shader (const GLchar * vertex_shader_source, const GLchar * fragment_shader_source)"

.SS "af_shader::~af_shader ()"

.SH "Member Function Documentation"
.PP 
.SS "string af_shader::get_fs_code ()\fC [inline]\fP"

.SS "string af_shader::get_name ()\fC [inline]\fP"

.SS "\fBmshader_variable_list\fP& af_shader::get_uf_defs ()\fC [inline]\fP"

.SS "string af_shader::get_vs_code ()\fC [inline]\fP"

.SS "bool af_shader::is_valid ()\fC [inline]\fP"

.SS "void af_shader::reset_sel ()\fC [inline]\fP"

.SS "void af_shader::set_name (string name)\fC [inline]\fP"

.SS "bool af_shader::uniform (string unf_name, float * pvalue)"

.SS "bool af_shader::uniform (string unf_name, int * pvalue)"

.SS "bool af_shader::uniform (string unf_name, double * pvalue)"

.SS "bool af_shader::uniform (string unf_name, int ivalue)"

.SS "void af_shader::use ()\fC [inline]\fP"

.SS "bool af_shader::vertex_att_pointer (initializer_list< string > att_name_list)"

.SH "Member Data Documentation"
.PP 
.SS "\fBmshader_variable_list\fP af_shader::_att_list\fC [private]\fP"
all the type of attribute variables of shader 
.SS "GLuint af_shader::_fragment_shader\fC [private]\fP"

.SS "string af_shader::_fs_code\fC [private]\fP"

.SS "string af_shader::_fs_name"

.SS "bool af_shader::_fs_selected { false }"

.SS "string af_shader::_name\fC [private]\fP"

.SS "GLuint af_shader::_shader_program_id\fC [private]\fP"

.SS "\fBmshader_variable_list\fP af_shader::_unf_list\fC [private]\fP"
all the type of uniform variables of shader 
.SS "bool af_shader::_valid { true }\fC [private]\fP"
whether shader is valid 
.SS "GLuint af_shader::_vertex_shader\fC [private]\fP"

.SS "string af_shader::_vs_code\fC [private]\fP"
vertex shader source code and fragment shader source code 
.SS "string af_shader::_vs_name"

.SS "bool af_shader::_vs_selected { false }"

.SS "string af_shader::compile_error_info"


.SH "Author"
.PP 
Generated automatically by Doxygen for afd from the source code\&.
