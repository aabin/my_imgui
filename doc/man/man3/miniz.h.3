.TH "G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" 3 "Thu Jun 14 2018" "afd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBmz_stream_s\fP"
.br
.ti -1c
.RI "struct \fBtdefl_compressor\fP"
.br
.ti -1c
.RI "struct \fBtinfl_huff_table\fP"
.br
.ti -1c
.RI "struct \fBtinfl_decompressor_tag\fP"
.br
.ti -1c
.RI "struct \fBmz_zip_archive_file_stat\fP"
.br
.ti -1c
.RI "struct \fBmz_zip_archive\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMINIZ_LITTLE_ENDIAN\fP   1"
.br
.ti -1c
.RI "#define \fBMZ_ADLER32_INIT\fP   (1)"
.br
.ti -1c
.RI "#define \fBMZ_CRC32_INIT\fP   (0)"
.br
.ti -1c
.RI "#define \fBMZ_DEFLATED\fP   8"
.br
.ti -1c
.RI "#define \fBMZ_VERSION\fP   '10\&.0\&.0'"
.br
.ti -1c
.RI "#define \fBMZ_VERNUM\fP   0xA000"
.br
.ti -1c
.RI "#define \fBMZ_VER_MAJOR\fP   10"
.br
.ti -1c
.RI "#define \fBMZ_VER_MINOR\fP   0"
.br
.ti -1c
.RI "#define \fBMZ_VER_REVISION\fP   0"
.br
.ti -1c
.RI "#define \fBMZ_VER_SUBREVISION\fP   0"
.br
.ti -1c
.RI "#define \fBMZ_DEFAULT_WINDOW_BITS\fP   15"
.br
.ti -1c
.RI "#define \fBZ_NULL\fP   0"
.br
.ti -1c
.RI "#define \fBZ_NO_FLUSH\fP   \fBMZ_NO_FLUSH\fP"
.br
.ti -1c
.RI "#define \fBZ_PARTIAL_FLUSH\fP   \fBMZ_PARTIAL_FLUSH\fP"
.br
.ti -1c
.RI "#define \fBZ_SYNC_FLUSH\fP   \fBMZ_SYNC_FLUSH\fP"
.br
.ti -1c
.RI "#define \fBZ_FULL_FLUSH\fP   \fBMZ_FULL_FLUSH\fP"
.br
.ti -1c
.RI "#define \fBZ_FINISH\fP   \fBMZ_FINISH\fP"
.br
.ti -1c
.RI "#define \fBZ_BLOCK\fP   \fBMZ_BLOCK\fP"
.br
.ti -1c
.RI "#define \fBZ_OK\fP   \fBMZ_OK\fP"
.br
.ti -1c
.RI "#define \fBZ_STREAM_END\fP   \fBMZ_STREAM_END\fP"
.br
.ti -1c
.RI "#define \fBZ_NEED_DICT\fP   \fBMZ_NEED_DICT\fP"
.br
.ti -1c
.RI "#define \fBZ_ERRNO\fP   \fBMZ_ERRNO\fP"
.br
.ti -1c
.RI "#define \fBZ_STREAM_ERROR\fP   \fBMZ_STREAM_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_DATA_ERROR\fP   \fBMZ_DATA_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_MEM_ERROR\fP   \fBMZ_MEM_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_BUF_ERROR\fP   \fBMZ_BUF_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_VERSION_ERROR\fP   \fBMZ_VERSION_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_PARAM_ERROR\fP   \fBMZ_PARAM_ERROR\fP"
.br
.ti -1c
.RI "#define \fBZ_NO_COMPRESSION\fP   \fBMZ_NO_COMPRESSION\fP"
.br
.ti -1c
.RI "#define \fBZ_BEST_SPEED\fP   \fBMZ_BEST_SPEED\fP"
.br
.ti -1c
.RI "#define \fBZ_BEST_COMPRESSION\fP   \fBMZ_BEST_COMPRESSION\fP"
.br
.ti -1c
.RI "#define \fBZ_DEFAULT_COMPRESSION\fP   \fBMZ_DEFAULT_COMPRESSION\fP"
.br
.ti -1c
.RI "#define \fBZ_DEFAULT_STRATEGY\fP   \fBMZ_DEFAULT_STRATEGY\fP"
.br
.ti -1c
.RI "#define \fBZ_FILTERED\fP   \fBMZ_FILTERED\fP"
.br
.ti -1c
.RI "#define \fBZ_HUFFMAN_ONLY\fP   \fBMZ_HUFFMAN_ONLY\fP"
.br
.ti -1c
.RI "#define \fBZ_RLE\fP   \fBMZ_RLE\fP"
.br
.ti -1c
.RI "#define \fBZ_FIXED\fP   \fBMZ_FIXED\fP"
.br
.ti -1c
.RI "#define \fBZ_DEFLATED\fP   \fBMZ_DEFLATED\fP"
.br
.ti -1c
.RI "#define \fBZ_DEFAULT_WINDOW_BITS\fP   \fBMZ_DEFAULT_WINDOW_BITS\fP"
.br
.ti -1c
.RI "#define \fBalloc_func\fP   \fBmz_alloc_func\fP"
.br
.ti -1c
.RI "#define \fBfree_func\fP   \fBmz_free_func\fP"
.br
.ti -1c
.RI "#define \fBinternal_state\fP   mz_internal_state"
.br
.ti -1c
.RI "#define \fBz_stream\fP   \fBmz_stream\fP"
.br
.ti -1c
.RI "#define \fBdeflateInit\fP   \fBmz_deflateInit\fP"
.br
.ti -1c
.RI "#define \fBdeflateInit2\fP   \fBmz_deflateInit2\fP"
.br
.ti -1c
.RI "#define \fBdeflateReset\fP   \fBmz_deflateReset\fP"
.br
.ti -1c
.RI "#define \fBdeflate\fP   \fBmz_deflate\fP"
.br
.ti -1c
.RI "#define \fBdeflateEnd\fP   \fBmz_deflateEnd\fP"
.br
.ti -1c
.RI "#define \fBdeflateBound\fP   \fBmz_deflateBound\fP"
.br
.ti -1c
.RI "#define \fBcompress\fP   \fBmz_compress\fP"
.br
.ti -1c
.RI "#define \fBcompress2\fP   \fBmz_compress2\fP"
.br
.ti -1c
.RI "#define \fBcompressBound\fP   \fBmz_compressBound\fP"
.br
.ti -1c
.RI "#define \fBinflateInit\fP   \fBmz_inflateInit\fP"
.br
.ti -1c
.RI "#define \fBinflateInit2\fP   \fBmz_inflateInit2\fP"
.br
.ti -1c
.RI "#define \fBinflate\fP   \fBmz_inflate\fP"
.br
.ti -1c
.RI "#define \fBinflateEnd\fP   \fBmz_inflateEnd\fP"
.br
.ti -1c
.RI "#define \fBuncompress\fP   \fBmz_uncompress\fP"
.br
.ti -1c
.RI "#define \fBcrc32\fP   \fBmz_crc32\fP"
.br
.ti -1c
.RI "#define \fBadler32\fP   \fBmz_adler32\fP"
.br
.ti -1c
.RI "#define \fBMAX_WBITS\fP   15"
.br
.ti -1c
.RI "#define \fBMAX_MEM_LEVEL\fP   9"
.br
.ti -1c
.RI "#define \fBzError\fP   \fBmz_error\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VERSION\fP   \fBMZ_VERSION\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VERNUM\fP   \fBMZ_VERNUM\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VER_MAJOR\fP   \fBMZ_VER_MAJOR\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VER_MINOR\fP   \fBMZ_VER_MINOR\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VER_REVISION\fP   \fBMZ_VER_REVISION\fP"
.br
.ti -1c
.RI "#define \fBZLIB_VER_SUBREVISION\fP   \fBMZ_VER_SUBREVISION\fP"
.br
.ti -1c
.RI "#define \fBzlibVersion\fP   \fBmz_version\fP"
.br
.ti -1c
.RI "#define \fBzlib_version\fP   \fBmz_version\fP()"
.br
.ti -1c
.RI "#define \fBMZ_FALSE\fP   (0)"
.br
.ti -1c
.RI "#define \fBMZ_TRUE\fP   (1)"
.br
.ti -1c
.RI "#define \fBMZ_MACRO_END\fP   while (0)"
.br
.ti -1c
.RI "#define \fBMZ_FILE\fP   FILE"
.br
.ti -1c
.RI "#define \fBMZ_TIME_T\fP   time_t"
.br
.ti -1c
.RI "#define \fBMZ_ASSERT\fP(x)   assert(x)"
.br
.ti -1c
.RI "#define \fBMZ_MALLOC\fP(x)   malloc(x)"
.br
.ti -1c
.RI "#define \fBMZ_FREE\fP(x)   free(x)"
.br
.ti -1c
.RI "#define \fBMZ_REALLOC\fP(p,  x)   realloc(p, x)"
.br
.ti -1c
.RI "#define \fBMZ_MAX\fP(a,  b)   (((a) > (b)) ? (a) : (b))"
.br
.ti -1c
.RI "#define \fBMZ_MIN\fP(a,  b)   (((a) < (b)) ? (a) : (b))"
.br
.ti -1c
.RI "#define \fBMZ_CLEAR_OBJ\fP(obj)   memset(&(obj), 0, sizeof(obj))"
.br
.ti -1c
.RI "#define \fBMZ_READ_LE16\fP(p)   ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[0]) | ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[1]) << 8U))"
.br
.ti -1c
.RI "#define \fBMZ_READ_LE32\fP(p)   ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[0]) | ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[1]) << 8U) | ((mz_uint32)(((const mz_uint8 *)(p))[2]) << 16U) | ((mz_uint32)(((const mz_uint8 *)(p))[3]) << 24U))"
.br
.ti -1c
.RI "#define \fBMZ_READ_LE64\fP(p)   (((\fBmz_uint64\fP)\fBMZ_READ_LE32\fP(p)) | (((\fBmz_uint64\fP)\fBMZ_READ_LE32\fP((const \fBmz_uint8\fP *)(p) + sizeof(\fBmz_uint32\fP))) << 32U))"
.br
.ti -1c
.RI "#define \fBMZ_FORCEINLINE\fP   inline"
.br
.ti -1c
.RI "#define \fBMZ_UINT16_MAX\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBMZ_UINT32_MAX\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBTDEFL_LESS_MEMORY\fP   0"
.br
.ti -1c
.RI "#define \fBTINFL_DECOMPRESS_MEM_TO_MEM_FAILED\fP   ((size_t)(-1))"
.br
.ti -1c
.RI "#define \fBTINFL_LZ_DICT_SIZE\fP   32768"
.br
.ti -1c
.RI "#define \fBtinfl_init\fP(r)"
.br
.ti -1c
.RI "#define \fBtinfl_get_adler32\fP(r)   (r)->m_check_adler32"
.br
.ti -1c
.RI "#define \fBTINFL_BITBUF_SIZE\fP   (32)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned long \fBmz_ulong\fP"
.br
.ti -1c
.RI "typedef void *(* \fBmz_alloc_func\fP) (void *opaque, size_t items, size_t size)"
.br
.ti -1c
.RI "typedef void(* \fBmz_free_func\fP) (void *opaque, void *address)"
.br
.ti -1c
.RI "typedef void *(* \fBmz_realloc_func\fP) (void *opaque, void *address, size_t items, size_t size)"
.br
.ti -1c
.RI "typedef struct \fBmz_stream_s\fP \fBmz_stream\fP"
.br
.ti -1c
.RI "typedef \fBmz_stream\fP * \fBmz_streamp\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBByte\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBuInt\fP"
.br
.ti -1c
.RI "typedef \fBmz_ulong\fP \fBuLong\fP"
.br
.ti -1c
.RI "typedef \fBByte\fP \fBBytef\fP"
.br
.ti -1c
.RI "typedef \fBuInt\fP \fBuIntf\fP"
.br
.ti -1c
.RI "typedef char \fBcharf\fP"
.br
.ti -1c
.RI "typedef int \fBintf\fP"
.br
.ti -1c
.RI "typedef void * \fBvoidpf\fP"
.br
.ti -1c
.RI "typedef \fBuLong\fP \fBuLongf\fP"
.br
.ti -1c
.RI "typedef void * \fBvoidp\fP"
.br
.ti -1c
.RI "typedef void *const \fBvoidpc\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBmz_uint8\fP"
.br
.ti -1c
.RI "typedef signed short \fBmz_int16\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBmz_uint16\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBmz_uint32\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBmz_uint\fP"
.br
.ti -1c
.RI "typedef int64_t \fBmz_int64\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBmz_uint64\fP"
.br
.ti -1c
.RI "typedef int \fBmz_bool\fP"
.br
.ti -1c
.RI "typedef \fBmz_bool\fP(* \fBtdefl_put_buf_func_ptr\fP) (const void *pBuf, int len, void *pUser)"
.br
.ti -1c
.RI "typedef int(* \fBtinfl_put_buf_func_ptr\fP) (const void *pBuf, int len, void *pUser)"
.br
.ti -1c
.RI "typedef struct \fBtinfl_decompressor_tag\fP \fBtinfl_decompressor\fP"
.br
.ti -1c
.RI "typedef \fBmz_uint32\fP \fBtinfl_bit_buf_t\fP"
.br
.ti -1c
.RI "typedef size_t(* \fBmz_file_read_func\fP) (void *pOpaque, \fBmz_uint64\fP file_ofs, void *pBuf, size_t n)"
.br
.ti -1c
.RI "typedef size_t(* \fBmz_file_write_func\fP) (void *pOpaque, \fBmz_uint64\fP file_ofs, const void *pBuf, size_t n)"
.br
.ti -1c
.RI "typedef \fBmz_bool\fP(* \fBmz_file_needs_keepalive\fP) (void *pOpaque)"
.br
.ti -1c
.RI "typedef struct \fBmz_zip_internal_state_tag\fP \fBmz_zip_internal_state\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBMZ_DEFAULT_STRATEGY\fP = 0, \fBMZ_FILTERED\fP = 1, \fBMZ_HUFFMAN_ONLY\fP = 2, \fBMZ_RLE\fP = 3, \fBMZ_FIXED\fP = 4 }"
.br
.ti -1c
.RI "enum { \fBMZ_NO_COMPRESSION\fP = 0, \fBMZ_BEST_SPEED\fP = 1, \fBMZ_BEST_COMPRESSION\fP = 9, \fBMZ_UBER_COMPRESSION\fP = 10, \fBMZ_DEFAULT_LEVEL\fP = 6, \fBMZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum { \fBMZ_NO_FLUSH\fP = 0, \fBMZ_PARTIAL_FLUSH\fP = 1, \fBMZ_SYNC_FLUSH\fP = 2, \fBMZ_FULL_FLUSH\fP = 3, \fBMZ_FINISH\fP = 4, \fBMZ_BLOCK\fP = 5 }"
.br
.ti -1c
.RI "enum { \fBMZ_OK\fP = 0, \fBMZ_STREAM_END\fP = 1, \fBMZ_NEED_DICT\fP = 2, \fBMZ_ERRNO\fP = -1, \fBMZ_STREAM_ERROR\fP = -2, \fBMZ_DATA_ERROR\fP = -3, \fBMZ_MEM_ERROR\fP = -4, \fBMZ_BUF_ERROR\fP = -5, \fBMZ_VERSION_ERROR\fP = -6, \fBMZ_PARAM_ERROR\fP = -10000 }"
.br
.ti -1c
.RI "enum { \fBTDEFL_HUFFMAN_ONLY\fP = 0, \fBTDEFL_DEFAULT_MAX_PROBES\fP = 128, \fBTDEFL_MAX_PROBES_MASK\fP = 0xFFF }"
.br
.ti -1c
.RI "enum { \fBTDEFL_WRITE_ZLIB_HEADER\fP = 0x01000, \fBTDEFL_COMPUTE_ADLER32\fP = 0x02000, \fBTDEFL_GREEDY_PARSING_FLAG\fP = 0x04000, \fBTDEFL_NONDETERMINISTIC_PARSING_FLAG\fP = 0x08000, \fBTDEFL_RLE_MATCHES\fP = 0x10000, \fBTDEFL_FILTER_MATCHES\fP = 0x20000, \fBTDEFL_FORCE_ALL_STATIC_BLOCKS\fP = 0x40000, \fBTDEFL_FORCE_ALL_RAW_BLOCKS\fP = 0x80000 }"
.br
.ti -1c
.RI "enum { \fBTDEFL_MAX_HUFF_TABLES\fP = 3, \fBTDEFL_MAX_HUFF_SYMBOLS_0\fP = 288, \fBTDEFL_MAX_HUFF_SYMBOLS_1\fP = 32, \fBTDEFL_MAX_HUFF_SYMBOLS_2\fP = 19, \fBTDEFL_LZ_DICT_SIZE\fP = 32768, \fBTDEFL_LZ_DICT_SIZE_MASK\fP = TDEFL_LZ_DICT_SIZE - 1, \fBTDEFL_MIN_MATCH_LEN\fP = 3, \fBTDEFL_MAX_MATCH_LEN\fP = 258 }"
.br
.ti -1c
.RI "enum { \fBTDEFL_LZ_CODE_BUF_SIZE\fP = 64 * 1024, \fBTDEFL_OUT_BUF_SIZE\fP = (TDEFL_LZ_CODE_BUF_SIZE * 13) / 10, \fBTDEFL_MAX_HUFF_SYMBOLS\fP = 288, \fBTDEFL_LZ_HASH_BITS\fP = 15, \fBTDEFL_LEVEL1_HASH_SIZE_MASK\fP = 4095, \fBTDEFL_LZ_HASH_SHIFT\fP = (TDEFL_LZ_HASH_BITS + 2) / 3, \fBTDEFL_LZ_HASH_SIZE\fP = 1 << TDEFL_LZ_HASH_BITS }"
.br
.ti -1c
.RI "enum \fBtdefl_status\fP { \fBTDEFL_STATUS_BAD_PARAM\fP = -2, \fBTDEFL_STATUS_PUT_BUF_FAILED\fP = -1, \fBTDEFL_STATUS_OKAY\fP = 0, \fBTDEFL_STATUS_DONE\fP = 1 }"
.br
.ti -1c
.RI "enum \fBtdefl_flush\fP { \fBTDEFL_NO_FLUSH\fP = 0, \fBTDEFL_SYNC_FLUSH\fP = 2, \fBTDEFL_FULL_FLUSH\fP = 3, \fBTDEFL_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum { \fBTINFL_FLAG_PARSE_ZLIB_HEADER\fP = 1, \fBTINFL_FLAG_HAS_MORE_INPUT\fP = 2, \fBTINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF\fP = 4, \fBTINFL_FLAG_COMPUTE_ADLER32\fP = 8 }"
.br
.ti -1c
.RI "enum \fBtinfl_status\fP { \fBTINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS\fP = -4, \fBTINFL_STATUS_BAD_PARAM\fP = -3, \fBTINFL_STATUS_ADLER32_MISMATCH\fP = -2, \fBTINFL_STATUS_FAILED\fP = -1, \fBTINFL_STATUS_DONE\fP = 0, \fBTINFL_STATUS_NEEDS_MORE_INPUT\fP = 1, \fBTINFL_STATUS_HAS_MORE_OUTPUT\fP = 2 }"
.br
.ti -1c
.RI "enum { \fBTINFL_MAX_HUFF_TABLES\fP = 3, \fBTINFL_MAX_HUFF_SYMBOLS_0\fP = 288, \fBTINFL_MAX_HUFF_SYMBOLS_1\fP = 32, \fBTINFL_MAX_HUFF_SYMBOLS_2\fP = 19, \fBTINFL_FAST_LOOKUP_BITS\fP = 10, \fBTINFL_FAST_LOOKUP_SIZE\fP = 1 << TINFL_FAST_LOOKUP_BITS }"
.br
.ti -1c
.RI "enum { \fBMZ_ZIP_MAX_IO_BUF_SIZE\fP = 64 * 1024, \fBMZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE\fP = 512, \fBMZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE\fP = 512 }"
.br
.ti -1c
.RI "enum \fBmz_zip_mode\fP { \fBMZ_ZIP_MODE_INVALID\fP = 0, \fBMZ_ZIP_MODE_READING\fP = 1, \fBMZ_ZIP_MODE_WRITING\fP = 2, \fBMZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED\fP = 3 }"
.br
.ti -1c
.RI "enum \fBmz_zip_flags\fP { \fBMZ_ZIP_FLAG_CASE_SENSITIVE\fP = 0x0100, \fBMZ_ZIP_FLAG_IGNORE_PATH\fP = 0x0200, \fBMZ_ZIP_FLAG_COMPRESSED_DATA\fP = 0x0400, \fBMZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY\fP = 0x0800, \fBMZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG\fP = 0x1000, \fBMZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY\fP = 0x2000, \fBMZ_ZIP_FLAG_WRITE_ZIP64\fP = 0x4000, \fBMZ_ZIP_FLAG_WRITE_ALLOW_READING\fP = 0x8000, \fBMZ_ZIP_FLAG_ASCII_FILENAME\fP = 0x10000 }"
.br
.ti -1c
.RI "enum \fBmz_zip_type\fP { \fBMZ_ZIP_TYPE_INVALID\fP = 0, \fBMZ_ZIP_TYPE_USER\fP, \fBMZ_ZIP_TYPE_MEMORY\fP, \fBMZ_ZIP_TYPE_HEAP\fP, \fBMZ_ZIP_TYPE_FILE\fP, \fBMZ_ZIP_TYPE_CFILE\fP, \fBMZ_ZIP_TOTAL_TYPES\fP }"
.br
.ti -1c
.RI "enum \fBmz_zip_error\fP { \fBMZ_ZIP_NO_ERROR\fP = 0, \fBMZ_ZIP_UNDEFINED_ERROR\fP, \fBMZ_ZIP_TOO_MANY_FILES\fP, \fBMZ_ZIP_FILE_TOO_LARGE\fP, \fBMZ_ZIP_UNSUPPORTED_METHOD\fP, \fBMZ_ZIP_UNSUPPORTED_ENCRYPTION\fP, \fBMZ_ZIP_UNSUPPORTED_FEATURE\fP, \fBMZ_ZIP_FAILED_FINDING_CENTRAL_DIR\fP, \fBMZ_ZIP_NOT_AN_ARCHIVE\fP, \fBMZ_ZIP_INVALID_HEADER_OR_CORRUPTED\fP, \fBMZ_ZIP_UNSUPPORTED_MULTIDISK\fP, \fBMZ_ZIP_DECOMPRESSION_FAILED\fP, \fBMZ_ZIP_COMPRESSION_FAILED\fP, \fBMZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE\fP, \fBMZ_ZIP_CRC_CHECK_FAILED\fP, \fBMZ_ZIP_UNSUPPORTED_CDIR_SIZE\fP, \fBMZ_ZIP_ALLOC_FAILED\fP, \fBMZ_ZIP_FILE_OPEN_FAILED\fP, \fBMZ_ZIP_FILE_CREATE_FAILED\fP, \fBMZ_ZIP_FILE_WRITE_FAILED\fP, \fBMZ_ZIP_FILE_READ_FAILED\fP, \fBMZ_ZIP_FILE_CLOSE_FAILED\fP, \fBMZ_ZIP_FILE_SEEK_FAILED\fP, \fBMZ_ZIP_FILE_STAT_FAILED\fP, \fBMZ_ZIP_INVALID_PARAMETER\fP, \fBMZ_ZIP_INVALID_FILENAME\fP, \fBMZ_ZIP_BUF_TOO_SMALL\fP, \fBMZ_ZIP_INTERNAL_ERROR\fP, \fBMZ_ZIP_FILE_NOT_FOUND\fP, \fBMZ_ZIP_ARCHIVE_TOO_LARGE\fP, \fBMZ_ZIP_VALIDATION_FAILED\fP, \fBMZ_ZIP_WRITE_CALLBACK_FAILED\fP, \fBMZ_ZIP_TOTAL_ERRORS\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmz_free\fP (void *p)"
.br
.ti -1c
.RI "\fBmz_ulong\fP \fBmz_adler32\fP (\fBmz_ulong\fP adler, const unsigned char *ptr, size_t buf_len)"
.br
.ti -1c
.RI "\fBmz_ulong\fP \fBmz_crc32\fP (\fBmz_ulong\fP crc, const unsigned char *ptr, size_t buf_len)"
.br
.ti -1c
.RI "const char * \fBmz_version\fP (void)"
.br
.ti -1c
.RI "int \fBmz_deflateInit\fP (\fBmz_streamp\fP pStream, int level)"
.br
.ti -1c
.RI "int \fBmz_deflateInit2\fP (\fBmz_streamp\fP pStream, int level, int method, int window_bits, int mem_level, int strategy)"
.br
.ti -1c
.RI "int \fBmz_deflateReset\fP (\fBmz_streamp\fP pStream)"
.br
.ti -1c
.RI "int \fBmz_deflate\fP (\fBmz_streamp\fP pStream, int flush)"
.br
.ti -1c
.RI "int \fBmz_deflateEnd\fP (\fBmz_streamp\fP pStream)"
.br
.ti -1c
.RI "\fBmz_ulong\fP \fBmz_deflateBound\fP (\fBmz_streamp\fP pStream, \fBmz_ulong\fP source_len)"
.br
.ti -1c
.RI "int \fBmz_compress\fP (unsigned char *pDest, \fBmz_ulong\fP *pDest_len, const unsigned char *pSource, \fBmz_ulong\fP source_len)"
.br
.ti -1c
.RI "int \fBmz_compress2\fP (unsigned char *pDest, \fBmz_ulong\fP *pDest_len, const unsigned char *pSource, \fBmz_ulong\fP source_len, int level)"
.br
.ti -1c
.RI "\fBmz_ulong\fP \fBmz_compressBound\fP (\fBmz_ulong\fP source_len)"
.br
.ti -1c
.RI "int \fBmz_inflateInit\fP (\fBmz_streamp\fP pStream)"
.br
.ti -1c
.RI "int \fBmz_inflateInit2\fP (\fBmz_streamp\fP pStream, int window_bits)"
.br
.ti -1c
.RI "int \fBmz_inflate\fP (\fBmz_streamp\fP pStream, int flush)"
.br
.ti -1c
.RI "int \fBmz_inflateEnd\fP (\fBmz_streamp\fP pStream)"
.br
.ti -1c
.RI "int \fBmz_uncompress\fP (unsigned char *pDest, \fBmz_ulong\fP *pDest_len, const unsigned char *pSource, \fBmz_ulong\fP source_len)"
.br
.ti -1c
.RI "const char * \fBmz_error\fP (int err)"
.br
.ti -1c
.RI "void * \fBminiz_def_alloc_func\fP (void *opaque, size_t items, size_t size)"
.br
.ti -1c
.RI "void \fBminiz_def_free_func\fP (void *opaque, void *address)"
.br
.ti -1c
.RI "void * \fBminiz_def_realloc_func\fP (void *opaque, void *address, size_t items, size_t size)"
.br
.ti -1c
.RI "void * \fBtdefl_compress_mem_to_heap\fP (const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)"
.br
.ti -1c
.RI "size_t \fBtdefl_compress_mem_to_mem\fP (void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)"
.br
.ti -1c
.RI "void * \fBtdefl_write_image_to_png_file_in_memory_ex\fP (const void *pImage, int w, int h, int num_chans, size_t *pLen_out, \fBmz_uint\fP level, \fBmz_bool\fP flip)"
.br
.ti -1c
.RI "void * \fBtdefl_write_image_to_png_file_in_memory\fP (const void *pImage, int w, int h, int num_chans, size_t *pLen_out)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBtdefl_compress_mem_to_output\fP (const void *pBuf, size_t buf_len, \fBtdefl_put_buf_func_ptr\fP pPut_buf_func, void *pPut_buf_user, int flags)"
.br
.ti -1c
.RI "\fBtdefl_status\fP \fBtdefl_init\fP (\fBtdefl_compressor\fP *d, \fBtdefl_put_buf_func_ptr\fP pPut_buf_func, void *pPut_buf_user, int flags)"
.br
.ti -1c
.RI "\fBtdefl_status\fP \fBtdefl_compress\fP (\fBtdefl_compressor\fP *d, const void *pIn_buf, size_t *pIn_buf_size, void *pOut_buf, size_t *pOut_buf_size, \fBtdefl_flush\fP flush)"
.br
.ti -1c
.RI "\fBtdefl_status\fP \fBtdefl_compress_buffer\fP (\fBtdefl_compressor\fP *d, const void *pIn_buf, size_t in_buf_size, \fBtdefl_flush\fP flush)"
.br
.ti -1c
.RI "\fBtdefl_status\fP \fBtdefl_get_prev_return_status\fP (\fBtdefl_compressor\fP *d)"
.br
.ti -1c
.RI "\fBmz_uint32\fP \fBtdefl_get_adler32\fP (\fBtdefl_compressor\fP *d)"
.br
.ti -1c
.RI "\fBmz_uint\fP \fBtdefl_create_comp_flags_from_zip_params\fP (int level, int window_bits, int strategy)"
.br
.ti -1c
.RI "\fBtdefl_compressor\fP * \fBtdefl_compressor_alloc\fP ()"
.br
.ti -1c
.RI "void \fBtdefl_compressor_free\fP (\fBtdefl_compressor\fP *pComp)"
.br
.ti -1c
.RI "void * \fBtinfl_decompress_mem_to_heap\fP (const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)"
.br
.ti -1c
.RI "size_t \fBtinfl_decompress_mem_to_mem\fP (void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)"
.br
.ti -1c
.RI "int \fBtinfl_decompress_mem_to_callback\fP (const void *pIn_buf, size_t *pIn_buf_size, \fBtinfl_put_buf_func_ptr\fP pPut_buf_func, void *pPut_buf_user, int flags)"
.br
.ti -1c
.RI "\fBtinfl_decompressor\fP * \fBtinfl_decompressor_alloc\fP ()"
.br
.ti -1c
.RI "void \fBtinfl_decompressor_free\fP (\fBtinfl_decompressor\fP *pDecomp)"
.br
.ti -1c
.RI "\fBtinfl_status\fP \fBtinfl_decompress\fP (\fBtinfl_decompressor\fP *r, const \fBmz_uint8\fP *pIn_buf_next, size_t *pIn_buf_size, \fBmz_uint8\fP *pOut_buf_start, \fBmz_uint8\fP *pOut_buf_next, size_t *pOut_buf_size, const \fBmz_uint32\fP decomp_flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_init\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint64\fP size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_init_mem\fP (\fBmz_zip_archive\fP *pZip, const void *pMem, size_t size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_init_file\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_uint32\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_init_file_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_uint\fP flags, \fBmz_uint64\fP file_start_ofs, \fBmz_uint64\fP archive_size)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_init_cfile\fP (\fBmz_zip_archive\fP *pZip, \fBMZ_FILE\fP *pFile, \fBmz_uint64\fP archive_size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_end\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "void \fBmz_zip_zero_struct\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_zip_mode\fP \fBmz_zip_get_mode\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_zip_type\fP \fBmz_zip_get_type\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_uint\fP \fBmz_zip_reader_get_num_files\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_uint64\fP \fBmz_zip_get_archive_size\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_uint64\fP \fBmz_zip_get_archive_file_start_offset\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBMZ_FILE\fP * \fBmz_zip_get_cfile\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "size_t \fBmz_zip_read_archive_data\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint64\fP file_ofs, void *pBuf, size_t n)"
.br
.ti -1c
.RI "int \fBmz_zip_locate_file\fP (\fBmz_zip_archive\fP *pZip, const char *pName, const char *pComment, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_locate_file_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pName, const char *pComment, \fBmz_uint\fP flags, \fBmz_uint32\fP *pIndex)"
.br
.ti -1c
.RI "\fBmz_zip_error\fP \fBmz_zip_set_last_error\fP (\fBmz_zip_archive\fP *pZip, \fBmz_zip_error\fP err_num)"
.br
.ti -1c
.RI "\fBmz_zip_error\fP \fBmz_zip_peek_last_error\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_zip_error\fP \fBmz_zip_clear_last_error\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_zip_error\fP \fBmz_zip_get_last_error\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "const char * \fBmz_zip_get_error_string\fP (\fBmz_zip_error\fP mz_err)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_is_file_a_directory\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_is_file_encrypted\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_is_file_supported\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index)"
.br
.ti -1c
.RI "\fBmz_uint\fP \fBmz_zip_reader_get_filename\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, char *pFilename, \fBmz_uint\fP filename_buf_size)"
.br
.ti -1c
.RI "int \fBmz_zip_reader_locate_file\fP (\fBmz_zip_archive\fP *pZip, const char *pName, const char *pComment, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "int \fBmz_zip_reader_locate_file_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pName, const char *pComment, \fBmz_uint\fP flags, \fBmz_uint32\fP *file_index)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_file_stat\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, \fBmz_zip_archive_file_stat\fP *pStat)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_is_zip64\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "size_t \fBmz_zip_get_central_dir_size\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_to_mem_no_alloc\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, void *pBuf, size_t buf_size, \fBmz_uint\fP flags, void *pUser_read_buf, size_t user_read_buf_size)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_file_to_mem_no_alloc\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, void *pBuf, size_t buf_size, \fBmz_uint\fP flags, void *pUser_read_buf, size_t user_read_buf_size)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_to_mem\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, void *pBuf, size_t buf_size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_file_to_mem\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, void *pBuf, size_t buf_size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "void * \fBmz_zip_reader_extract_to_heap\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, size_t *pSize, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "void * \fBmz_zip_reader_extract_file_to_heap\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, size_t *pSize, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_to_callback\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, \fBmz_file_write_func\fP pCallback, void *pOpaque, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_file_to_callback\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_file_write_func\fP pCallback, void *pOpaque, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_to_file\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, const char *pDst_filename, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_file_to_file\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_filename, const char *pDst_filename, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_to_cfile\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, \fBMZ_FILE\fP *File, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_reader_extract_file_to_cfile\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_filename, \fBMZ_FILE\fP *pFile, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_validate_file\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP file_index, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_validate_archive\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_validate_mem_archive\fP (const void *pMem, size_t size, \fBmz_uint\fP flags, \fBmz_zip_error\fP *pErr)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_validate_file_archive\fP (const char *pFilename, \fBmz_uint\fP flags, \fBmz_zip_error\fP *pErr)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_end\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint64\fP existing_size)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_v2\fP (\fBmz_zip_archive\fP *pZip, \fBmz_uint64\fP existing_size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_heap\fP (\fBmz_zip_archive\fP *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_heap_v2\fP (\fBmz_zip_archive\fP *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_file\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_uint64\fP size_to_reserve_at_beginning)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_file_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_uint64\fP size_to_reserve_at_beginning, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_cfile\fP (\fBmz_zip_archive\fP *pZip, \fBMZ_FILE\fP *pFile, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_from_reader\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_init_from_reader_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pFilename, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_mem\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, \fBmz_uint\fP level_and_flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_mem_ex\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_uint64\fP uncomp_size, \fBmz_uint32\fP uncomp_crc32)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_mem_ex_v2\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_uint64\fP uncomp_size, \fBmz_uint32\fP uncomp_crc32, \fBMZ_TIME_T\fP *last_modified, const char *user_extra_data_local, \fBmz_uint\fP user_extra_data_local_len, const char *user_extra_data_central, \fBmz_uint\fP user_extra_data_central_len)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_file\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_name, const char *pSrc_filename, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_cfile\fP (\fBmz_zip_archive\fP *pZip, const char *pArchive_name, \fBMZ_FILE\fP *pSrc_file, \fBmz_uint64\fP size_to_add, const \fBMZ_TIME_T\fP *pFile_time, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, const char *user_extra_data_local, \fBmz_uint\fP user_extra_data_local_len, const char *user_extra_data_central, \fBmz_uint\fP user_extra_data_central_len)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_add_from_zip_reader\fP (\fBmz_zip_archive\fP *pZip, \fBmz_zip_archive\fP *pSource_zip, \fBmz_uint\fP src_file_index)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_finalize_archive\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_finalize_heap_archive\fP (\fBmz_zip_archive\fP *pZip, void **ppBuf, size_t *pSize)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_writer_end\fP (\fBmz_zip_archive\fP *pZip)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_add_mem_to_archive_file_in_place\fP (const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags)"
.br
.ti -1c
.RI "\fBmz_bool\fP \fBmz_zip_add_mem_to_archive_file_in_place_v2\fP (const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_zip_error\fP *pErr)"
.br
.ti -1c
.RI "void * \fBmz_zip_extract_archive_file_to_heap\fP (const char *pZip_filename, const char *pArchive_name, size_t *pSize, \fBmz_uint\fP flags)"
.br
.ti -1c
.RI "void * \fBmz_zip_extract_archive_file_to_heap_v2\fP (const char *pZip_filename, const char *pArchive_name, const char *pComment, size_t *pSize, \fBmz_uint\fP flags, \fBmz_zip_error\fP *pErr)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define adler32   \fBmz_adler32\fP"

.SS "#define alloc_func   \fBmz_alloc_func\fP"

.SS "#define compress   \fBmz_compress\fP"

.SS "#define compress2   \fBmz_compress2\fP"

.SS "#define compressBound   \fBmz_compressBound\fP"

.SS "#define crc32   \fBmz_crc32\fP"

.SS "#define deflate   \fBmz_deflate\fP"

.SS "#define deflateBound   \fBmz_deflateBound\fP"

.SS "#define deflateEnd   \fBmz_deflateEnd\fP"

.SS "#define deflateInit   \fBmz_deflateInit\fP"

.SS "#define deflateInit2   \fBmz_deflateInit2\fP"

.SS "#define deflateReset   \fBmz_deflateReset\fP"

.SS "#define free_func   \fBmz_free_func\fP"

.SS "#define inflate   \fBmz_inflate\fP"

.SS "#define inflateEnd   \fBmz_inflateEnd\fP"

.SS "#define inflateInit   \fBmz_inflateInit\fP"

.SS "#define inflateInit2   \fBmz_inflateInit2\fP"

.SS "#define internal_state   mz_internal_state"

.SS "#define MAX_MEM_LEVEL   9"

.SS "#define MAX_WBITS   15"

.SS "#define MINIZ_LITTLE_ENDIAN   1"

.SS "#define MZ_ADLER32_INIT   (1)"

.SS "#define MZ_ASSERT(x)   assert(x)"

.SS "#define MZ_CLEAR_OBJ(obj)   memset(&(obj), 0, sizeof(obj))"

.SS "#define MZ_CRC32_INIT   (0)"

.SS "#define MZ_DEFAULT_WINDOW_BITS   15"

.SS "#define MZ_DEFLATED   8"

.SS "#define MZ_FALSE   (0)"

.SS "#define MZ_FILE   FILE"

.SS "#define MZ_FORCEINLINE   inline"

.SS "#define MZ_FREE(x)   free(x)"

.SS "#define MZ_MACRO_END   while (0)"

.SS "#define MZ_MALLOC(x)   malloc(x)"

.SS "#define MZ_MAX(a, b)   (((a) > (b)) ? (a) : (b))"

.SS "#define MZ_MIN(a, b)   (((a) < (b)) ? (a) : (b))"

.SS "#define MZ_READ_LE16(p)   ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[0]) | ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[1]) << 8U))"

.SS "#define MZ_READ_LE32(p)   ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[0]) | ((\fBmz_uint32\fP)(((const \fBmz_uint8\fP *)(p))[1]) << 8U) | ((mz_uint32)(((const mz_uint8 *)(p))[2]) << 16U) | ((mz_uint32)(((const mz_uint8 *)(p))[3]) << 24U))"

.SS "#define MZ_READ_LE64(p)   (((\fBmz_uint64\fP)\fBMZ_READ_LE32\fP(p)) | (((\fBmz_uint64\fP)\fBMZ_READ_LE32\fP((const \fBmz_uint8\fP *)(p) + sizeof(\fBmz_uint32\fP))) << 32U))"

.SS "#define MZ_REALLOC(p, x)   realloc(p, x)"

.SS "#define MZ_TIME_T   time_t"

.SS "#define MZ_TRUE   (1)"

.SS "#define MZ_UINT16_MAX   (0xFFFFU)"

.SS "#define MZ_UINT32_MAX   (0xFFFFFFFFU)"

.SS "#define MZ_VER_MAJOR   10"

.SS "#define MZ_VER_MINOR   0"

.SS "#define MZ_VER_REVISION   0"

.SS "#define MZ_VER_SUBREVISION   0"

.SS "#define MZ_VERNUM   0xA000"

.SS "#define MZ_VERSION   '10\&.0\&.0'"

.SS "#define TDEFL_LESS_MEMORY   0"

.SS "#define TINFL_BITBUF_SIZE   (32)"

.SS "#define TINFL_DECOMPRESS_MEM_TO_MEM_FAILED   ((size_t)(-1))"

.SS "#define tinfl_get_adler32(r)   (r)->m_check_adler32"

.SS "#define tinfl_init(r)"
\fBValue:\fP
.PP
.nf
do                    \
    {                     \
        (r)->m_state = 0; \
    }                     \\
    MZ_MACRO_END
.fi
.SS "#define TINFL_LZ_DICT_SIZE   32768"

.SS "#define uncompress   \fBmz_uncompress\fP"

.SS "#define Z_BEST_COMPRESSION   \fBMZ_BEST_COMPRESSION\fP"

.SS "#define Z_BEST_SPEED   \fBMZ_BEST_SPEED\fP"

.SS "#define Z_BLOCK   \fBMZ_BLOCK\fP"

.SS "#define Z_BUF_ERROR   \fBMZ_BUF_ERROR\fP"

.SS "#define Z_DATA_ERROR   \fBMZ_DATA_ERROR\fP"

.SS "#define Z_DEFAULT_COMPRESSION   \fBMZ_DEFAULT_COMPRESSION\fP"

.SS "#define Z_DEFAULT_STRATEGY   \fBMZ_DEFAULT_STRATEGY\fP"

.SS "#define Z_DEFAULT_WINDOW_BITS   \fBMZ_DEFAULT_WINDOW_BITS\fP"

.SS "#define Z_DEFLATED   \fBMZ_DEFLATED\fP"

.SS "#define Z_ERRNO   \fBMZ_ERRNO\fP"

.SS "#define Z_FILTERED   \fBMZ_FILTERED\fP"

.SS "#define Z_FINISH   \fBMZ_FINISH\fP"

.SS "#define Z_FIXED   \fBMZ_FIXED\fP"

.SS "#define Z_FULL_FLUSH   \fBMZ_FULL_FLUSH\fP"

.SS "#define Z_HUFFMAN_ONLY   \fBMZ_HUFFMAN_ONLY\fP"

.SS "#define Z_MEM_ERROR   \fBMZ_MEM_ERROR\fP"

.SS "#define Z_NEED_DICT   \fBMZ_NEED_DICT\fP"

.SS "#define Z_NO_COMPRESSION   \fBMZ_NO_COMPRESSION\fP"

.SS "#define Z_NO_FLUSH   \fBMZ_NO_FLUSH\fP"

.SS "#define Z_NULL   0"

.SS "#define Z_OK   \fBMZ_OK\fP"

.SS "#define Z_PARAM_ERROR   \fBMZ_PARAM_ERROR\fP"

.SS "#define Z_PARTIAL_FLUSH   \fBMZ_PARTIAL_FLUSH\fP"

.SS "#define Z_RLE   \fBMZ_RLE\fP"

.SS "#define z_stream   \fBmz_stream\fP"

.SS "#define Z_STREAM_END   \fBMZ_STREAM_END\fP"

.SS "#define Z_STREAM_ERROR   \fBMZ_STREAM_ERROR\fP"

.SS "#define Z_SYNC_FLUSH   \fBMZ_SYNC_FLUSH\fP"

.SS "#define Z_VERSION_ERROR   \fBMZ_VERSION_ERROR\fP"

.SS "#define zError   \fBmz_error\fP"

.SS "#define ZLIB_VER_MAJOR   \fBMZ_VER_MAJOR\fP"

.SS "#define ZLIB_VER_MINOR   \fBMZ_VER_MINOR\fP"

.SS "#define ZLIB_VER_REVISION   \fBMZ_VER_REVISION\fP"

.SS "#define ZLIB_VER_SUBREVISION   \fBMZ_VER_SUBREVISION\fP"

.SS "#define ZLIB_VERNUM   \fBMZ_VERNUM\fP"

.SS "#define ZLIB_VERSION   \fBMZ_VERSION\fP"

.SS "#define zlib_version   \fBmz_version\fP()"

.SS "#define zlibVersion   \fBmz_version\fP"

.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned char \fBByte\fP"

.SS "typedef \fBByte\fP \fBBytef\fP"

.SS "typedef char \fBcharf\fP"

.SS "typedef int \fBintf\fP"

.SS "typedef void*(* mz_alloc_func) (void *opaque, size_t items, size_t size)"

.SS "typedef int \fBmz_bool\fP"

.SS "typedef \fBmz_bool\fP(* mz_file_needs_keepalive) (void *pOpaque)"

.SS "typedef size_t(* mz_file_read_func) (void *pOpaque, \fBmz_uint64\fP file_ofs, void *pBuf, size_t n)"

.SS "typedef size_t(* mz_file_write_func) (void *pOpaque, \fBmz_uint64\fP file_ofs, const void *pBuf, size_t n)"

.SS "typedef void(* mz_free_func) (void *opaque, void *address)"

.SS "typedef signed short \fBmz_int16\fP"

.SS "typedef int64_t \fBmz_int64\fP"

.SS "typedef void*(* mz_realloc_func) (void *opaque, void *address, size_t items, size_t size)"

.SS "typedef struct \fBmz_stream_s\fP  \fBmz_stream\fP"

.SS "typedef \fBmz_stream\fP* \fBmz_streamp\fP"

.SS "typedef unsigned int \fBmz_uint\fP"

.SS "typedef unsigned short \fBmz_uint16\fP"

.SS "typedef unsigned int \fBmz_uint32\fP"

.SS "typedef uint64_t \fBmz_uint64\fP"

.SS "typedef unsigned char \fBmz_uint8\fP"

.SS "typedef unsigned long \fBmz_ulong\fP"

.SS "typedef struct \fBmz_zip_internal_state_tag\fP \fBmz_zip_internal_state\fP"

.SS "typedef \fBmz_bool\fP(* tdefl_put_buf_func_ptr) (const void *pBuf, int len, void *pUser)"

.SS "typedef \fBmz_uint32\fP \fBtinfl_bit_buf_t\fP"

.SS "typedef struct \fBtinfl_decompressor_tag\fP \fBtinfl_decompressor\fP"

.SS "typedef int(* tinfl_put_buf_func_ptr) (const void *pBuf, int len, void *pUser)"

.SS "typedef unsigned int \fBuInt\fP"

.SS "typedef \fBuInt\fP \fBuIntf\fP"

.SS "typedef \fBmz_ulong\fP \fBuLong\fP"

.SS "typedef \fBuLong\fP \fBuLongf\fP"

.SS "typedef void* \fBvoidp\fP"

.SS "typedef void* const \fBvoidpc\fP"

.SS "typedef void* \fBvoidpf\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITINFL_FLAG_PARSE_ZLIB_HEADER \fP\fP
.TP
\fB\fITINFL_FLAG_HAS_MORE_INPUT \fP\fP
.TP
\fB\fITINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF \fP\fP
.TP
\fB\fITINFL_FLAG_COMPUTE_ADLER32 \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITINFL_MAX_HUFF_TABLES \fP\fP
.TP
\fB\fITINFL_MAX_HUFF_SYMBOLS_0 \fP\fP
.TP
\fB\fITINFL_MAX_HUFF_SYMBOLS_1 \fP\fP
.TP
\fB\fITINFL_MAX_HUFF_SYMBOLS_2 \fP\fP
.TP
\fB\fITINFL_FAST_LOOKUP_BITS \fP\fP
.TP
\fB\fITINFL_FAST_LOOKUP_SIZE \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_ZIP_MAX_IO_BUF_SIZE \fP\fP
.TP
\fB\fIMZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE \fP\fP
.TP
\fB\fIMZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_DEFAULT_STRATEGY \fP\fP
.TP
\fB\fIMZ_FILTERED \fP\fP
.TP
\fB\fIMZ_HUFFMAN_ONLY \fP\fP
.TP
\fB\fIMZ_RLE \fP\fP
.TP
\fB\fIMZ_FIXED \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_NO_COMPRESSION \fP\fP
.TP
\fB\fIMZ_BEST_SPEED \fP\fP
.TP
\fB\fIMZ_BEST_COMPRESSION \fP\fP
.TP
\fB\fIMZ_UBER_COMPRESSION \fP\fP
.TP
\fB\fIMZ_DEFAULT_LEVEL \fP\fP
.TP
\fB\fIMZ_DEFAULT_COMPRESSION \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_NO_FLUSH \fP\fP
.TP
\fB\fIMZ_PARTIAL_FLUSH \fP\fP
.TP
\fB\fIMZ_SYNC_FLUSH \fP\fP
.TP
\fB\fIMZ_FULL_FLUSH \fP\fP
.TP
\fB\fIMZ_FINISH \fP\fP
.TP
\fB\fIMZ_BLOCK \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_OK \fP\fP
.TP
\fB\fIMZ_STREAM_END \fP\fP
.TP
\fB\fIMZ_NEED_DICT \fP\fP
.TP
\fB\fIMZ_ERRNO \fP\fP
.TP
\fB\fIMZ_STREAM_ERROR \fP\fP
.TP
\fB\fIMZ_DATA_ERROR \fP\fP
.TP
\fB\fIMZ_MEM_ERROR \fP\fP
.TP
\fB\fIMZ_BUF_ERROR \fP\fP
.TP
\fB\fIMZ_VERSION_ERROR \fP\fP
.TP
\fB\fIMZ_PARAM_ERROR \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_HUFFMAN_ONLY \fP\fP
.TP
\fB\fITDEFL_DEFAULT_MAX_PROBES \fP\fP
.TP
\fB\fITDEFL_MAX_PROBES_MASK \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_WRITE_ZLIB_HEADER \fP\fP
.TP
\fB\fITDEFL_COMPUTE_ADLER32 \fP\fP
.TP
\fB\fITDEFL_GREEDY_PARSING_FLAG \fP\fP
.TP
\fB\fITDEFL_NONDETERMINISTIC_PARSING_FLAG \fP\fP
.TP
\fB\fITDEFL_RLE_MATCHES \fP\fP
.TP
\fB\fITDEFL_FILTER_MATCHES \fP\fP
.TP
\fB\fITDEFL_FORCE_ALL_STATIC_BLOCKS \fP\fP
.TP
\fB\fITDEFL_FORCE_ALL_RAW_BLOCKS \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_MAX_HUFF_TABLES \fP\fP
.TP
\fB\fITDEFL_MAX_HUFF_SYMBOLS_0 \fP\fP
.TP
\fB\fITDEFL_MAX_HUFF_SYMBOLS_1 \fP\fP
.TP
\fB\fITDEFL_MAX_HUFF_SYMBOLS_2 \fP\fP
.TP
\fB\fITDEFL_LZ_DICT_SIZE \fP\fP
.TP
\fB\fITDEFL_LZ_DICT_SIZE_MASK \fP\fP
.TP
\fB\fITDEFL_MIN_MATCH_LEN \fP\fP
.TP
\fB\fITDEFL_MAX_MATCH_LEN \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_LZ_CODE_BUF_SIZE \fP\fP
.TP
\fB\fITDEFL_OUT_BUF_SIZE \fP\fP
.TP
\fB\fITDEFL_MAX_HUFF_SYMBOLS \fP\fP
.TP
\fB\fITDEFL_LZ_HASH_BITS \fP\fP
.TP
\fB\fITDEFL_LEVEL1_HASH_SIZE_MASK \fP\fP
.TP
\fB\fITDEFL_LZ_HASH_SHIFT \fP\fP
.TP
\fB\fITDEFL_LZ_HASH_SIZE \fP\fP
.SS "enum \fBmz_zip_error\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_ZIP_NO_ERROR \fP\fP
.TP
\fB\fIMZ_ZIP_UNDEFINED_ERROR \fP\fP
.TP
\fB\fIMZ_ZIP_TOO_MANY_FILES \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_TOO_LARGE \fP\fP
.TP
\fB\fIMZ_ZIP_UNSUPPORTED_METHOD \fP\fP
.TP
\fB\fIMZ_ZIP_UNSUPPORTED_ENCRYPTION \fP\fP
.TP
\fB\fIMZ_ZIP_UNSUPPORTED_FEATURE \fP\fP
.TP
\fB\fIMZ_ZIP_FAILED_FINDING_CENTRAL_DIR \fP\fP
.TP
\fB\fIMZ_ZIP_NOT_AN_ARCHIVE \fP\fP
.TP
\fB\fIMZ_ZIP_INVALID_HEADER_OR_CORRUPTED \fP\fP
.TP
\fB\fIMZ_ZIP_UNSUPPORTED_MULTIDISK \fP\fP
.TP
\fB\fIMZ_ZIP_DECOMPRESSION_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_COMPRESSION_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE \fP\fP
.TP
\fB\fIMZ_ZIP_CRC_CHECK_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_UNSUPPORTED_CDIR_SIZE \fP\fP
.TP
\fB\fIMZ_ZIP_ALLOC_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_OPEN_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_CREATE_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_WRITE_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_READ_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_CLOSE_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_SEEK_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_STAT_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_INVALID_PARAMETER \fP\fP
.TP
\fB\fIMZ_ZIP_INVALID_FILENAME \fP\fP
.TP
\fB\fIMZ_ZIP_BUF_TOO_SMALL \fP\fP
.TP
\fB\fIMZ_ZIP_INTERNAL_ERROR \fP\fP
.TP
\fB\fIMZ_ZIP_FILE_NOT_FOUND \fP\fP
.TP
\fB\fIMZ_ZIP_ARCHIVE_TOO_LARGE \fP\fP
.TP
\fB\fIMZ_ZIP_VALIDATION_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_WRITE_CALLBACK_FAILED \fP\fP
.TP
\fB\fIMZ_ZIP_TOTAL_ERRORS \fP\fP
.SS "enum \fBmz_zip_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_ZIP_FLAG_CASE_SENSITIVE \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_IGNORE_PATH \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_COMPRESSED_DATA \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_WRITE_ZIP64 \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_WRITE_ALLOW_READING \fP\fP
.TP
\fB\fIMZ_ZIP_FLAG_ASCII_FILENAME \fP\fP
.SS "enum \fBmz_zip_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_ZIP_MODE_INVALID \fP\fP
.TP
\fB\fIMZ_ZIP_MODE_READING \fP\fP
.TP
\fB\fIMZ_ZIP_MODE_WRITING \fP\fP
.TP
\fB\fIMZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED \fP\fP
.SS "enum \fBmz_zip_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMZ_ZIP_TYPE_INVALID \fP\fP
.TP
\fB\fIMZ_ZIP_TYPE_USER \fP\fP
.TP
\fB\fIMZ_ZIP_TYPE_MEMORY \fP\fP
.TP
\fB\fIMZ_ZIP_TYPE_HEAP \fP\fP
.TP
\fB\fIMZ_ZIP_TYPE_FILE \fP\fP
.TP
\fB\fIMZ_ZIP_TYPE_CFILE \fP\fP
.TP
\fB\fIMZ_ZIP_TOTAL_TYPES \fP\fP
.SS "enum \fBtdefl_flush\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_NO_FLUSH \fP\fP
.TP
\fB\fITDEFL_SYNC_FLUSH \fP\fP
.TP
\fB\fITDEFL_FULL_FLUSH \fP\fP
.TP
\fB\fITDEFL_FINISH \fP\fP
.SS "enum \fBtdefl_status\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITDEFL_STATUS_BAD_PARAM \fP\fP
.TP
\fB\fITDEFL_STATUS_PUT_BUF_FAILED \fP\fP
.TP
\fB\fITDEFL_STATUS_OKAY \fP\fP
.TP
\fB\fITDEFL_STATUS_DONE \fP\fP
.SS "enum \fBtinfl_status\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS \fP\fP
.TP
\fB\fITINFL_STATUS_BAD_PARAM \fP\fP
.TP
\fB\fITINFL_STATUS_ADLER32_MISMATCH \fP\fP
.TP
\fB\fITINFL_STATUS_FAILED \fP\fP
.TP
\fB\fITINFL_STATUS_DONE \fP\fP
.TP
\fB\fITINFL_STATUS_NEEDS_MORE_INPUT \fP\fP
.TP
\fB\fITINFL_STATUS_HAS_MORE_OUTPUT \fP\fP
.SH "Function Documentation"
.PP 
.SS "void* miniz_def_alloc_func (void * opaque, size_t items, size_t size)"

.SS "void miniz_def_free_func (void * opaque, void * address)"

.SS "void* miniz_def_realloc_func (void * opaque, void * address, size_t items, size_t size)"

.SS "\fBmz_ulong\fP mz_adler32 (\fBmz_ulong\fP adler, const unsigned char * ptr, size_t buf_len)"

.SS "int mz_compress (unsigned char * pDest, \fBmz_ulong\fP * pDest_len, const unsigned char * pSource, \fBmz_ulong\fP source_len)"

.SS "int mz_compress2 (unsigned char * pDest, \fBmz_ulong\fP * pDest_len, const unsigned char * pSource, \fBmz_ulong\fP source_len, int level)"

.SS "\fBmz_ulong\fP mz_compressBound (\fBmz_ulong\fP source_len)"

.SS "\fBmz_ulong\fP mz_crc32 (\fBmz_ulong\fP crc, const unsigned char * ptr, size_t buf_len)"

.SS "int mz_deflate (\fBmz_streamp\fP pStream, int flush)"

.SS "\fBmz_ulong\fP mz_deflateBound (\fBmz_streamp\fP pStream, \fBmz_ulong\fP source_len)"

.SS "int mz_deflateEnd (\fBmz_streamp\fP pStream)"

.SS "int mz_deflateInit (\fBmz_streamp\fP pStream, int level)"

.SS "int mz_deflateInit2 (\fBmz_streamp\fP pStream, int level, int method, int window_bits, int mem_level, int strategy)"

.SS "int mz_deflateReset (\fBmz_streamp\fP pStream)"

.SS "const char* mz_error (int err)"

.SS "void mz_free (void * p)"

.SS "int mz_inflate (\fBmz_streamp\fP pStream, int flush)"

.SS "int mz_inflateEnd (\fBmz_streamp\fP pStream)"

.SS "int mz_inflateInit (\fBmz_streamp\fP pStream)"

.SS "int mz_inflateInit2 (\fBmz_streamp\fP pStream, int window_bits)"

.SS "int mz_uncompress (unsigned char * pDest, \fBmz_ulong\fP * pDest_len, const unsigned char * pSource, \fBmz_ulong\fP source_len)"

.SS "const char* mz_version (void)"

.SS "\fBmz_bool\fP mz_zip_add_mem_to_archive_file_in_place (const char * pZip_filename, const char * pArchive_name, const void * pBuf, size_t buf_size, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags)"

.SS "\fBmz_bool\fP mz_zip_add_mem_to_archive_file_in_place_v2 (const char * pZip_filename, const char * pArchive_name, const void * pBuf, size_t buf_size, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_zip_error\fP * pErr)"

.SS "\fBmz_zip_error\fP mz_zip_clear_last_error (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_end (\fBmz_zip_archive\fP * pZip)"

.SS "void* mz_zip_extract_archive_file_to_heap (const char * pZip_filename, const char * pArchive_name, size_t * pSize, \fBmz_uint\fP flags)"

.SS "void* mz_zip_extract_archive_file_to_heap_v2 (const char * pZip_filename, const char * pArchive_name, const char * pComment, size_t * pSize, \fBmz_uint\fP flags, \fBmz_zip_error\fP * pErr)"

.SS "\fBmz_uint64\fP mz_zip_get_archive_file_start_offset (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_uint64\fP mz_zip_get_archive_size (\fBmz_zip_archive\fP * pZip)"

.SS "size_t mz_zip_get_central_dir_size (\fBmz_zip_archive\fP * pZip)"

.SS "\fBMZ_FILE\fP* mz_zip_get_cfile (\fBmz_zip_archive\fP * pZip)"

.SS "const char* mz_zip_get_error_string (\fBmz_zip_error\fP mz_err)"

.SS "\fBmz_zip_error\fP mz_zip_get_last_error (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_zip_mode\fP mz_zip_get_mode (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_zip_type\fP mz_zip_get_type (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_is_zip64 (\fBmz_zip_archive\fP * pZip)"

.SS "int mz_zip_locate_file (\fBmz_zip_archive\fP * pZip, const char * pName, const char * pComment, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_locate_file_v2 (\fBmz_zip_archive\fP * pZip, const char * pName, const char * pComment, \fBmz_uint\fP flags, \fBmz_uint32\fP * pIndex)"

.SS "\fBmz_zip_error\fP mz_zip_peek_last_error (\fBmz_zip_archive\fP * pZip)"

.SS "size_t mz_zip_read_archive_data (\fBmz_zip_archive\fP * pZip, \fBmz_uint64\fP file_ofs, void * pBuf, size_t n)"

.SS "\fBmz_bool\fP mz_zip_reader_end (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_file_to_callback (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_file_write_func\fP pCallback, void * pOpaque, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_file_to_cfile (\fBmz_zip_archive\fP * pZip, const char * pArchive_filename, \fBMZ_FILE\fP * pFile, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_file_to_file (\fBmz_zip_archive\fP * pZip, const char * pArchive_filename, const char * pDst_filename, \fBmz_uint\fP flags)"

.SS "void* mz_zip_reader_extract_file_to_heap (\fBmz_zip_archive\fP * pZip, const char * pFilename, size_t * pSize, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_file_to_mem (\fBmz_zip_archive\fP * pZip, const char * pFilename, void * pBuf, size_t buf_size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_file_to_mem_no_alloc (\fBmz_zip_archive\fP * pZip, const char * pFilename, void * pBuf, size_t buf_size, \fBmz_uint\fP flags, void * pUser_read_buf, size_t user_read_buf_size)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_to_callback (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, \fBmz_file_write_func\fP pCallback, void * pOpaque, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_to_cfile (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, \fBMZ_FILE\fP * File, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_to_file (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, const char * pDst_filename, \fBmz_uint\fP flags)"

.SS "void* mz_zip_reader_extract_to_heap (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, size_t * pSize, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_to_mem (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, void * pBuf, size_t buf_size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_extract_to_mem_no_alloc (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, void * pBuf, size_t buf_size, \fBmz_uint\fP flags, void * pUser_read_buf, size_t user_read_buf_size)"

.SS "\fBmz_bool\fP mz_zip_reader_file_stat (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, \fBmz_zip_archive_file_stat\fP * pStat)"

.SS "\fBmz_uint\fP mz_zip_reader_get_filename (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, char * pFilename, \fBmz_uint\fP filename_buf_size)"

.SS "\fBmz_uint\fP mz_zip_reader_get_num_files (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_reader_init (\fBmz_zip_archive\fP * pZip, \fBmz_uint64\fP size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_init_cfile (\fBmz_zip_archive\fP * pZip, \fBMZ_FILE\fP * pFile, \fBmz_uint64\fP archive_size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_init_file (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_uint32\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_init_file_v2 (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_uint\fP flags, \fBmz_uint64\fP file_start_ofs, \fBmz_uint64\fP archive_size)"

.SS "\fBmz_bool\fP mz_zip_reader_init_mem (\fBmz_zip_archive\fP * pZip, const void * pMem, size_t size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_reader_is_file_a_directory (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index)"

.SS "\fBmz_bool\fP mz_zip_reader_is_file_encrypted (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index)"

.SS "\fBmz_bool\fP mz_zip_reader_is_file_supported (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index)"

.SS "int mz_zip_reader_locate_file (\fBmz_zip_archive\fP * pZip, const char * pName, const char * pComment, \fBmz_uint\fP flags)"

.SS "int mz_zip_reader_locate_file_v2 (\fBmz_zip_archive\fP * pZip, const char * pName, const char * pComment, \fBmz_uint\fP flags, \fBmz_uint32\fP * file_index)"

.SS "\fBmz_zip_error\fP mz_zip_set_last_error (\fBmz_zip_archive\fP * pZip, \fBmz_zip_error\fP err_num)"

.SS "\fBmz_bool\fP mz_zip_validate_archive (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_validate_file (\fBmz_zip_archive\fP * pZip, \fBmz_uint\fP file_index, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_validate_file_archive (const char * pFilename, \fBmz_uint\fP flags, \fBmz_zip_error\fP * pErr)"

.SS "\fBmz_bool\fP mz_zip_validate_mem_archive (const void * pMem, size_t size, \fBmz_uint\fP flags, \fBmz_zip_error\fP * pErr)"

.SS "\fBmz_bool\fP mz_zip_writer_add_cfile (\fBmz_zip_archive\fP * pZip, const char * pArchive_name, \fBMZ_FILE\fP * pSrc_file, \fBmz_uint64\fP size_to_add, const \fBMZ_TIME_T\fP * pFile_time, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, const char * user_extra_data_local, \fBmz_uint\fP user_extra_data_local_len, const char * user_extra_data_central, \fBmz_uint\fP user_extra_data_central_len)"

.SS "\fBmz_bool\fP mz_zip_writer_add_file (\fBmz_zip_archive\fP * pZip, const char * pArchive_name, const char * pSrc_filename, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags)"

.SS "\fBmz_bool\fP mz_zip_writer_add_from_zip_reader (\fBmz_zip_archive\fP * pZip, \fBmz_zip_archive\fP * pSource_zip, \fBmz_uint\fP src_file_index)"

.SS "\fBmz_bool\fP mz_zip_writer_add_mem (\fBmz_zip_archive\fP * pZip, const char * pArchive_name, const void * pBuf, size_t buf_size, \fBmz_uint\fP level_and_flags)"

.SS "\fBmz_bool\fP mz_zip_writer_add_mem_ex (\fBmz_zip_archive\fP * pZip, const char * pArchive_name, const void * pBuf, size_t buf_size, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_uint64\fP uncomp_size, \fBmz_uint32\fP uncomp_crc32)"

.SS "\fBmz_bool\fP mz_zip_writer_add_mem_ex_v2 (\fBmz_zip_archive\fP * pZip, const char * pArchive_name, const void * pBuf, size_t buf_size, const void * pComment, \fBmz_uint16\fP comment_size, \fBmz_uint\fP level_and_flags, \fBmz_uint64\fP uncomp_size, \fBmz_uint32\fP uncomp_crc32, \fBMZ_TIME_T\fP * last_modified, const char * user_extra_data_local, \fBmz_uint\fP user_extra_data_local_len, const char * user_extra_data_central, \fBmz_uint\fP user_extra_data_central_len)"

.SS "\fBmz_bool\fP mz_zip_writer_end (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_writer_finalize_archive (\fBmz_zip_archive\fP * pZip)"

.SS "\fBmz_bool\fP mz_zip_writer_finalize_heap_archive (\fBmz_zip_archive\fP * pZip, void ** ppBuf, size_t * pSize)"

.SS "\fBmz_bool\fP mz_zip_writer_init (\fBmz_zip_archive\fP * pZip, \fBmz_uint64\fP existing_size)"

.SS "\fBmz_bool\fP mz_zip_writer_init_cfile (\fBmz_zip_archive\fP * pZip, \fBMZ_FILE\fP * pFile, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_writer_init_file (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_uint64\fP size_to_reserve_at_beginning)"

.SS "\fBmz_bool\fP mz_zip_writer_init_file_v2 (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_uint64\fP size_to_reserve_at_beginning, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_writer_init_from_reader (\fBmz_zip_archive\fP * pZip, const char * pFilename)"

.SS "\fBmz_bool\fP mz_zip_writer_init_from_reader_v2 (\fBmz_zip_archive\fP * pZip, const char * pFilename, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_writer_init_heap (\fBmz_zip_archive\fP * pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size)"

.SS "\fBmz_bool\fP mz_zip_writer_init_heap_v2 (\fBmz_zip_archive\fP * pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size, \fBmz_uint\fP flags)"

.SS "\fBmz_bool\fP mz_zip_writer_init_v2 (\fBmz_zip_archive\fP * pZip, \fBmz_uint64\fP existing_size, \fBmz_uint\fP flags)"

.SS "void mz_zip_zero_struct (\fBmz_zip_archive\fP * pZip)"

.SS "\fBtdefl_status\fP tdefl_compress (\fBtdefl_compressor\fP * d, const void * pIn_buf, size_t * pIn_buf_size, void * pOut_buf, size_t * pOut_buf_size, \fBtdefl_flush\fP flush)"

.SS "\fBtdefl_status\fP tdefl_compress_buffer (\fBtdefl_compressor\fP * d, const void * pIn_buf, size_t in_buf_size, \fBtdefl_flush\fP flush)"

.SS "void* tdefl_compress_mem_to_heap (const void * pSrc_buf, size_t src_buf_len, size_t * pOut_len, int flags)"

.SS "size_t tdefl_compress_mem_to_mem (void * pOut_buf, size_t out_buf_len, const void * pSrc_buf, size_t src_buf_len, int flags)"

.SS "\fBmz_bool\fP tdefl_compress_mem_to_output (const void * pBuf, size_t buf_len, \fBtdefl_put_buf_func_ptr\fP pPut_buf_func, void * pPut_buf_user, int flags)"

.SS "\fBtdefl_compressor\fP* tdefl_compressor_alloc ()"

.SS "void tdefl_compressor_free (\fBtdefl_compressor\fP * pComp)"

.SS "\fBmz_uint\fP tdefl_create_comp_flags_from_zip_params (int level, int window_bits, int strategy)"

.SS "\fBmz_uint32\fP tdefl_get_adler32 (\fBtdefl_compressor\fP * d)"

.SS "\fBtdefl_status\fP tdefl_get_prev_return_status (\fBtdefl_compressor\fP * d)"

.SS "\fBtdefl_status\fP tdefl_init (\fBtdefl_compressor\fP * d, \fBtdefl_put_buf_func_ptr\fP pPut_buf_func, void * pPut_buf_user, int flags)"

.SS "void* tdefl_write_image_to_png_file_in_memory (const void * pImage, int w, int h, int num_chans, size_t * pLen_out)"

.SS "void* tdefl_write_image_to_png_file_in_memory_ex (const void * pImage, int w, int h, int num_chans, size_t * pLen_out, \fBmz_uint\fP level, \fBmz_bool\fP flip)"

.SS "\fBtinfl_status\fP tinfl_decompress (\fBtinfl_decompressor\fP * r, const \fBmz_uint8\fP * pIn_buf_next, size_t * pIn_buf_size, \fBmz_uint8\fP * pOut_buf_start, \fBmz_uint8\fP * pOut_buf_next, size_t * pOut_buf_size, const \fBmz_uint32\fP decomp_flags)"

.SS "int tinfl_decompress_mem_to_callback (const void * pIn_buf, size_t * pIn_buf_size, \fBtinfl_put_buf_func_ptr\fP pPut_buf_func, void * pPut_buf_user, int flags)"

.SS "void* tinfl_decompress_mem_to_heap (const void * pSrc_buf, size_t src_buf_len, size_t * pOut_len, int flags)"

.SS "size_t tinfl_decompress_mem_to_mem (void * pOut_buf, size_t out_buf_len, const void * pSrc_buf, size_t src_buf_len, int flags)"

.SS "\fBtinfl_decompressor\fP* tinfl_decompressor_alloc ()"

.SS "void tinfl_decompressor_free (\fBtinfl_decompressor\fP * pDecomp)"

.SH "Author"
.PP 
Generated automatically by Doxygen for afd from the source code\&.
