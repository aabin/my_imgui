.TH "ofbx" 3 "Thu Jun 14 2018" "afd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ofbx \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAnimationCurve\fP"
.br
.ti -1c
.RI "struct \fBAnimationCurveImpl\fP"
.br
.ti -1c
.RI "struct \fBAnimationCurveNode\fP"
.br
.ti -1c
.RI "struct \fBAnimationCurveNodeImpl\fP"
.br
.ti -1c
.RI "struct \fBAnimationLayer\fP"
.br
.ti -1c
.RI "struct \fBAnimationLayerImpl\fP"
.br
.ti -1c
.RI "struct \fBAnimationStack\fP"
.br
.ti -1c
.RI "struct \fBAnimationStackImpl\fP"
.br
.ti -1c
.RI "struct \fBCluster\fP"
.br
.ti -1c
.RI "struct \fBClusterImpl\fP"
.br
.ti -1c
.RI "struct \fBColor\fP"
.br
.ti -1c
.RI "struct \fBCursor\fP"
.br
.ti -1c
.RI "struct \fBDataView\fP"
.br
.ti -1c
.RI "struct \fBElement\fP"
.br
.ti -1c
.RI "struct \fBError\fP"
.br
.ti -1c
.RI "struct \fBGeometry\fP"
.br
.ti -1c
.RI "struct \fBGeometryImpl\fP"
.br
.ti -1c
.RI "struct \fBHeader\fP"
.br
.ti -1c
.RI "struct \fBIElement\fP"
.br
.ti -1c
.RI "struct \fBIElementProperty\fP"
.br
.ti -1c
.RI "struct \fBIScene\fP"
.br
.ti -1c
.RI "struct \fBLimbNodeImpl\fP"
.br
.ti -1c
.RI "struct \fBMaterial\fP"
.br
.ti -1c
.RI "struct \fBMaterialImpl\fP"
.br
.ti -1c
.RI "struct \fBMatrix\fP"
.br
.ti -1c
.RI "struct \fBMesh\fP"
.br
.ti -1c
.RI "struct \fBMeshImpl\fP"
.br
.ti -1c
.RI "struct \fBNodeAttribute\fP"
.br
.ti -1c
.RI "struct \fBNodeAttributeImpl\fP"
.br
.ti -1c
.RI "struct \fBNullImpl\fP"
.br
.ti -1c
.RI "struct \fBObject\fP"
.br
.ti -1c
.RI "struct \fBOptionalError\fP"
.br
.ti -1c
.RI "struct \fBProperty\fP"
.br
.ti -1c
.RI "struct \fBQuat\fP"
.br
.ti -1c
.RI "struct \fBRoot\fP"
.br
.ti -1c
.RI "struct \fBScene\fP"
.br
.ti -1c
.RI "struct \fBSkin\fP"
.br
.ti -1c
.RI "struct \fBSkinImpl\fP"
.br
.ti -1c
.RI "struct \fBTakeInfo\fP"
.br
.ti -1c
.RI "struct \fBTexture\fP"
.br
.ti -1c
.RI "struct \fBTextureImpl\fP"
.br
.ti -1c
.RI "struct \fBVec2\fP"
.br
.ti -1c
.RI "struct \fBVec3\fP"
.br
.ti -1c
.RI "struct \fBVec4\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned char \fBu8\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBu16\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBu32\fP"
.br
.ti -1c
.RI "typedef unsigned long long \fBu64\fP"
.br
.ti -1c
.RI "typedef long long \fBi64\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBFrameRate\fP { \fBFrameRate_DEFAULT\fP = 0, \fBFrameRate_120\fP = 1, \fBFrameRate_100\fP = 2, \fBFrameRate_60\fP = 3, \fBFrameRate_50\fP = 4, \fBFrameRate_48\fP = 5, \fBFrameRate_30\fP = 6, \fBFrameRate_30_DROP\fP = 7, \fBFrameRate_NTSC_DROP_FRAME\fP = 8, \fBFrameRate_NTSC_FULL_FRAME\fP = 9, \fBFrameRate_PAL\fP = 10, \fBFrameRate_CINEMA\fP = 11, \fBFrameRate_1000\fP = 12, \fBFrameRate_CINEMA_ND\fP = 13, \fBFrameRate_CUSTOM\fP = 14 }"
.br
.ti -1c
.RI "enum \fBRotationOrder\fP { \fBRotationOrder::EULER_XYZ\fP, \fBRotationOrder::EULER_XZY\fP, \fBRotationOrder::EULER_YZX\fP, \fBRotationOrder::EULER_YXZ\fP, \fBRotationOrder::EULER_ZXY\fP, \fBRotationOrder::EULER_ZYX\fP, \fBRotationOrder::SPHERIC_XYZ\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBsetTranslation\fP (const \fBVec3\fP &t, \fBMatrix\fP *mtx)"
.br
.ti -1c
.RI "static \fBVec3\fP \fBoperator-\fP (const \fBVec3\fP &v)"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBoperator*\fP (const \fBMatrix\fP &lhs, const \fBMatrix\fP &rhs)"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBmakeIdentity\fP ()"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBrotationX\fP (double angle)"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBrotationY\fP (double angle)"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBrotationZ\fP (double angle)"
.br
.ti -1c
.RI "static \fBMatrix\fP \fBgetRotationMatrix\fP (const \fBVec3\fP &euler, \fBRotationOrder\fP order)"
.br
.ti -1c
.RI "static double \fBfbxTimeToSeconds\fP (\fBi64\fP value)"
.br
.ti -1c
.RI "static \fBi64\fP \fBsecondsToFbxTime\fP (double value)"
.br
.ti -1c
.RI "static \fBVec3\fP \fBoperator*\fP (const \fBVec3\fP &v, float f)"
.br
.ti -1c
.RI "static \fBVec3\fP \fBoperator+\fP (const \fBVec3\fP &a, const \fBVec3\fP &b)"
.br
.ti -1c
.RI "template<int SIZE> static bool \fBcopyString\fP (char(&destination)[SIZE], const char *source)"
.br
.ti -1c
.RI "template<typename T > static bool \fBparseArrayRaw\fP (const \fBProperty\fP &property, T *out, int max_size)"
.br
.ti -1c
.RI "template<typename T > static bool \fBparseBinaryArray\fP (const \fBProperty\fP &property, std::vector< T > *out)"
.br
.ti -1c
.RI "static const \fBElement\fP * \fBfindChild\fP (const \fBElement\fP &element, const char *id)"
.br
.ti -1c
.RI "static \fBIElement\fP * \fBresolveProperty\fP (const \fBObject\fP &obj, const char *name)"
.br
.ti -1c
.RI "static int \fBresolveEnumProperty\fP (const \fBObject\fP &object, const char *name, int default_value)"
.br
.ti -1c
.RI "static \fBVec3\fP \fBresolveVec3Property\fP (const \fBObject\fP &object, const char *name, const \fBVec3\fP &default_value)"
.br
.ti -1c
.RI "static bool \fBdecompress\fP (const \fBu8\fP *in, size_t in_size, \fBu8\fP *out, size_t out_size)"
.br
.ti -1c
.RI "template<typename T > static \fBOptionalError\fP< T > \fBread\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBDataView\fP > \fBreadShortString\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBDataView\fP > \fBreadLongString\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBProperty\fP * > \fBreadProperty\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static void \fBdeleteElement\fP (\fBElement\fP *el)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBu64\fP > \fBreadElementOffset\fP (\fBCursor\fP *cursor, \fBu16\fP version)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBElement\fP * > \fBreadElement\fP (\fBCursor\fP *cursor, \fBu32\fP version)"
.br
.ti -1c
.RI "static bool \fBisEndLine\fP (const \fBCursor\fP &cursor)"
.br
.ti -1c
.RI "static void \fBskipInsignificantWhitespaces\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static void \fBskipLine\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static void \fBskipWhitespaces\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static bool \fBisTextTokenChar\fP (char c)"
.br
.ti -1c
.RI "static \fBDataView\fP \fBreadTextToken\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBProperty\fP * > \fBreadTextProperty\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBElement\fP * > \fBreadTextElement\fP (\fBCursor\fP *cursor)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBElement\fP * > \fBtokenizeText\fP (const \fBu8\fP *data, size_t size)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBElement\fP * > \fBtokenize\fP (const \fBu8\fP *data, size_t size)"
.br
.ti -1c
.RI "static void \fBparseTemplates\fP (const \fBElement\fP &root)"
.br
.ti -1c
.RI "struct \fBOptionalError\fP< \fBObject\fP * > \fBparseTexture\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "template<typename T > static \fBOptionalError\fP< \fBObject\fP * > \fBparse\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseCluster\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseNodeAttribute\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseLimbNode\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseMesh\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseMaterial\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "template<typename T > static bool \fBparseTextArrayRaw\fP (const \fBProperty\fP &property, T *out, int max_size)"
.br
.ti -1c
.RI "template<typename T > const char * \fBfromString\fP (const char *str, const char *end, T *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< int >\fP (const char *str, const char *end, int *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< u64 >\fP (const char *str, const char *end, \fBu64\fP *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< i64 >\fP (const char *str, const char *end, \fBi64\fP *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< double >\fP (const char *str, const char *end, double *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< float >\fP (const char *str, const char *end, float *val)"
.br
.ti -1c
.RI "const char * \fBfromString\fP (const char *str, const char *end, double *val, int count)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< Vec2 >\fP (const char *str, const char *end, \fBVec2\fP *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< Vec3 >\fP (const char *str, const char *end, \fBVec3\fP *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< Vec4 >\fP (const char *str, const char *end, \fBVec4\fP *val)"
.br
.ti -1c
.RI "template<> const char * \fBfromString< Matrix >\fP (const char *str, const char *end, \fBMatrix\fP *val)"
.br
.ti -1c
.RI "template<typename T > static void \fBparseTextArray\fP (const \fBProperty\fP &property, std::vector< T > *out)"
.br
.ti -1c
.RI "template<typename T > static bool \fBparseDoubleVecData\fP (\fBProperty\fP &property, std::vector< T > *out_vec)"
.br
.ti -1c
.RI "template<typename T > static bool \fBparseVertexData\fP (const \fBElement\fP &element, const char *name, const char *index_name, std::vector< T > *out, std::vector< int > *out_indices, \fBGeometryImpl::VertexDataMapping\fP *mapping)"
.br
.ti -1c
.RI "template<typename T > static void \fBsplat\fP (std::vector< T > *out, \fBGeometryImpl::VertexDataMapping\fP mapping, const std::vector< T > &data, const std::vector< int > &indices, const std::vector< int > &original_indices)"
.br
.ti -1c
.RI "template<typename T > static void \fBremap\fP (std::vector< T > *out, const std::vector< int > &map)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseAnimationCurve\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static int \fBgetTriCountFromPoly\fP (const std::vector< int > &indices, int *idx)"
.br
.ti -1c
.RI "static void \fBadd\fP (\fBGeometryImpl::NewVertex\fP &vtx, int index)"
.br
.ti -1c
.RI "static \fBOptionalError\fP< \fBObject\fP * > \fBparseGeometry\fP (const \fBScene\fP &scene, const \fBElement\fP &element)"
.br
.ti -1c
.RI "static bool \fBisString\fP (const \fBProperty\fP *prop)"
.br
.ti -1c
.RI "static bool \fBisLong\fP (const \fBProperty\fP *prop)"
.br
.ti -1c
.RI "static bool \fBparseConnections\fP (const \fBElement\fP &root, \fBScene\fP *scene)"
.br
.ti -1c
.RI "static bool \fBparseTakes\fP (\fBScene\fP *scene)"
.br
.ti -1c
.RI "static float \fBgetFramerateFromTimeMode\fP (int time_mode)"
.br
.ti -1c
.RI "static void \fBparseGlobalSettings\fP (const \fBElement\fP &root, \fBScene\fP *scene)"
.br
.ti -1c
.RI "static bool \fBparseObjects\fP (const \fBElement\fP &root, \fBScene\fP *scene)"
.br
.ti -1c
.RI "\fBIScene\fP * \fBload\fP (const \fBu8\fP *data, int size)"
.br
.ti -1c
.RI "const char * \fBgetError\fP ()"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef long long \fBofbx::i64\fP"

.SS "typedef unsigned short \fBofbx::u16\fP"

.SS "typedef unsigned int \fBofbx::u32\fP"

.SS "typedef unsigned long long \fBofbx::u64\fP"

.SS "typedef unsigned char \fBofbx::u8\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBofbx::FrameRate\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFrameRate_DEFAULT \fP\fP
.TP
\fB\fIFrameRate_120 \fP\fP
.TP
\fB\fIFrameRate_100 \fP\fP
.TP
\fB\fIFrameRate_60 \fP\fP
.TP
\fB\fIFrameRate_50 \fP\fP
.TP
\fB\fIFrameRate_48 \fP\fP
.TP
\fB\fIFrameRate_30 \fP\fP
.TP
\fB\fIFrameRate_30_DROP \fP\fP
.TP
\fB\fIFrameRate_NTSC_DROP_FRAME \fP\fP
.TP
\fB\fIFrameRate_NTSC_FULL_FRAME \fP\fP
.TP
\fB\fIFrameRate_PAL \fP\fP
.TP
\fB\fIFrameRate_CINEMA \fP\fP
.TP
\fB\fIFrameRate_1000 \fP\fP
.TP
\fB\fIFrameRate_CINEMA_ND \fP\fP
.TP
\fB\fIFrameRate_CUSTOM \fP\fP
.SS "enum \fBofbx::RotationOrder\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIEULER_XYZ \fP\fP
.TP
\fB\fIEULER_XZY \fP\fP
.TP
\fB\fIEULER_YZX \fP\fP
.TP
\fB\fIEULER_YXZ \fP\fP
.TP
\fB\fIEULER_ZXY \fP\fP
.TP
\fB\fIEULER_ZYX \fP\fP
.TP
\fB\fISPHERIC_XYZ \fP\fP
.SH "Function Documentation"
.PP 
.SS "static void ofbx::add (\fBGeometryImpl::NewVertex\fP & vtx, int index)\fC [static]\fP"

.SS "template<int SIZE> static bool ofbx::copyString (char(&) destination[SIZE], const char * source)\fC [static]\fP"

.SS "static bool ofbx::decompress (const \fBu8\fP * in, size_t in_size, \fBu8\fP * out, size_t out_size)\fC [static]\fP"

.SS "static void ofbx::deleteElement (\fBElement\fP * el)\fC [static]\fP"

.SS "static double ofbx::fbxTimeToSeconds (\fBi64\fP value)\fC [static]\fP"

.SS "static const \fBElement\fP* ofbx::findChild (const \fBElement\fP & element, const char * id)\fC [static]\fP"

.SS "template<typename T > const char* ofbx::fromString (const char * str, const char * end, T * val)"

.SS "const char* ofbx::fromString (const char * str, const char * end, double * val, int count)"

.SS "template<> const char* \fBofbx::fromString\fP< double > (const char * str, const char * end, double * val)"

.SS "template<> const char* \fBofbx::fromString\fP< float > (const char * str, const char * end, float * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBi64\fP > (const char * str, const char * end, \fBi64\fP * val)"

.SS "template<> const char* \fBofbx::fromString\fP< int > (const char * str, const char * end, int * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBMatrix\fP > (const char * str, const char * end, \fBMatrix\fP * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBu64\fP > (const char * str, const char * end, \fBu64\fP * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBVec2\fP > (const char * str, const char * end, \fBVec2\fP * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBVec3\fP > (const char * str, const char * end, \fBVec3\fP * val)"

.SS "template<> const char* \fBofbx::fromString\fP< \fBVec4\fP > (const char * str, const char * end, \fBVec4\fP * val)"

.SS "const char * ofbx::getError ()"

.SS "static float ofbx::getFramerateFromTimeMode (int time_mode)\fC [static]\fP"

.SS "static \fBMatrix\fP ofbx::getRotationMatrix (const \fBVec3\fP & euler, \fBRotationOrder\fP order)\fC [static]\fP"

.SS "static int ofbx::getTriCountFromPoly (const std::vector< int > & indices, int * idx)\fC [static]\fP"

.SS "static bool ofbx::isEndLine (const \fBCursor\fP & cursor)\fC [static]\fP"

.SS "static bool ofbx::isLong (const \fBProperty\fP * prop)\fC [static]\fP"

.SS "static bool ofbx::isString (const \fBProperty\fP * prop)\fC [static]\fP"

.SS "static bool ofbx::isTextTokenChar (char c)\fC [static]\fP"

.SS "\fBIScene\fP * ofbx::load (const \fBu8\fP * data, int size)"

.SS "static \fBMatrix\fP ofbx::makeIdentity ()\fC [static]\fP"

.SS "static \fBMatrix\fP ofbx::operator* (const \fBMatrix\fP & lhs, const \fBMatrix\fP & rhs)\fC [static]\fP"

.SS "static \fBVec3\fP ofbx::operator* (const \fBVec3\fP & v, float f)\fC [static]\fP"

.SS "static \fBVec3\fP ofbx::operator+ (const \fBVec3\fP & a, const \fBVec3\fP & b)\fC [static]\fP"

.SS "static \fBVec3\fP ofbx::operator- (const \fBVec3\fP & v)\fC [static]\fP"

.SS "template<typename T > static \fBOptionalError\fP<\fBObject\fP*> ofbx::parse (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseAnimationCurve (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "template<typename T > static bool ofbx::parseArrayRaw (const \fBProperty\fP & property, T * out, int max_size)\fC [static]\fP"

.SS "template<typename T > static bool ofbx::parseBinaryArray (const \fBProperty\fP & property, std::vector< T > * out)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseCluster (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static bool ofbx::parseConnections (const \fBElement\fP & root, \fBScene\fP * scene)\fC [static]\fP"

.SS "template<typename T > static bool ofbx::parseDoubleVecData (\fBProperty\fP & property, std::vector< T > * out_vec)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseGeometry (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static void ofbx::parseGlobalSettings (const \fBElement\fP & root, \fBScene\fP * scene)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseLimbNode (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseMaterial (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseMesh (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBObject\fP*> ofbx::parseNodeAttribute (const \fBScene\fP & scene, const \fBElement\fP & element)\fC [static]\fP"

.SS "static bool ofbx::parseObjects (const \fBElement\fP & root, \fBScene\fP * scene)\fC [static]\fP"

.SS "static bool ofbx::parseTakes (\fBScene\fP * scene)\fC [static]\fP"

.SS "static void ofbx::parseTemplates (const \fBElement\fP & root)\fC [static]\fP"

.SS "template<typename T > static void ofbx::parseTextArray (const \fBProperty\fP & property, std::vector< T > * out)\fC [static]\fP"

.SS "template<typename T > static bool ofbx::parseTextArrayRaw (const \fBProperty\fP & property, T * out, int max_size)\fC [static]\fP"

.SS "struct \fBOptionalError\fP< \fBObject\fP * > ofbx::parseTexture (const \fBScene\fP & scene, const \fBElement\fP & element)"

.SS "template<typename T > static bool ofbx::parseVertexData (const \fBElement\fP & element, const char * name, const char * index_name, std::vector< T > * out, std::vector< int > * out_indices, \fBGeometryImpl::VertexDataMapping\fP * mapping)\fC [static]\fP"

.SS "template<typename T > static \fBOptionalError\fP<T> ofbx::read (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBElement\fP*> ofbx::readElement (\fBCursor\fP * cursor, \fBu32\fP version)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBu64\fP> ofbx::readElementOffset (\fBCursor\fP * cursor, \fBu16\fP version)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBDataView\fP> ofbx::readLongString (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBProperty\fP*> ofbx::readProperty (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBDataView\fP> ofbx::readShortString (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBElement\fP*> ofbx::readTextElement (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBProperty\fP*> ofbx::readTextProperty (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static \fBDataView\fP ofbx::readTextToken (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "template<typename T > static void ofbx::remap (std::vector< T > * out, const std::vector< int > & map)\fC [static]\fP"

.SS "static int ofbx::resolveEnumProperty (const \fBObject\fP & object, const char * name, int default_value)\fC [static]\fP"

.SS "static \fBIElement\fP* ofbx::resolveProperty (const \fBObject\fP & obj, const char * name)\fC [static]\fP"

.SS "static \fBVec3\fP ofbx::resolveVec3Property (const \fBObject\fP & object, const char * name, const \fBVec3\fP & default_value)\fC [static]\fP"

.SS "static \fBMatrix\fP ofbx::rotationX (double angle)\fC [static]\fP"

.SS "static \fBMatrix\fP ofbx::rotationY (double angle)\fC [static]\fP"

.SS "static \fBMatrix\fP ofbx::rotationZ (double angle)\fC [static]\fP"

.SS "static \fBi64\fP ofbx::secondsToFbxTime (double value)\fC [static]\fP"

.SS "static void ofbx::setTranslation (const \fBVec3\fP & t, \fBMatrix\fP * mtx)\fC [static]\fP"

.SS "static void ofbx::skipInsignificantWhitespaces (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static void ofbx::skipLine (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "static void ofbx::skipWhitespaces (\fBCursor\fP * cursor)\fC [static]\fP"

.SS "template<typename T > static void ofbx::splat (std::vector< T > * out, \fBGeometryImpl::VertexDataMapping\fP mapping, const std::vector< T > & data, const std::vector< int > & indices, const std::vector< int > & original_indices)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBElement\fP*> ofbx::tokenize (const \fBu8\fP * data, size_t size)\fC [static]\fP"

.SS "static \fBOptionalError\fP<\fBElement\fP*> ofbx::tokenizeText (const \fBu8\fP * data, size_t size)\fC [static]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for afd from the source code\&.
