.TH "G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" 3 "Thu Jun 14 2018" "afd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'ofbx\&.h'\fP
.br
\fC#include 'miniz\&.h'\fP
.br
\fC#include <cassert>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <ctype\&.h>\fP
.br
\fC#include <memory>\fP
.br
\fC#include <unordered_map>\fP
.br
\fC#include <vector>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBofbx::Error\fP"
.br
.ti -1c
.RI "struct \fBofbx::OptionalError< T >\fP"
.br
.ti -1c
.RI "struct \fBofbx::Header\fP"
.br
.ti -1c
.RI "struct \fBofbx::Cursor\fP"
.br
.ti -1c
.RI "struct \fBofbx::Property\fP"
.br
.ti -1c
.RI "struct \fBofbx::Element\fP"
.br
.ti -1c
.RI "struct \fBofbx::MeshImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::MaterialImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::LimbNodeImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::NullImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::NodeAttributeImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::GeometryImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::GeometryImpl::NewVertex\fP"
.br
.ti -1c
.RI "struct \fBofbx::ClusterImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::AnimationStackImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::AnimationCurveImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::SkinImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::TextureImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::Root\fP"
.br
.ti -1c
.RI "struct \fBofbx::Scene\fP"
.br
.ti -1c
.RI "struct \fBofbx::Scene::Connection\fP"
.br
.ti -1c
.RI "struct \fBofbx::Scene::ObjectPair\fP"
.br
.ti -1c
.RI "struct \fBofbx::AnimationCurveNodeImpl\fP"
.br
.ti -1c
.RI "struct \fBofbx::AnimationCurveNodeImpl::Curve\fP"
.br
.ti -1c
.RI "struct \fBofbx::AnimationLayerImpl\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBofbx\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBofbx::FrameRate\fP { \fBofbx::FrameRate_DEFAULT\fP = 0, \fBofbx::FrameRate_120\fP = 1, \fBofbx::FrameRate_100\fP = 2, \fBofbx::FrameRate_60\fP = 3, \fBofbx::FrameRate_50\fP = 4, \fBofbx::FrameRate_48\fP = 5, \fBofbx::FrameRate_30\fP = 6, \fBofbx::FrameRate_30_DROP\fP = 7, \fBofbx::FrameRate_NTSC_DROP_FRAME\fP = 8, \fBofbx::FrameRate_NTSC_FULL_FRAME\fP = 9, \fBofbx::FrameRate_PAL\fP = 10, \fBofbx::FrameRate_CINEMA\fP = 11, \fBofbx::FrameRate_1000\fP = 12, \fBofbx::FrameRate_CINEMA_ND\fP = 13, \fBofbx::FrameRate_CUSTOM\fP = 14 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBofbx::setTranslation\fP (const Vec3 &t, Matrix *mtx)"
.br
.ti -1c
.RI "static Vec3 \fBofbx::operator-\fP (const Vec3 &v)"
.br
.ti -1c
.RI "static Matrix \fBofbx::operator*\fP (const Matrix &lhs, const Matrix &rhs)"
.br
.ti -1c
.RI "static Matrix \fBofbx::makeIdentity\fP ()"
.br
.ti -1c
.RI "static Matrix \fBofbx::rotationX\fP (double angle)"
.br
.ti -1c
.RI "static Matrix \fBofbx::rotationY\fP (double angle)"
.br
.ti -1c
.RI "static Matrix \fBofbx::rotationZ\fP (double angle)"
.br
.ti -1c
.RI "static Matrix \fBofbx::getRotationMatrix\fP (const Vec3 &euler, RotationOrder order)"
.br
.ti -1c
.RI "static double \fBofbx::fbxTimeToSeconds\fP (i64 value)"
.br
.ti -1c
.RI "static i64 \fBofbx::secondsToFbxTime\fP (double value)"
.br
.ti -1c
.RI "static Vec3 \fBofbx::operator*\fP (const Vec3 &v, float f)"
.br
.ti -1c
.RI "static Vec3 \fBofbx::operator+\fP (const Vec3 &a, const Vec3 &b)"
.br
.ti -1c
.RI "template<int SIZE> static bool \fBofbx::copyString\fP (char(&destination)[SIZE], const char *source)"
.br
.ti -1c
.RI "template<typename T > static bool \fBofbx::parseArrayRaw\fP (const Property &property, T *out, int max_size)"
.br
.ti -1c
.RI "template<typename T > static bool \fBofbx::parseBinaryArray\fP (const Property &property, std::vector< T > *out)"
.br
.ti -1c
.RI "static const Element * \fBofbx::findChild\fP (const Element &element, const char *id)"
.br
.ti -1c
.RI "static IElement * \fBofbx::resolveProperty\fP (const Object &obj, const char *name)"
.br
.ti -1c
.RI "static int \fBofbx::resolveEnumProperty\fP (const Object &object, const char *name, int default_value)"
.br
.ti -1c
.RI "static Vec3 \fBofbx::resolveVec3Property\fP (const Object &object, const char *name, const Vec3 &default_value)"
.br
.ti -1c
.RI "static bool \fBofbx::decompress\fP (const u8 *in, size_t in_size, u8 *out, size_t out_size)"
.br
.ti -1c
.RI "template<typename T > static OptionalError< T > \fBofbx::read\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< DataView > \fBofbx::readShortString\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< DataView > \fBofbx::readLongString\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< Property * > \fBofbx::readProperty\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static void \fBofbx::deleteElement\fP (Element *el)"
.br
.ti -1c
.RI "static OptionalError< u64 > \fBofbx::readElementOffset\fP (Cursor *cursor, u16 version)"
.br
.ti -1c
.RI "static OptionalError< Element * > \fBofbx::readElement\fP (Cursor *cursor, u32 version)"
.br
.ti -1c
.RI "static bool \fBofbx::isEndLine\fP (const Cursor &cursor)"
.br
.ti -1c
.RI "static void \fBofbx::skipInsignificantWhitespaces\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static void \fBofbx::skipLine\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static void \fBofbx::skipWhitespaces\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static bool \fBofbx::isTextTokenChar\fP (char c)"
.br
.ti -1c
.RI "static DataView \fBofbx::readTextToken\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< Property * > \fBofbx::readTextProperty\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< Element * > \fBofbx::readTextElement\fP (Cursor *cursor)"
.br
.ti -1c
.RI "static OptionalError< Element * > \fBofbx::tokenizeText\fP (const u8 *data, size_t size)"
.br
.ti -1c
.RI "static OptionalError< Element * > \fBofbx::tokenize\fP (const u8 *data, size_t size)"
.br
.ti -1c
.RI "static void \fBofbx::parseTemplates\fP (const Element &root)"
.br
.ti -1c
.RI "struct OptionalError< Object * > \fBofbx::parseTexture\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "template<typename T > static OptionalError< Object * > \fBofbx::parse\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseCluster\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseNodeAttribute\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseLimbNode\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseMesh\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseMaterial\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "template<typename T > static bool \fBofbx::parseTextArrayRaw\fP (const Property &property, T *out, int max_size)"
.br
.ti -1c
.RI "template<typename T > const char * \fBofbx::fromString\fP (const char *str, const char *end, T *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< int >\fP (const char *str, const char *end, int *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< u64 >\fP (const char *str, const char *end, u64 *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< i64 >\fP (const char *str, const char *end, i64 *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< double >\fP (const char *str, const char *end, double *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< float >\fP (const char *str, const char *end, float *val)"
.br
.ti -1c
.RI "const char * \fBofbx::fromString\fP (const char *str, const char *end, double *val, int count)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< Vec2 >\fP (const char *str, const char *end, Vec2 *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< Vec3 >\fP (const char *str, const char *end, Vec3 *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< Vec4 >\fP (const char *str, const char *end, Vec4 *val)"
.br
.ti -1c
.RI "template<> const char * \fBofbx::fromString< Matrix >\fP (const char *str, const char *end, Matrix *val)"
.br
.ti -1c
.RI "template<typename T > static void \fBofbx::parseTextArray\fP (const Property &property, std::vector< T > *out)"
.br
.ti -1c
.RI "template<typename T > static bool \fBofbx::parseDoubleVecData\fP (Property &property, std::vector< T > *out_vec)"
.br
.ti -1c
.RI "template<typename T > static bool \fBofbx::parseVertexData\fP (const Element &element, const char *name, const char *index_name, std::vector< T > *out, std::vector< int > *out_indices, GeometryImpl::VertexDataMapping *mapping)"
.br
.ti -1c
.RI "template<typename T > static void \fBofbx::splat\fP (std::vector< T > *out, GeometryImpl::VertexDataMapping mapping, const std::vector< T > &data, const std::vector< int > &indices, const std::vector< int > &original_indices)"
.br
.ti -1c
.RI "template<typename T > static void \fBofbx::remap\fP (std::vector< T > *out, const std::vector< int > &map)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseAnimationCurve\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static int \fBofbx::getTriCountFromPoly\fP (const std::vector< int > &indices, int *idx)"
.br
.ti -1c
.RI "static void \fBofbx::add\fP (GeometryImpl::NewVertex &vtx, int index)"
.br
.ti -1c
.RI "static OptionalError< Object * > \fBofbx::parseGeometry\fP (const Scene &scene, const Element &element)"
.br
.ti -1c
.RI "static bool \fBofbx::isString\fP (const Property *prop)"
.br
.ti -1c
.RI "static bool \fBofbx::isLong\fP (const Property *prop)"
.br
.ti -1c
.RI "static bool \fBofbx::parseConnections\fP (const Element &root, Scene *scene)"
.br
.ti -1c
.RI "static bool \fBofbx::parseTakes\fP (Scene *scene)"
.br
.ti -1c
.RI "static float \fBofbx::getFramerateFromTimeMode\fP (int time_mode)"
.br
.ti -1c
.RI "static void \fBofbx::parseGlobalSettings\fP (const Element &root, Scene *scene)"
.br
.ti -1c
.RI "static bool \fBofbx::parseObjects\fP (const Element &root, Scene *scene)"
.br
.ti -1c
.RI "IScene * \fBofbx::load\fP (const u8 *data, int size)"
.br
.ti -1c
.RI "const char * \fBofbx::getError\fP ()"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for afd from the source code\&.
