<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9">
  <compounddef id="_mesh_8h" kind="file" language="C++">
    <compoundname>Mesh.h</compoundname>
    <includes local="no">GL/gl3w.h</includes>
    <includes local="no">glm.hpp</includes>
    <includes local="no">gtc/matrix_transform.hpp</includes>
    <includes local="no">gtx/string_cast.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes refid="ofbx_8h" local="yes">ofbx.h</includes>
    <includedby refid="ft__model_8h" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_model.h</includedby>
    <includedby refid="_mesh_8cpp" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.cpp</includedby>
    <incdepgraph>
      <node id="969">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.h</label>
        <link refid="Mesh.h"/>
        <childnode refid="970" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="974" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>ofbx.h</label>
        <link refid="ofbx_8h"/>
      </node>
      <node id="974">
        <label>string</label>
      </node>
      <node id="976">
        <label>fstream</label>
      </node>
      <node id="972">
        <label>gtc/matrix_transform.hpp</label>
      </node>
      <node id="975">
        <label>vector</label>
      </node>
      <node id="977">
        <label>sstream</label>
      </node>
      <node id="971">
        <label>glm.hpp</label>
      </node>
      <node id="978">
        <label>iostream</label>
      </node>
      <node id="973">
        <label>gtx/string_cast.hpp</label>
      </node>
      <node id="970">
        <label>GL/gl3w.h</label>
      </node>
      <node id="979">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="984">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.cpp</label>
        <link refid="_mesh_8cpp"/>
      </node>
      <node id="981">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.h</label>
        <link refid="Mesh.h"/>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
      </node>
      <node id="982">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_model.h</label>
        <link refid="ft__model_8h"/>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="983">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_model.cpp</label>
        <link refid="ft__model_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_vertex" prot="public">Vertex</innerclass>
    <innerclass refid="struct_vertex_combine_index" prot="public">VertexCombineIndex</innerclass>
    <innerclass refid="class_obj_loader" prot="public">ObjLoader</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_mesh_8h_1a8889cde72ab7af0a3a629ba7b1d81bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void transform_FBX_2_Object</definition>
        <argsstring>(ofbx::IScene &amp;scene, std::vector&lt; Vertex &gt; &amp;vertData)</argsstring>
        <name>transform_FBX_2_Object</name>
        <param>
          <type><ref refid="structofbx_1_1_i_scene" kindref="compound">ofbx::IScene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_vertex" kindref="compound">Vertex</ref> &gt; &amp;</type>
          <declname>vertData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.h" line="164" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.cpp" bodystart="3" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="_mesh_8h_1a8fd5544da0b3d3b428d5228e7b2acf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadFBXFile</definition>
        <argsstring>(const char *path, std::vector&lt; Vertex &gt; &amp;vertData)</argsstring>
        <name>loadFBXFile</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_vertex" kindref="compound">Vertex</ref> &gt; &amp;</type>
          <declname>vertData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.h" line="165" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.cpp" bodystart="113" bodyend="125"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_WAYLAND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GL/gl3w.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include&quot;../../deps/glad/glad.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtc/matrix_transform.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtx/string_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ofbx_8h" kindref="compound">ofbx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>表示一个顶点属性 struct<sp/>Vertex
{
<sp/><sp/>glm::vec3<sp/>position;
<sp/><sp/><sp/><sp/>glm::vec2<sp/>texCoords;
<sp/><sp/><sp/>glm::vec3<sp/>normal;
};

//<sp/>表示obj文件中一个顶点的位置、纹理坐标和法向量<sp/>索引
struct<sp/>VertexCombineIndex
{
<sp/>GLuint<sp/>posIndex;
<sp/><sp/><sp/>GLuint<sp/>textCoordIndex;
<sp/>GLuint<sp/>normIndex;
};

class<sp/>ObjLoader
{
public:
<sp/><sp/><sp/><sp/>static<sp/>bool<sp/>loadFromFile(const<sp/>char*<sp/>path,
<sp/><sp/><sp/><sp/><sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData)
<sp/>{

<sp/><sp/><sp/><sp/><sp/>std::vector&lt;VertexCombineIndex&gt;<sp/>vertComIndices;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>temp_vertices;
<sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec2&gt;<sp/>temp_textCoords;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>temp_normals;

<sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>file(path);
<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!file)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error::ObjLoader,<sp/>could<sp/>not<sp/>open<sp/>obj<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>&quot;<sp/>for<sp/>reading.&quot;<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;
<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(getline(file,<sp/>line))
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(line.substr(0,<sp/>2)<sp/>==<sp/>&quot;vt&quot;)<sp/>//<sp/>顶点纹理坐标数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec2<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.y;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>-v.y;<sp/><sp/>//<sp/>注意这里加载的dds纹理<sp/>要对y进行反转
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_textCoords.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>2)<sp/>==<sp/>&quot;vn&quot;)<sp/>//<sp/>顶点法向量数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_normals.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;v&quot;)<sp/>//<sp/>顶点位置数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;f&quot;)<sp/>//<sp/>面数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;face<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/>//<sp/>处理一行中多个顶点属性
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="struct_vertex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20" refid="struct_vertex_1a030819fdc241743bbd3e180a6b132ed3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/><ref refid="struct_vertex_1a030819fdc241743bbd3e180a6b132ed3" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="21" refid="struct_vertex_1a8d5babcf0ee1f315dae1207c375759a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec2<sp/><ref refid="struct_vertex_1a8d5babcf0ee1f315dae1207c375759a4" kindref="member">texCoords</ref>;</highlight></codeline>
<codeline lineno="22" refid="struct_vertex_1a3aa35fe84025ecf1acccb5f65f5577fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/><ref refid="struct_vertex_1a3aa35fe84025ecf1acccb5f65f5577fd" kindref="member">normal</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>表示obj文件中一个顶点的位置、纹理坐标和法向量<sp/>索引</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="struct_vertex_combine_index" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex_combine_index" kindref="compound">VertexCombineIndex</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28" refid="struct_vertex_combine_index_1a16f8b7efb15a2e5806425a5836f3fe45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><ref refid="struct_vertex_combine_index_1a16f8b7efb15a2e5806425a5836f3fe45" kindref="member">posIndex</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct_vertex_combine_index_1a404effc722cf3e9b9cb8cf063073aad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><ref refid="struct_vertex_combine_index_1a404effc722cf3e9b9cb8cf063073aad6" kindref="member">textCoordIndex</ref>;</highlight></codeline>
<codeline lineno="30" refid="struct_vertex_combine_index_1ab1b73ed6a39f1b2cb00d8513c19feb1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><ref refid="struct_vertex_combine_index_1ab1b73ed6a39f1b2cb00d8513c19feb1e" kindref="member">normIndex</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_obj_loader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_obj_loader" kindref="compound">ObjLoader</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="class_obj_loader_1a1b98e76fbf63d70836f297fb83201f16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_obj_loader_1a1b98e76fbf63d70836f297fb83201f16" kindref="member">loadFromFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VertexCombineIndex&gt;<sp/>vertComIndices;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>temp_vertices;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec2&gt;<sp/>temp_textCoords;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>temp_normals;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>file(path);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error::ObjLoader,<sp/>could<sp/>not<sp/>open<sp/>obj<sp/>file:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>reading.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(file,<sp/>line))</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.substr(0,<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;vt&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>顶点纹理坐标数据 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec2<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.y;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>-v.y;<sp/><sp/>//<sp/>注意这里加载的dds纹理<sp/>要对y进行反转
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_textCoords.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>2)<sp/>==<sp/>&quot;vn&quot;)<sp/>//<sp/>顶点法向量数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_normals.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;v&quot;)<sp/>//<sp/>顶点位置数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;f&quot;)<sp/>//<sp/>面数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;face<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/>//<sp/>处理一行中多个顶点属性
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;uv<sp/>find\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec2<sp/>v;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.y;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>-v.y;<sp/><sp/></highlight><highlight class="comment">//<sp/>注意这里加载的dds纹理<sp/>要对y进行反转</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_textCoords.push_back(v);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.substr(0,<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;vn&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>顶点法向量数据 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_normals.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;v&quot;)<sp/>//<sp/>顶点位置数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;f&quot;)<sp/>//<sp/>面数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;face<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/>//<sp/>处理一行中多个顶点属性
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;normal<sp/>find\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_normals.push_back(v);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.substr(0,<sp/>1)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>顶点位置数据 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.push_back(v);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line.substr(0,<sp/>1)<sp/>==<sp/>&quot;f&quot;)<sp/>//<sp/>面数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;face<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/>//<sp/>处理一行中多个顶点属性
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vertex<sp/>find\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>s(line.substr(2));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>v;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&gt;&gt;<sp/>v.x;<sp/>s<sp/>&gt;&gt;<sp/>v.y;<sp/>s<sp/>&gt;&gt;<sp/>v.z;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.push_back(v);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.substr(0,<sp/>1)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>面数据 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;face<sp/>find\n&quot;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/>//<sp/>处理一行中多个顶点属性
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;face<sp/>find\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>vtns(line.substr(2));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtn;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(vtns<sp/>&gt;&gt;<sp/>vtn)<sp/></highlight><highlight class="comment">//<sp/>处理一行中多个顶点属性 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexCombineIndex<sp/>vertComIndex;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/>&apos;/&apos;,<sp/>&apos;<sp/>&apos;);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vtn.find(&quot;<sp/><sp/>&quot;)<sp/>!=<sp/>std::string::npos)<sp/>//<sp/>没有纹理数据
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_combine_index" kindref="compound">VertexCombineIndex</ref><sp/>vertComIndex;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::replace(vtn.begin(),<sp/>vtn.end(),<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>ivtn(vtn);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vtn.find(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/></highlight><highlight class="comment">//<sp/>没有纹理数据 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.posIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.textCoordIndex
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.normIndex;

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.posIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.textCoordIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.normIndex--;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(line[0]<sp/>==<sp/>&apos;#&apos;)<sp/>//<sp/>注释忽略
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:ObjLoader,<sp/>no<sp/>texture<sp/>data<sp/>found<sp/>within<sp/>file:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>path<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivtn<sp/>&gt;&gt;<sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1a16f8b7efb15a2e5806425a5836f3fe45" kindref="member">posIndex</ref></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1a404effc722cf3e9b9cb8cf063073aad6" kindref="member">textCoordIndex</ref></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1ab1b73ed6a39f1b2cb00d8513c19feb1e" kindref="member">normIndex</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1a16f8b7efb15a2e5806425a5836f3fe45" kindref="member">posIndex</ref>--;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1a404effc722cf3e9b9cb8cf063073aad6" kindref="member">textCoordIndex</ref>--;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndex.<ref refid="struct_vertex_combine_index_1ab1b73ed6a39f1b2cb00d8513c19feb1e" kindref="member">normIndex</ref>--;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertComIndices.push_back(vertComIndex);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>注释忽略 <sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>其余内容<sp/>暂时不处理
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//<sp/><sp/>continue;
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>//{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];
<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;,<sp/>\
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());
<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);
<sp/><sp/><sp/><sp/><sp/>}
<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;uv:%f,<sp/>%f\n&quot;,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);
<sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)
<sp/><sp/><sp/><sp/><sp/>{
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex<sp/>vert;
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[i];
<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[i];

<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);
<sp/><sp/><sp/><sp/><sp/><sp/>}

<sp/><sp/><sp/><sp/><sp/>return<sp/>true;
<sp/><sp/><sp/>}
};
extern<sp/>void<sp/>transform_FBX_2_Object(ofbx::IScene&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
extern<sp/>void<sp/>loadFBXFile(const<sp/>char<sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);
</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>其余内容<sp/>暂时不处理</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(/*std::vector&lt;GLuint&gt;::size_type*/int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertComIndices.size();<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Vertex<sp/>vert;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>VertexCombineIndex<sp/>comIndex<sp/>=<sp/>vertComIndices[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(temp_vertices.size()<sp/>&lt;=<sp/>comIndex.posIndex<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.textCoordIndex<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size()<sp/>&lt;=<sp/>comIndex.normIndex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;size:%d,<sp/>index:%u&quot;,<sp/>temp_vertices.size(),<sp/>comIndex.textCoordIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vert.position<sp/>=<sp/>temp_vertices[comIndex.posIndex];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vert.texCoords<sp/>=<sp/>temp_textCoords[comIndex.textCoordIndex];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vert.normal<sp/>=<sp/>temp_normals[comIndex.normIndex];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;temp_vertices.size:%d,<sp/>temp_textCoords.size:%d,<sp/>temp_normals.size:%d,<sp/>vertComIndices.size:%d\n&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vertices.size(),<sp/>temp_textCoords.size(),<sp/>temp_normals.size(),<sp/>vertComIndices.size());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vertex:%f,<sp/>%f,<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>temp_vertices[i].x,<sp/>temp_vertices[i].y,<sp/>temp_vertices[i].z);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_textCoords.size();<sp/>++i)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;uv:%f,<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>temp_textCoords[i].x,<sp/>temp_textCoords[i].y);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_normals.size();<sp/>++i)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;normal:%f,<sp/>%f,<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>temp_normals[i].x,<sp/>temp_normals[i].y,<sp/>temp_normals[i].z);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp_vertices.size();<sp/>++i)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>vert;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.<ref refid="struct_vertex_1a030819fdc241743bbd3e180a6b132ed3" kindref="member">position</ref><sp/>=<sp/>temp_vertices[i];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.<ref refid="struct_vertex_1a8d5babcf0ee1f315dae1207c375759a4" kindref="member">texCoords</ref><sp/>=<sp/>temp_textCoords[i];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert.<ref refid="struct_vertex_1a3aa35fe84025ecf1acccb5f65f5577fd" kindref="member">normal</ref><sp/>=<sp/>temp_normals[i];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertData.push_back(vert);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_mesh_8h_1a8889cde72ab7af0a3a629ba7b1d81bd7" kindref="member">transform_FBX_2_Object</ref>(<ref refid="structofbx_1_1_i_scene" kindref="compound">ofbx::IScene</ref>&amp;<sp/>scene,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_mesh_8h_1a8fd5544da0b3d3b428d5228e7b2acf86" kindref="member">loadFBXFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/>std::vector&lt;Vertex&gt;&amp;<sp/>vertData);</highlight></codeline>
    </programlisting>
    <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/Mesh.h"/>
  </compounddef>
</doxygen>
