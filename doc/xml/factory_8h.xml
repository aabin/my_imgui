<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9">
  <compounddef id="factory_8h" kind="file" language="C++">
    <compoundname>factory.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes refid="control__common__def_8h" local="yes">control_common_def.h</includes>
    <includedby refid="afb__load_8cpp" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/afb_load.cpp</includedby>
    <includedby refid="ft__base_8h" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_base.h</includedby>
    <incdepgraph>
      <node id="224">
        <label>functional</label>
      </node>
      <node id="228">
        <label>imgui_internal.h</label>
      </node>
      <node id="223">
        <label>string</label>
      </node>
      <node id="222">
        <label>map</label>
      </node>
      <node id="230">
        <label>json.h</label>
      </node>
      <node id="229">
        <label>vector</label>
      </node>
      <node id="226">
        <label>control_common_def.h</label>
        <link refid="control__common__def_8h"/>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
      </node>
      <node id="221">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h</label>
        <link refid="factory.h"/>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
      </node>
      <node id="227">
        <label>imgui.h</label>
      </node>
      <node id="231">
        <label>algorithm</label>
      </node>
      <node id="225">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="252">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_polygon_image.h</label>
        <link refid="ft__polygon__image_8h"/>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_scene3d.cpp</label>
        <link refid="ft__scene3d_8cpp"/>
      </node>
      <node id="265">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/project_edit.cpp</label>
        <link refid="project__edit_8cpp"/>
      </node>
      <node id="250">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_plane.h</label>
        <link refid="ft__plane_8h"/>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="248">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_particles_gravity.h</label>
        <link refid="ft__particles__gravity_8h"/>
        <childnode refid="249" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_listbox.h</label>
        <link refid="ft__listbox_8h"/>
        <childnode refid="245" relation="include">
        </childnode>
      </node>
      <node id="261">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_textblock.cpp</label>
        <link refid="ft__textblock_8cpp"/>
      </node>
      <node id="251">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_plane.cpp</label>
        <link refid="ft__plane_8cpp"/>
      </node>
      <node id="254">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_scene3d.h</label>
        <link refid="ft__scene3d_8h"/>
        <childnode refid="255" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_sphere.cpp</label>
        <link refid="ft__sphere_8cpp"/>
      </node>
      <node id="260">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_textblock.h</label>
        <link refid="ft__textblock_8h"/>
        <childnode refid="261" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/afb_load.cpp</label>
        <link refid="afb__load_8cpp"/>
      </node>
      <node id="257">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_slider.cpp</label>
        <link refid="ft__slider_8cpp"/>
      </node>
      <node id="238">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_cube.h</label>
        <link refid="ft__cube_8h"/>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
      <node id="235">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_base.cpp</label>
        <link refid="ft__base_8cpp"/>
      </node>
      <node id="246">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_model.h</label>
        <link refid="ft__model_8h"/>
        <childnode refid="247" relation="include">
        </childnode>
      </node>
      <node id="262">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_trajectory_box.h</label>
        <link refid="ft__trajectory__box_8h"/>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
      <node id="240">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_image.h</label>
        <link refid="ft__image_8h"/>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="245">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_listbox.cpp</label>
        <link refid="ft__listbox_8cpp"/>
      </node>
      <node id="249">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_particles_gravity.cpp</label>
        <link refid="ft__particles__gravity_8cpp"/>
      </node>
      <node id="237">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_button.cpp</label>
        <link refid="ft__button_8cpp"/>
      </node>
      <node id="234">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_base.h</label>
        <link refid="ft__base_8h"/>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="241">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_image.cpp</label>
        <link refid="ft__image_8cpp"/>
      </node>
      <node id="247">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_model.cpp</label>
        <link refid="ft__model_8cpp"/>
      </node>
      <node id="243">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/main_app.cpp</label>
        <link refid="main__app_8cpp"/>
      </node>
      <node id="242">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="232">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h</label>
        <link refid="factory.h"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
      </node>
      <node id="253">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_polygon_image.cpp</label>
        <link refid="ft__polygon__image_8cpp"/>
      </node>
      <node id="263">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_trajectory_box.cpp</label>
        <link refid="ft__trajectory__box_8cpp"/>
      </node>
      <node id="258">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_sphere.h</label>
        <link refid="ft__sphere_8h"/>
        <childnode refid="259" relation="include">
        </childnode>
      </node>
      <node id="236">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_button.h</label>
        <link refid="ft__button_8h"/>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_slider.h</label>
        <link refid="ft__slider_8h"/>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="239">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ft_cube.cpp</label>
        <link refid="ft__cube_8cpp"/>
      </node>
      <node id="264">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/project_edit.h</label>
        <link refid="project__edit_8h"/>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfactory" prot="public">factory</innerclass>
    <innerclass refid="structfactory_1_1register__t" prot="public">factory::register_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="factory_8h_1a65c2b0caf79fa32506ef03931e1ac50d" prot="public" static="no">
        <name>REGISTER_CONTROL_VNAME</name>
        <param><defname>T</defname></param>
        <initializer>reg_control_##T##_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="72" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="factory_8h_1accb1802b2aa3d253c2585aa0f4ba473b" prot="public" static="no">
        <name>REGISTER_CONTROL_BYKEY</name>
        <param><defname>T</defname></param>
        <param><defname>key</defname></param>
        <param><defname>...</defname></param>
        <initializer>static <ref refid="structfactory_1_1register__t" kindref="compound">factory::register_t</ref>&lt;T&gt; <ref refid="factory_8h_1a65c2b0caf79fa32506ef03931e1ac50d" kindref="member">REGISTER_CONTROL_VNAME</ref>(T)(key, ##__VA_ARGS__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="73" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="control__common__def_8h" kindref="compound">control_common_def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="structfactory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfactory" kindref="compound">factory</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="10" refid="structfactory_1_1register__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfactory_1_1register__t" kindref="compound">register_t</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12" refid="structfactory_1_1register__t_1a9451974ee553766a83b49014ea10d0dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfactory_1_1register__t_1a9451974ee553766a83b49014ea10d0dd" kindref="member">register_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfactory_1ac6af064c46767497e3d079c0c0904c2a" kindref="member">factory::get</ref>().<ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.emplace(key,<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T();<sp/>});</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="18" refid="structfactory_1_1register__t_1a77680e3d6721133808b69616b71c141e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfactory_1_1register__t_1a77680e3d6721133808b69616b71c141e" kindref="member">register_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/>Args...<sp/>args)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfactory_1ac6af064c46767497e3d079c0c0904c2a" kindref="member">factory::get</ref>().<ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.emplace(key,<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(args...);<sp/>});</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structfactory_1ad4fc5cb957afccf416871694d991e809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref>*<sp/><ref refid="structfactory_1ad4fc5cb957afccf416871694d991e809" kindref="member">produce</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.find(key)<sp/>==<sp/><ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.end())</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;the<sp/>message<sp/>key<sp/>is<sp/>not<sp/>exist!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>[key]();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="32" refid="structfactory_1ae68a4c12268961ca539f05f887149a5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref>*<sp/><ref refid="structfactory_1ae68a4c12268961ca539f05f887149a5c" kindref="member">produce</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/>Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.find(key)<sp/>==<sp/><ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>.end())</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;the<sp/>message<sp/>key<sp/>is<sp/>not<sp/>exist!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>[key](std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39" refid="structfactory_1acadbebdb899c3fde153ac63d710eb47f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;base_ui_component&gt;<sp/><ref refid="structfactory_1acadbebdb899c3fde153ac63d710eb47f" kindref="member">produce_unique</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;base_ui_component&gt;(<ref refid="structfactory_1ad4fc5cb957afccf416871694d991e809" kindref="member">produce</ref>(key));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structfactory_1a39ffbb63bb89d83b88356d8833816fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;base_ui_component&gt;<sp/><ref refid="structfactory_1a39ffbb63bb89d83b88356d8833816fef" kindref="member">produce_shared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;base_ui_component&gt;(<ref refid="structfactory_1ad4fc5cb957afccf416871694d991e809" kindref="member">produce</ref>(key));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48" refid="structfactory_1a0cfc869b112782c55d40563c8aa1745c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfactory_1a0cfc869b112782c55d40563c8aa1745c" kindref="member">iterate_types</ref>(</highlight><highlight class="keyword">function</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight><highlight class="keyword">function</highlight><highlight class="normal">&lt;<ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref>*()&gt;)&gt;<sp/>imp)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it:<ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imp((it.first),it.second);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57" refid="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" kindref="member">factory</ref>()<sp/>{};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" kindref="member">factory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfactory" kindref="compound">factory</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" kindref="member">factory</ref>(<ref refid="structfactory" kindref="compound">factory</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structfactory_1aca9876ac406fd13afba86f7890caa849" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::function&lt;base_ui_component*()&gt;&gt;<sp/><ref refid="structfactory_1aca9876ac406fd13afba86f7890caa849" kindref="member">map_</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64" refid="structfactory_1ac6af064c46767497e3d079c0c0904c2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfactory" kindref="compound">factory</ref>&amp;<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfactory" kindref="compound">factory</ref><sp/>instance;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::function&lt;base_ui_component*()&gt;&gt;<sp/>factory::map_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="factory_8h_1a65c2b0caf79fa32506ef03931e1ac50d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_CONTROL_VNAME(T)<sp/>reg_control_##T##_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="factory_8h_1accb1802b2aa3d253c2585aa0f4ba473b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_CONTROL_BYKEY(T,<sp/>key,<sp/>...)<sp/>static<sp/>factory::register_t&lt;T&gt;<sp/>REGISTER_CONTROL_VNAME(T)(key,<sp/>##__VA_ARGS__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="afb__load_8cpp_1a464695366cb3e9683ab9cd7091409f68" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_CONTROL(T,...)<sp/><sp/>REGISTER_CONTROL_BYKEY(T,#T,##__VA_ARGS__)</highlight></codeline>
    </programlisting>
    <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h"/>
  </compounddef>
</doxygen>
