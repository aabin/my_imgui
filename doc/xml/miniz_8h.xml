<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9">
  <compounddef id="miniz_8h" kind="file" language="C++">
    <compoundname>miniz.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="miniz_8c" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c</includedby>
    <includedby refid="ofbx_8cpp" local="yes">G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp</includedby>
    <incdepgraph>
      <node id="1000">
        <label>assert.h</label>
      </node>
      <node id="1003">
        <label>stdint.h</label>
      </node>
      <node id="1001">
        <label>stdlib.h</label>
      </node>
      <node id="998">
        <label>stddef.h</label>
      </node>
      <node id="1002">
        <label>string.h</label>
      </node>
      <node id="999">
        <label>time.h</label>
      </node>
      <node id="1004">
        <label>stdio.h</label>
      </node>
      <node id="997">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h</label>
        <link refid="miniz.h"/>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
        <childnode refid="1003" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1007">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp</label>
        <link refid="ofbx_8cpp"/>
      </node>
      <node id="1006">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c</label>
        <link refid="miniz_8c"/>
      </node>
      <node id="1005">
        <label>G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h</label>
        <link refid="miniz.h"/>
        <childnode refid="1006" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmz__stream__s" prot="public">mz_stream_s</innerclass>
    <innerclass refid="structtdefl__compressor" prot="public">tdefl_compressor</innerclass>
    <innerclass refid="structtinfl__huff__table" prot="public">tinfl_huff_table</innerclass>
    <innerclass refid="structtinfl__decompressor__tag" prot="public">tinfl_decompressor_tag</innerclass>
    <innerclass refid="structmz__zip__archive__file__stat" prot="public">mz_zip_archive_file_stat</innerclass>
    <innerclass refid="structmz__zip__archive" prot="public">mz_zip_archive</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="miniz_8h_1aad490130f6d5ff67357e3ad3038858c8" prot="public" static="no">
        <name>MINIZ_LITTLE_ENDIAN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="166" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a4d8a6ee7365a49c7a25251e1dbebdd2b" prot="public" static="no">
        <name>MZ_ADLER32_INIT</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="191" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a4e28761db3f5f136f790563dd13a08d6" prot="public" static="no">
        <name>MZ_CRC32_INIT</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="195" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a3e92e9b3cc525db1fd503d9630ec1bf5" prot="public" static="no">
        <name>MZ_DEFLATED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="210" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a69229ba2b86a229226516575d1a458c8" prot="public" static="no">
        <name>MZ_VERSION</name>
        <initializer>&quot;10.0.0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="229" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ada760edfdc8e8f93c2b6ce340096cb9d" prot="public" static="no">
        <name>MZ_VERNUM</name>
        <initializer>0xA000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="230" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a60a85972478e0df3572242ff915f6613" prot="public" static="no">
        <name>MZ_VER_MAJOR</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="231" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aebc5ecb9bc366efc5de653c005a06fe1" prot="public" static="no">
        <name>MZ_VER_MINOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="232" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1af685fd946d23a6eea4705d5830bb10d4" prot="public" static="no">
        <name>MZ_VER_REVISION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="233" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ac78dfe8be78df919afad8d29c19264f8" prot="public" static="no">
        <name>MZ_VER_SUBREVISION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="234" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a6027b7b919794d9e1f1852f075d0cbb6" prot="public" static="no">
        <name>MZ_DEFAULT_WINDOW_BITS</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="265" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ad15afa2776b41b2f4d8582dd152bd736" prot="public" static="no">
        <name>Z_NULL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="396" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ac3b62e37b9922d9496014515acd6083a" prot="public" static="no">
        <name>Z_NO_FLUSH</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06cae54d4f5ccd64bd2e36d28d7e637894ab" kindref="member">MZ_NO_FLUSH</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="397" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1adbd49089a5611593f05ac80c9e12cc7f" prot="public" static="no">
        <name>Z_PARTIAL_FLUSH</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06caa074139e59dc5aba5f6461ab5cfaee8f" kindref="member">MZ_PARTIAL_FLUSH</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="398" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aa32ca175522e0ef314f4dc0b0196bada" prot="public" static="no">
        <name>Z_SYNC_FLUSH</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca1a77ad21e37d528c658b024642f347bb" kindref="member">MZ_SYNC_FLUSH</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="399" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aed4fbb038c3973aacf52fccffbc44b53" prot="public" static="no">
        <name>Z_FULL_FLUSH</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca56a3093215e393a178218f7bb04bd079" kindref="member">MZ_FULL_FLUSH</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="400" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a876a626ba14eb12eea4bbf6823b6ca50" prot="public" static="no">
        <name>Z_FINISH</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca8c1ad84176153047845d17c151097124" kindref="member">MZ_FINISH</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="401" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a73e5f4c24156c63ba863014396685062" prot="public" static="no">
        <name>Z_BLOCK</name>
        <initializer><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca2916cea538a7b77a7638857b40bf31af" kindref="member">MZ_BLOCK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="402" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a8cb802b6a11e926478dc6547c514c65c" prot="public" static="no">
        <name>Z_OK</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac889ce55af78ff1376747e2e52b8e7e3" kindref="member">MZ_OK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="403" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a7d94a4a852228a899864a0053162e7a8" prot="public" static="no">
        <name>Z_STREAM_END</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea9e82839e613eba20eb822b780eb4c312" kindref="member">MZ_STREAM_END</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="404" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a32916ba675b2d06463da2576b6a49d64" prot="public" static="no">
        <name>Z_NEED_DICT</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8cabf17fbb841935d0bfb626ce61814d" kindref="member">MZ_NEED_DICT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="405" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a3c66d64c427c0337c64e578537478737" prot="public" static="no">
        <name>Z_ERRNO</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac7325ec0656a65e1b12861c5b97be96b" kindref="member">MZ_ERRNO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="406" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" prot="public" static="no">
        <name>Z_STREAM_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae1066da08adca98d4715701158591c50" kindref="member">MZ_STREAM_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="407" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a9eda83d428a71752d148f38b5dbe04f2" prot="public" static="no">
        <name>Z_DATA_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae4f65fd7767379614da35ab5c43ad77d" kindref="member">MZ_DATA_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="408" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ae2be6be871e377c6e2c25a7296ce320c" prot="public" static="no">
        <name>Z_MEM_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea00c3c60b8c4dd75a5f19ed84aebc519b" kindref="member">MZ_MEM_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="409" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a425e2f0664e1b1f75bf2bffab88d353d" prot="public" static="no">
        <name>Z_BUF_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eada9fc0699137425d9e993b3a91eb2b52" kindref="member">MZ_BUF_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="410" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a7634cdd55f955ee1be99c065c6977371" prot="public" static="no">
        <name>Z_VERSION_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8f0080210beb22cd8cc6e4fca5e5f2f4" kindref="member">MZ_VERSION_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="411" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a4a5a2c1bb51d2236fce3395fe1cd43f8" prot="public" static="no">
        <name>Z_PARAM_ERROR</name>
        <initializer><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea6bc32d182dcf344e4921fcb604abc35e" kindref="member">MZ_PARAM_ERROR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="412" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a496a4523776bcfa14568cd083b59f24c" prot="public" static="no">
        <name>Z_NO_COMPRESSION</name>
        <initializer><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a4f66327d56ffc5b2c79fce1daf25ded5" kindref="member">MZ_NO_COMPRESSION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="413" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ad5222ae19b77c6e83815d07ca5d03fd8" prot="public" static="no">
        <name>Z_BEST_SPEED</name>
        <initializer><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a3ef4372349b755bf55e8f9e367d46dd3" kindref="member">MZ_BEST_SPEED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="414" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a8db83edd9dea51f8cf0afd1727838b95" prot="public" static="no">
        <name>Z_BEST_COMPRESSION</name>
        <initializer><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ac8ff4999153f2b5565650037b268cdff" kindref="member">MZ_BEST_COMPRESSION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="415" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1af5387baee05124298e431ebe6fe96b17" prot="public" static="no">
        <name>Z_DEFAULT_COMPRESSION</name>
        <initializer><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04aceaa50dfb8809ffd1631b0fe01344279" kindref="member">MZ_DEFAULT_COMPRESSION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="416" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a580d7c2527e653ddd783109271750849" prot="public" static="no">
        <name>Z_DEFAULT_STRATEGY</name>
        <initializer><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a96891a5aa5d03f61da7f4a9c5b94f1d5" kindref="member">MZ_DEFAULT_STRATEGY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="417" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1af01ccb5a9db8d415cde987d9553ad200" prot="public" static="no">
        <name>Z_FILTERED</name>
        <initializer><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a0419e718926687394bbc0d18d12068f6" kindref="member">MZ_FILTERED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="418" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a1eec3d3720ba91fd54fa08d2757c1785" prot="public" static="no">
        <name>Z_HUFFMAN_ONLY</name>
        <initializer><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5abb43b8c09f8d8dddd644893a8a6a3ae8" kindref="member">MZ_HUFFMAN_ONLY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="419" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1af52c1220e7193d2da78332d75f9251ea" prot="public" static="no">
        <name>Z_RLE</name>
        <initializer><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5ab22de2edae7b989e35120a84e1ffff3e" kindref="member">MZ_RLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="420" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" prot="public" static="no">
        <name>Z_FIXED</name>
        <initializer><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a3fe6f0f5a44a41155ec4022b6c85b5a9" kindref="member">MZ_FIXED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="421" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a27a96226f3dc88e4743131c632adf32f" prot="public" static="no">
        <name>Z_DEFLATED</name>
        <initializer><ref refid="miniz_8h_1a3e92e9b3cc525db1fd503d9630ec1bf5" kindref="member">MZ_DEFLATED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="422" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a3ffc2b8c8034c6e80474b0ad988a4ab6" prot="public" static="no">
        <name>Z_DEFAULT_WINDOW_BITS</name>
        <initializer><ref refid="miniz_8h_1a6027b7b919794d9e1f1852f075d0cbb6" kindref="member">MZ_DEFAULT_WINDOW_BITS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="423" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a4719a257e0920f8212b267186ea81083" prot="public" static="no">
        <name>alloc_func</name>
        <initializer><ref refid="miniz_8h_1a8145a3e9c9fac12ec4089a6e39ba9f4f" kindref="member">mz_alloc_func</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="424" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ac18e786dc1c81785889a0f4edc113102" prot="public" static="no">
        <name>free_func</name>
        <initializer><ref refid="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" kindref="member">mz_free_func</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="425" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1adda78bd650173d3f122d5e08162f74c4" prot="public" static="no">
        <name>internal_state</name>
        <initializer>mz_internal_state</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="426" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1af3b07be31f8bce4acb46a295346a4524" prot="public" static="no">
        <name>z_stream</name>
        <initializer><ref refid="miniz_8h_1a978e823669e60e8d4d8d89d9b58f1c87" kindref="member">mz_stream</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="427" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a5e9d5f0b1abf4368ac4d55b0909dcd99" prot="public" static="no">
        <name>deflateInit</name>
        <initializer><ref refid="miniz_8h_1a69f53f93ea50410b674721408b2aff24" kindref="member">mz_deflateInit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="428" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a5fdefdacf3bc7c8484df6e8b7bd5b2bc" prot="public" static="no">
        <name>deflateInit2</name>
        <initializer><ref refid="miniz_8h_1a66d75d30383d1b7af379b7d19db3aba0" kindref="member">mz_deflateInit2</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="429" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1acd6a182af06163cb069f9e3a61dbac73" prot="public" static="no">
        <name>deflateReset</name>
        <initializer><ref refid="miniz_8h_1a2632b66b8e67b1482f24dff4d4b65e8c" kindref="member">mz_deflateReset</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="430" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a04be214323e3ae74865fa6f7006a16fd" prot="public" static="no">
        <name>deflate</name>
        <initializer><ref refid="miniz_8h_1ab843b570ebaeb31d801a5414260edeaf" kindref="member">mz_deflate</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="431" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a0a4adb4287e6b8f1f239821ee15834b5" prot="public" static="no">
        <name>deflateEnd</name>
        <initializer><ref refid="miniz_8h_1a36e2a62c4a31c1b7f8b51da8cffd7281" kindref="member">mz_deflateEnd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="432" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a56f41bdffa865e02ed160ebdc54b5d87" prot="public" static="no">
        <name>deflateBound</name>
        <initializer><ref refid="miniz_8h_1acd123a509ce06edd3a97506622873102" kindref="member">mz_deflateBound</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="433" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1adc956d381ef47f4245a043ba7a4e0107" prot="public" static="no">
        <name>compress</name>
        <initializer><ref refid="miniz_8h_1a2e39a706e4a41c7168983f7e7c2e1a1d" kindref="member">mz_compress</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="434" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a37a617bb10b3bdd88c9ee229b3cf28e2" prot="public" static="no">
        <name>compress2</name>
        <initializer><ref refid="miniz_8h_1a7a7b50a0d965d229ce14f3afa5981edd" kindref="member">mz_compress2</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="435" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a503669573c2a17068ffb1c9a3ca38117" prot="public" static="no">
        <name>compressBound</name>
        <initializer><ref refid="miniz_8h_1a3046aad784a296b0064530b4b98f5adb" kindref="member">mz_compressBound</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="436" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ad7c0eacb7c7a1117253bd7c76750cc7b" prot="public" static="no">
        <name>inflateInit</name>
        <initializer><ref refid="miniz_8h_1a2cd16abe6e673d9f98d98ae81c2d7c52" kindref="member">mz_inflateInit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="437" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aa368ece0cf5d53986442b48accb13c7a" prot="public" static="no">
        <name>inflateInit2</name>
        <initializer><ref refid="miniz_8h_1a95babde50d211fa1d2401e70516d2e93" kindref="member">mz_inflateInit2</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="438" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a7f8d65a874016c75d360b788db194cf5" prot="public" static="no">
        <name>inflate</name>
        <initializer><ref refid="miniz_8h_1a2d5d109e8f992526202122134e092aa1" kindref="member">mz_inflate</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="439" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a07976576ebc3fdcbbcc990ad528fc100" prot="public" static="no">
        <name>inflateEnd</name>
        <initializer><ref refid="miniz_8h_1ab3074e360c49f66ccd955e6630d23108" kindref="member">mz_inflateEnd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="440" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a0a7eedf0dba136b3a92685a8f625b8e7" prot="public" static="no">
        <name>uncompress</name>
        <initializer><ref refid="miniz_8h_1aa0ce62915456b6c5f0bcf1ed09e94599" kindref="member">mz_uncompress</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="441" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aa020ce787714a140599b55725bf7c657" prot="public" static="no">
        <name>crc32</name>
        <initializer><ref refid="miniz_8h_1acd660cec3b02f8ba7416d04934a41e6f" kindref="member">mz_crc32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="442" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a88899508e9a73aad5db1854cd1cc87d7" prot="public" static="no">
        <name>adler32</name>
        <initializer><ref refid="miniz_8h_1a094d181afc4c98dc1864f6ce7d636258" kindref="member">mz_adler32</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="443" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1abd2f406ac1f9c49236376115d78ccb5b" prot="public" static="no">
        <name>MAX_WBITS</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="444" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a8e9fefb3d20386851ca693946127ab2e" prot="public" static="no">
        <name>MAX_MEM_LEVEL</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="445" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a55b209baca089467ba378166bb37aac0" prot="public" static="no">
        <name>zError</name>
        <initializer><ref refid="miniz_8h_1ac315062b2450716e20d21843f2022660" kindref="member">mz_error</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="446" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" prot="public" static="no">
        <name>ZLIB_VERSION</name>
        <initializer><ref refid="miniz_8h_1a69229ba2b86a229226516575d1a458c8" kindref="member">MZ_VERSION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="447" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a6413cdfb4cdc0b5a09cf9b5f3f8f48ef" prot="public" static="no">
        <name>ZLIB_VERNUM</name>
        <initializer><ref refid="miniz_8h_1ada760edfdc8e8f93c2b6ce340096cb9d" kindref="member">MZ_VERNUM</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="448" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a52eec052f38e306d472e75bfafda9608" prot="public" static="no">
        <name>ZLIB_VER_MAJOR</name>
        <initializer><ref refid="miniz_8h_1a60a85972478e0df3572242ff915f6613" kindref="member">MZ_VER_MAJOR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="449" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a82109105b5511ffa8f8373b6a917e1e4" prot="public" static="no">
        <name>ZLIB_VER_MINOR</name>
        <initializer><ref refid="miniz_8h_1aebc5ecb9bc366efc5de653c005a06fe1" kindref="member">MZ_VER_MINOR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="450" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ad3662b8749a50045ec1c120354fb7e9d" prot="public" static="no">
        <name>ZLIB_VER_REVISION</name>
        <initializer><ref refid="miniz_8h_1af685fd946d23a6eea4705d5830bb10d4" kindref="member">MZ_VER_REVISION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="451" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a788ea49a5b65e12b11d7f274542d5af5" prot="public" static="no">
        <name>ZLIB_VER_SUBREVISION</name>
        <initializer><ref refid="miniz_8h_1ac78dfe8be78df919afad8d29c19264f8" kindref="member">MZ_VER_SUBREVISION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="452" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a47cb947a9520625a49ec8a0eaa8ecf7a" prot="public" static="no">
        <name>zlibVersion</name>
        <initializer><ref refid="miniz_8h_1a3d5d232e407e113f68859c17212526cb" kindref="member">mz_version</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="453" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a1f228220c3e6935eb171761c61487059" prot="public" static="no">
        <name>zlib_version</name>
        <initializer><ref refid="miniz_8h_1a3d5d232e407e113f68859c17212526cb" kindref="member">mz_version</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="454" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a2b9e8f947197031a80d85b60d4e59449" prot="public" static="no">
        <name>MZ_FALSE</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="478" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aef00c8f99445949d239115e8f74618a6" prot="public" static="no">
        <name>MZ_TRUE</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="479" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a704d9384ffb047ede84426d173b656e8" prot="public" static="no">
        <name>MZ_MACRO_END</name>
        <initializer>while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="485" column="10" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" prot="public" static="no">
        <name>MZ_FILE</name>
        <initializer>FILE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="492" column="11" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a893addc64c536a05131458f6f15132eb" prot="public" static="no">
        <name>MZ_TIME_T</name>
        <initializer>time_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="502" column="10" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a31afa8051f3faec21437339076a389e3" prot="public" static="no">
        <name>MZ_ASSERT</name>
        <param><defname>x</defname></param>
        <initializer>assert(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="505" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a09b9e87cb19529df25b3c3e47c9ad393" prot="public" static="no">
        <name>MZ_MALLOC</name>
        <param><defname>x</defname></param>
        <initializer>malloc(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="512" column="10" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ac73e9b464ae92e51b762f496296d7582" prot="public" static="no">
        <name>MZ_FREE</name>
        <param><defname>x</defname></param>
        <initializer>free(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="513" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a1420c15d77b938f459fa3e8bbd9f4c4d" prot="public" static="no">
        <name>MZ_REALLOC</name>
        <param><defname>p</defname></param>
        <param><defname>x</defname></param>
        <initializer>realloc(p, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="514" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aed350adb9c98cc277b69a348a7478cdb" prot="public" static="no">
        <name>MZ_MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &gt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="517" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1abd12503e988aa99a5d82179c54b1acc8" prot="public" static="no">
        <name>MZ_MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &lt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="518" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a3da1eeeef02435f2d09129914aa2928b" prot="public" static="no">
        <name>MZ_CLEAR_OBJ</name>
        <param><defname>obj</defname></param>
        <initializer>memset(&amp;(obj), 0, sizeof(obj))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="519" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a12c43540bc29b7b9a89f02c4d2ce99d9" prot="public" static="no">
        <name>MZ_READ_LE16</name>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>)(((const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *)(p))[0]) | ((<ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>)(((const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *)(p))[1]) &lt;&lt; 8U))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="525" column="10" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ad46ee9d5a50dd10df9c3829a93773fb6" prot="public" static="no">
        <name>MZ_READ_LE32</name>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>)(((const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *)(p))[0]) | ((<ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>)(((const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *)(p))[1]) &lt;&lt; 8U) | ((mz_uint32)(((const mz_uint8 *)(p))[2]) &lt;&lt; 16U) | ((mz_uint32)(((const mz_uint8 *)(p))[3]) &lt;&lt; 24U))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="526" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1ae29c34529021741ba9d9032248a7a625" prot="public" static="no">
        <name>MZ_READ_LE64</name>
        <param><defname>p</defname></param>
        <initializer>(((<ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref>)<ref refid="miniz_8h_1ad46ee9d5a50dd10df9c3829a93773fb6" kindref="member">MZ_READ_LE32</ref>(p)) | (((<ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref>)<ref refid="miniz_8h_1ad46ee9d5a50dd10df9c3829a93773fb6" kindref="member">MZ_READ_LE32</ref>((const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *)(p) + sizeof(<ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>))) &lt;&lt; 32U))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="529" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a2c231672fab55aa544b2a34cc9d92fe1" prot="public" static="no">
        <name>MZ_FORCEINLINE</name>
        <initializer>inline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="536" column="10" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a512356d187ddd5c72e3123703d60b6cf" prot="public" static="no">
        <name>MZ_UINT16_MAX</name>
        <initializer>(0xFFFFU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="547" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1aff7bdd0a0a11c987a5f23ab7e97363cc" prot="public" static="no">
        <name>MZ_UINT32_MAX</name>
        <initializer>(0xFFFFFFFFU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="548" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1afadef5daa88dfd06e907a3f8367d58fa" prot="public" static="no">
        <name>TDEFL_LESS_MEMORY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="562" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1abc05bb1717f26edc88a010e903de04e8" prot="public" static="no">
        <name>TINFL_DECOMPRESS_MEM_TO_MEM_FAILED</name>
        <initializer>((size_t)(-1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="775" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a39dc152de3351183ff8af716f0c556cb" prot="public" static="no">
        <name>TINFL_LZ_DICT_SIZE</name>
        <initializer>32768</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="794" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a38425ff8609fe5fe5a9a48612e6f3e46" prot="public" static="no">
        <name>tinfl_init</name>
        <param><defname>r</defname></param>
        <initializer>do                    \
    {                     \
        (r)-&gt;m_state = 0; \
    }                     \
    <ref refid="miniz_8h_1a704d9384ffb047ede84426d173b656e8" kindref="member">MZ_MACRO_END</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="832" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a5542a5383b30c24dc30bc2af3857a291" prot="public" static="no">
        <name>tinfl_get_adler32</name>
        <param><defname>r</defname></param>
        <initializer>(r)-&gt;m_check_adler32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="838" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="miniz_8h_1a8749219bfc4c8fe35661f5c22ede4bc8" prot="public" static="no">
        <name>TINFL_BITBUF_SIZE</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="870" column="9" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5" prot="public" static="no">
        <name>@2</name>
        <enumvalue id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a96891a5aa5d03f61da7f4a9c5b94f1d5" prot="public">
          <name>MZ_DEFAULT_STRATEGY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a0419e718926687394bbc0d18d12068f6" prot="public">
          <name>MZ_FILTERED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5abb43b8c09f8d8dddd644893a8a6a3ae8" prot="public">
          <name>MZ_HUFFMAN_ONLY</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5ab22de2edae7b989e35120a84e1ffff3e" prot="public">
          <name>MZ_RLE</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a3fe6f0f5a44a41155ec4022b6c85b5a9" prot="public">
          <name>MZ_FIXED</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="201" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="200" bodyend="207"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04" prot="public" static="no">
        <name>@3</name>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a4f66327d56ffc5b2c79fce1daf25ded5" prot="public">
          <name>MZ_NO_COMPRESSION</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a3ef4372349b755bf55e8f9e367d46dd3" prot="public">
          <name>MZ_BEST_SPEED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ac8ff4999153f2b5565650037b268cdff" prot="public">
          <name>MZ_BEST_COMPRESSION</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a54ec4bb3bd4e6ae21180b27a73c46147" prot="public">
          <name>MZ_UBER_COMPRESSION</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ab5dc326a9f034dc71d6012d86dd1343f" prot="public">
          <name>MZ_DEFAULT_LEVEL</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04aceaa50dfb8809ffd1631b0fe01344279" prot="public">
          <name>MZ_DEFAULT_COMPRESSION</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="220" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="219" bodyend="227"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06c" prot="public" static="no">
        <name>@4</name>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06cae54d4f5ccd64bd2e36d28d7e637894ab" prot="public">
          <name>MZ_NO_FLUSH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06caa074139e59dc5aba5f6461ab5cfaee8f" prot="public">
          <name>MZ_PARTIAL_FLUSH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca1a77ad21e37d528c658b024642f347bb" prot="public">
          <name>MZ_SYNC_FLUSH</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca56a3093215e393a178218f7bb04bd079" prot="public">
          <name>MZ_FULL_FLUSH</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca8c1ad84176153047845d17c151097124" prot="public">
          <name>MZ_FINISH</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca2916cea538a7b77a7638857b40bf31af" prot="public">
          <name>MZ_BLOCK</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="240" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="239" bodyend="247"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a61dadd085c1777f559549e05962b2c9e" prot="public" static="no">
        <name>@5</name>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac889ce55af78ff1376747e2e52b8e7e3" prot="public">
          <name>MZ_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea9e82839e613eba20eb822b780eb4c312" prot="public">
          <name>MZ_STREAM_END</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8cabf17fbb841935d0bfb626ce61814d" prot="public">
          <name>MZ_NEED_DICT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac7325ec0656a65e1b12861c5b97be96b" prot="public">
          <name>MZ_ERRNO</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae1066da08adca98d4715701158591c50" prot="public">
          <name>MZ_STREAM_ERROR</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae4f65fd7767379614da35ab5c43ad77d" prot="public">
          <name>MZ_DATA_ERROR</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea00c3c60b8c4dd75a5f19ed84aebc519b" prot="public">
          <name>MZ_MEM_ERROR</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9eada9fc0699137425d9e993b3a91eb2b52" prot="public">
          <name>MZ_BUF_ERROR</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8f0080210beb22cd8cc6e4fca5e5f2f4" prot="public">
          <name>MZ_VERSION_ERROR</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea6bc32d182dcf344e4921fcb604abc35e" prot="public">
          <name>MZ_PARAM_ERROR</name>
          <initializer>= -10000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="251" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="250" bodyend="262"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635" prot="public" static="no">
        <name>@6</name>
        <enumvalue id="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a4a700b2861ad269845ed72e4dca2f7e4" prot="public">
          <name>TDEFL_HUFFMAN_ONLY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a26ea7a0132eec06d31c1820d123a8d91" prot="public">
          <name>TDEFL_DEFAULT_MAX_PROBES</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a60323cd4b3acc7a3711c143f7923dd34" prot="public">
          <name>TDEFL_MAX_PROBES_MASK</name>
          <initializer>= 0xFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="567" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="566" bodyend="571"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2d" prot="public" static="no">
        <name>@7</name>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daddb3970da5e697152049482043174c63" prot="public">
          <name>TDEFL_WRITE_ZLIB_HEADER</name>
          <initializer>= 0x01000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daa3c1a489229a817dc6d07efd55a6f5cf" prot="public">
          <name>TDEFL_COMPUTE_ADLER32</name>
          <initializer>= 0x02000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da6863400f7412d04ec75a2ca363baec03" prot="public">
          <name>TDEFL_GREEDY_PARSING_FLAG</name>
          <initializer>= 0x04000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daf52d1f4a633ac1d4c4537bd9d63346b9" prot="public">
          <name>TDEFL_NONDETERMINISTIC_PARSING_FLAG</name>
          <initializer>= 0x08000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dafc9a53ebb5a5fdb1d1727eef9b21a524" prot="public">
          <name>TDEFL_RLE_MATCHES</name>
          <initializer>= 0x10000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dabea695964526498a4a869b3172e39707" prot="public">
          <name>TDEFL_FILTER_MATCHES</name>
          <initializer>= 0x20000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da8fd3e432af0453833eb7168b8f63a064" prot="public">
          <name>TDEFL_FORCE_ALL_STATIC_BLOCKS</name>
          <initializer>= 0x40000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da24f00beb8f787cbdf73b33a535be747b" prot="public">
          <name>TDEFL_FORCE_ALL_RAW_BLOCKS</name>
          <initializer>= 0x80000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="583" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="582" bodyend="592"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1abed82baf7f470b522273a3e37c24c600" prot="public" static="no">
        <name>@8</name>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" prot="public">
          <name>TDEFL_MAX_HUFF_TABLES</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a30643ecd31dedddcdb265685027c3730" prot="public">
          <name>TDEFL_MAX_HUFF_SYMBOLS_0</name>
          <initializer>= 288</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600ab31107f9bbadea4b9a371a4c52885471" prot="public">
          <name>TDEFL_MAX_HUFF_SYMBOLS_1</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600ae84d30193f96d7234e473ee98ee25087" prot="public">
          <name>TDEFL_MAX_HUFF_SYMBOLS_2</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" prot="public">
          <name>TDEFL_LZ_DICT_SIZE</name>
          <initializer>= 32768</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a60ad8ff42b02877e23881e2475f641d7" prot="public">
          <name>TDEFL_LZ_DICT_SIZE_MASK</name>
          <initializer>= TDEFL_LZ_DICT_SIZE - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a9697a9d6cfbbf8d8cb2c3367aec5ba9a" prot="public">
          <name>TDEFL_MIN_MATCH_LEN</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abed82baf7f470b522273a3e37c24c600a0d179990872afd64535490e85825edca" prot="public">
          <name>TDEFL_MAX_MATCH_LEN</name>
          <initializer>= 258</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="629" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="628" bodyend="638"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57" prot="public" static="no">
        <name>@9</name>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" prot="public">
          <name>TDEFL_LZ_CODE_BUF_SIZE</name>
          <initializer>= 64 * 1024</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ad79ca716ebec4ef5fa4752f32acc9418" prot="public">
          <name>TDEFL_OUT_BUF_SIZE</name>
          <initializer>= (TDEFL_LZ_CODE_BUF_SIZE * 13) / 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" prot="public">
          <name>TDEFL_MAX_HUFF_SYMBOLS</name>
          <initializer>= 288</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" prot="public">
          <name>TDEFL_LZ_HASH_BITS</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a202a52e3c2065cea2c36a18630e1f863" prot="public">
          <name>TDEFL_LEVEL1_HASH_SIZE_MASK</name>
          <initializer>= 4095</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ab7e1aa0f0ee51ac5ed2976f7af52d138" prot="public">
          <name>TDEFL_LZ_HASH_SHIFT</name>
          <initializer>= (TDEFL_LZ_HASH_BITS + 2) / 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2dc98b78800f2aa4dffe5438b01bd4c0" prot="public">
          <name>TDEFL_LZ_HASH_SIZE</name>
          <initializer>= 1 &lt;&lt; TDEFL_LZ_HASH_BITS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="654" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="653" bodyend="662"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" prot="public" static="no">
        <name>tdefl_status</name>
        <enumvalue id="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fabfe89ba8aaf460134dbf95c5969f82f8" prot="public">
          <name>TDEFL_STATUS_BAD_PARAM</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fad33a46f2b32817746e26144ecb16687f" prot="public">
          <name>TDEFL_STATUS_PUT_BUF_FAILED</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa0db9f12eded9feed194fd0b20fec8b27" prot="public">
          <name>TDEFL_STATUS_OKAY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa9beb7850b5d6941b6860db23f426b0d2" prot="public">
          <name>TDEFL_STATUS_DONE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="667" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="666" bodyend="672"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" prot="public" static="no">
        <name>tdefl_flush</name>
        <enumvalue id="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87a9bde52f27872bf5821ed345bc6768" prot="public">
          <name>TDEFL_NO_FLUSH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87252ae761afc143db0fb20c5daca847" prot="public">
          <name>TDEFL_SYNC_FLUSH</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfac38ba366db95f4ad31c7719bd08ae7f8" prot="public">
          <name>TDEFL_FULL_FLUSH</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfaea9e4d7ec26223f627ff02c5335b7e66" prot="public">
          <name>TDEFL_FINISH</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="676" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="675" bodyend="681"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a385c44f6fb256e5716a2302a5b940388" prot="public" static="no">
        <name>@10</name>
        <enumvalue id="miniz_8h_1a385c44f6fb256e5716a2302a5b940388af085740084ef23d974d043aeda6f2245" prot="public">
          <name>TINFL_FLAG_PARSE_ZLIB_HEADER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a2eb96c68c6a8df342d8f12d7efcf96c1" prot="public">
          <name>TINFL_FLAG_HAS_MORE_INPUT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a086ec4df460b3a0c5085e22fd679b7d9" prot="public">
          <name>TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a9454c17ebc5717f8553d01ab99b8c1c9" prot="public">
          <name>TINFL_FLAG_COMPUTE_ADLER32</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="756" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="755" bodyend="761"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4" prot="public" static="no">
        <name>tinfl_status</name>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a7661742c9463ceaa3872ffca2fb15998" prot="public">
          <name>TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a61c8d6dd2c312ee7a474ac6782e4bed9" prot="public">
          <name>TINFL_STATUS_BAD_PARAM</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3c0ca7cb0911c046d25e1ab3e525a3af" prot="public">
          <name>TINFL_STATUS_ADLER32_MISMATCH</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3d9ecb5e7298395555ec061cda50644c" prot="public">
          <name>TINFL_STATUS_FAILED</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4af9316c69027621352f435c9a343f1042" prot="public">
          <name>TINFL_STATUS_DONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a4150e95aacd9bf414c6f9155263b60e8" prot="public">
          <name>TINFL_STATUS_NEEDS_MORE_INPUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a49583f3a8fa8eb17838e17f21c08be05" prot="public">
          <name>TINFL_STATUS_HAS_MORE_OUTPUT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="798" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="797" bodyend="829"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035d" prot="public" static="no">
        <name>@11</name>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dad908ef7390a1643b0f0dece0d816bd64" prot="public">
          <name>TINFL_MAX_HUFF_TABLES</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" prot="public">
          <name>TINFL_MAX_HUFF_SYMBOLS_0</name>
          <initializer>= 288</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dac44807ea07817afa2b5e97b5bfc204fb" prot="public">
          <name>TINFL_MAX_HUFF_SYMBOLS_1</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da534af4e11dc848dc29c16f276a6a428e" prot="public">
          <name>TINFL_MAX_HUFF_SYMBOLS_2</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dae20e8613820bdf626439b9265dc5e4a1" prot="public">
          <name>TINFL_FAST_LOOKUP_BITS</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da650112828c38f327bd914ec150855c87" prot="public">
          <name>TINFL_FAST_LOOKUP_SIZE</name>
          <initializer>= 1 &lt;&lt; TINFL_FAST_LOOKUP_BITS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="846" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="845" bodyend="853"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8" prot="public" static="no">
        <name>@12</name>
        <enumvalue id="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a5b5935618c8f80bac84484ffa644df05" prot="public">
          <name>MZ_ZIP_MAX_IO_BUF_SIZE</name>
          <initializer>= 64 * 1024</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8aea0de5eaaef93308322a12ea1097b370" prot="public">
          <name>MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE</name>
          <initializer>= 512</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1705abc3aa04db87446b6477bffc4899" prot="public">
          <name>MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE</name>
          <initializer>= 512</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="898" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="897" bodyend="903"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" prot="public" static="no">
        <name>mz_zip_mode</name>
        <enumvalue id="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a713f3b45f38e966b751027436df64e50" prot="public">
          <name>MZ_ZIP_MODE_INVALID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a40c391220d01d172a451f3dad0d5aed6" prot="public">
          <name>MZ_ZIP_MODE_READING</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a3b3ad1c596f00688f17e2672c1a20064" prot="public">
          <name>MZ_ZIP_MODE_WRITING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3ab445229af27a6e8c9d512d12265dea5b" prot="public">
          <name>MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="969" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="968" bodyend="974"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858" prot="public" static="no">
        <name>mz_zip_flags</name>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858abcc2b8dd27fc7b4889bbf2fa15896b3b" prot="public">
          <name>MZ_ZIP_FLAG_CASE_SENSITIVE</name>
          <initializer>= 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858aee414b99330e685f4405b2c5ba3bcc1e" prot="public">
          <name>MZ_ZIP_FLAG_IGNORE_PATH</name>
          <initializer>= 0x0200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a8bd495808a247010b31dc240588f51d9" prot="public">
          <name>MZ_ZIP_FLAG_COMPRESSED_DATA</name>
          <initializer>= 0x0400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858ab09115999c35684b92cd771f65909e39" prot="public">
          <name>MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY</name>
          <initializer>= 0x0800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a7859626934ae9a84d1fa7620ecb69f27" prot="public">
          <name>MZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG</name>
          <initializer>= 0x1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a5d61357918be9c723e1765d6e0cf660f" prot="public">
          <name>MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY</name>
          <initializer>= 0x2000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a43306564d2afb7c7347cd7041481fa36" prot="public">
          <name>MZ_ZIP_FLAG_WRITE_ZIP64</name>
          <initializer>= 0x4000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a4e7e927edda20a28027f4c4a43a4b2e2" prot="public">
          <name>MZ_ZIP_FLAG_WRITE_ALLOW_READING</name>
          <initializer>= 0x8000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a39d93b5c2db828e2fd3331d1421dc6c5" prot="public">
          <name>MZ_ZIP_FLAG_ASCII_FILENAME</name>
          <initializer>= 0x10000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="977" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="976" bodyend="987"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1a9e009caf9b469d91618c184666c50da4" prot="public" static="no">
        <name>mz_zip_type</name>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4ae9586e76c9fa668b613a5a7172aa8824" prot="public">
          <name>MZ_ZIP_TYPE_INVALID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a01c18c633c1058f9e758e30169ea5170" prot="public">
          <name>MZ_ZIP_TYPE_USER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a74c17a3e487cc9d8732404550466195b" prot="public">
          <name>MZ_ZIP_TYPE_MEMORY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a59eb97f502e48ac0d4e0979919c822e5" prot="public">
          <name>MZ_ZIP_TYPE_HEAP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a1c755e926bbf9197e0d64a0387a4e70a" prot="public">
          <name>MZ_ZIP_TYPE_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a83f61a4c11f3ac2eb415546785502af7" prot="public">
          <name>MZ_ZIP_TYPE_CFILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1a9e009caf9b469d91618c184666c50da4a6bb0fee6f478d240df2efb89b5022607" prot="public">
          <name>MZ_ZIP_TOTAL_TYPES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="990" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="989" bodyend="998"/>
      </memberdef>
      <memberdef kind="enum" id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" prot="public" static="no">
        <name>mz_zip_error</name>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d0cd76e20534ea0d5777ac0c3601db9" prot="public">
          <name>MZ_ZIP_NO_ERROR</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da75be265e4f600498fb28f2a42f4c9705" prot="public">
          <name>MZ_ZIP_UNDEFINED_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da72b70e986fc0d33212f6a898e3e6ee94" prot="public">
          <name>MZ_ZIP_TOO_MANY_FILES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da1365f1c2703389a5e6d5b5bbcca37859" prot="public">
          <name>MZ_ZIP_FILE_TOO_LARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da003e8bf2463b5f3849242b3808e4d6fe" prot="public">
          <name>MZ_ZIP_UNSUPPORTED_METHOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d29d37c6300c91cb5fc9a66d1cb1db1" prot="public">
          <name>MZ_ZIP_UNSUPPORTED_ENCRYPTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da079e286899478ed53a7473f1816a692f" prot="public">
          <name>MZ_ZIP_UNSUPPORTED_FEATURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dadce5afd210f3689e58e71ed2acc02d6c" prot="public">
          <name>MZ_ZIP_FAILED_FINDING_CENTRAL_DIR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daeab66c528acdb43f7946e6411f515083" prot="public">
          <name>MZ_ZIP_NOT_AN_ARCHIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dab6d04beda1c9d8cd1e41fa8b822daaf2" prot="public">
          <name>MZ_ZIP_INVALID_HEADER_OR_CORRUPTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da8c4bcce26300af775c179d6b0a35aff7" prot="public">
          <name>MZ_ZIP_UNSUPPORTED_MULTIDISK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa713f636687cfc5db4a588d6378a6a10" prot="public">
          <name>MZ_ZIP_DECOMPRESSION_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5ff902fe9d66d26053d8a3c11d383460" prot="public">
          <name>MZ_ZIP_COMPRESSION_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dae3b0b6f3ca889a916c69c518a54ee755" prot="public">
          <name>MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da388518d305e53c51b07205856d0a8464" prot="public">
          <name>MZ_ZIP_CRC_CHECK_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dace5ba2a072f9f615873588e7ebc56ab3" prot="public">
          <name>MZ_ZIP_UNSUPPORTED_CDIR_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da9064de836ee72409214e860e84bad1b2" prot="public">
          <name>MZ_ZIP_ALLOC_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da0c392e441dd7e14e4731686e8f3369ed" prot="public">
          <name>MZ_ZIP_FILE_OPEN_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da46b987d2968fe9d076a619e3ca9c68e9" prot="public">
          <name>MZ_ZIP_FILE_CREATE_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa73c6e75a712dffca2370e8bd388b1da" prot="public">
          <name>MZ_ZIP_FILE_WRITE_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dacf573b3be570b5b1fea0e8ee7a35840c" prot="public">
          <name>MZ_ZIP_FILE_READ_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da425368dd51a2a374f88b285338098851" prot="public">
          <name>MZ_ZIP_FILE_CLOSE_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dafada0e6e18c6a880a9a5af7848cceb54" prot="public">
          <name>MZ_ZIP_FILE_SEEK_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da593c3fe2d2ebf99b215bca2b60e6913e" prot="public">
          <name>MZ_ZIP_FILE_STAT_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daad4e7e3731b0f050c53b7eeabcbdfdcc" prot="public">
          <name>MZ_ZIP_INVALID_PARAMETER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5f3d5a8641212fa3ad820bcb94124cc2" prot="public">
          <name>MZ_ZIP_INVALID_FILENAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da4dd840e5a7def295e6a0a5eb8785a024" prot="public">
          <name>MZ_ZIP_BUF_TOO_SMALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da399161cc4d02bf0bb1815089d2bbdeb8" prot="public">
          <name>MZ_ZIP_INTERNAL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dad845112f4958dee455d1be8cc8e0fd04" prot="public">
          <name>MZ_ZIP_FILE_NOT_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da99db269c395156b2ecaa9e39a0596601" prot="public">
          <name>MZ_ZIP_ARCHIVE_TOO_LARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da575251baf4e25b05f6cda0253cd2f49f" prot="public">
          <name>MZ_ZIP_VALIDATION_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da2be5cd9afd4fd0fe1b36b753e377658f" prot="public">
          <name>MZ_ZIP_WRITE_CALLBACK_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daefcdc42228132e6a582da470fa402538" prot="public">
          <name>MZ_ZIP_TOTAL_ERRORS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1002" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="1001" bodyend="1036"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long mz_ulong</definition>
        <argsstring></argsstring>
        <name>mz_ulong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="186" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a8145a3e9c9fac12ec4089a6e39ba9f4f" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* mz_alloc_func) (void *opaque, size_t items, size_t size)</definition>
        <argsstring>)(void *opaque, size_t items, size_t size)</argsstring>
        <name>mz_alloc_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="214" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* mz_free_func) (void *opaque, void *address)</definition>
        <argsstring>)(void *opaque, void *address)</argsstring>
        <name>mz_free_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="215" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a9adc24aaf31eeb77293ebdb97ab6463c" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* mz_realloc_func) (void *opaque, void *address, size_t items, size_t size)</definition>
        <argsstring>)(void *opaque, void *address, size_t items, size_t size)</argsstring>
        <name>mz_realloc_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="216" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a978e823669e60e8d4d8d89d9b58f1c87" prot="public" static="no">
        <type>struct <ref refid="structmz__stream__s" kindref="compound">mz_stream_s</ref></type>
        <definition>typedef struct mz_stream_s  mz_stream</definition>
        <argsstring></argsstring>
        <name>mz_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" prot="public" static="no">
        <type><ref refid="miniz_8h_1a978e823669e60e8d4d8d89d9b58f1c87" kindref="member">mz_stream</ref> *</type>
        <definition>typedef mz_stream* mz_streamp</definition>
        <argsstring></argsstring>
        <name>mz_streamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="292" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ae3a497195d617519e5353ea7b417940f" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char Byte</definition>
        <argsstring></argsstring>
        <name>Byte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="385" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a87d141052bcd5ec8a80812a565c70369" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uInt</definition>
        <argsstring></argsstring>
        <name>uInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="386" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a5be7d28f32510c107a6ed87144cbcf9a" prot="public" static="no">
        <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
        <definition>typedef mz_ulong uLong</definition>
        <argsstring></argsstring>
        <name>uLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="387" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ac5613fe8160cbbf89d3e470574b755fb" prot="public" static="no">
        <type><ref refid="miniz_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref></type>
        <definition>typedef Byte Bytef</definition>
        <argsstring></argsstring>
        <name>Bytef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="388" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a827d5110673ec09ae937156532f7c208" prot="public" static="no">
        <type><ref refid="miniz_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref></type>
        <definition>typedef uInt uIntf</definition>
        <argsstring></argsstring>
        <name>uIntf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="389" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a864fa0e2e4e499038305f3276990689b" prot="public" static="no">
        <type>char</type>
        <definition>typedef char charf</definition>
        <argsstring></argsstring>
        <name>charf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="390" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a7c2da1a4711ea1e7cbf3174d4f5dda9b" prot="public" static="no">
        <type>int</type>
        <definition>typedef int intf</definition>
        <argsstring></argsstring>
        <name>intf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="391" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1acb723a6acb493e64215f5a0613c11eb4" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* voidpf</definition>
        <argsstring></argsstring>
        <name>voidpf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="392" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" prot="public" static="no">
        <type><ref refid="miniz_8h_1a5be7d28f32510c107a6ed87144cbcf9a" kindref="member">uLong</ref></type>
        <definition>typedef uLong uLongf</definition>
        <argsstring></argsstring>
        <name>uLongf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="393" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1aef6ee0fd51b4998d5eae9ffe4e44306c" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* voidp</definition>
        <argsstring></argsstring>
        <name>voidp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="394" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1aff7dd941ce5e1aa30ad76fa09845dad3" prot="public" static="no">
        <type>void *const</type>
        <definition>typedef void* const voidpc</definition>
        <argsstring></argsstring>
        <name>voidpc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="395" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char mz_uint8</definition>
        <argsstring></argsstring>
        <name>mz_uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="469" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a5a94836eff2f4841bcdd2eb4ea3b8cc4" prot="public" static="no">
        <type>signed short</type>
        <definition>typedef signed short mz_int16</definition>
        <argsstring></argsstring>
        <name>mz_int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="470" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short mz_uint16</definition>
        <argsstring></argsstring>
        <name>mz_uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="471" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int mz_uint32</definition>
        <argsstring></argsstring>
        <name>mz_uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="472" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int mz_uint</definition>
        <argsstring></argsstring>
        <name>mz_uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="473" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a49738d6efcd5ee0779fee9582fb3ebfa" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t mz_int64</definition>
        <argsstring></argsstring>
        <name>mz_int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="474" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t mz_uint64</definition>
        <argsstring></argsstring>
        <name>mz_uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="475" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mz_bool</definition>
        <argsstring></argsstring>
        <name>mz_bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="476" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" prot="public" static="no">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref>(*</type>
        <definition>typedef mz_bool(* tdefl_put_buf_func_ptr) (const void *pBuf, int len, void *pUser)</definition>
        <argsstring>)(const void *pBuf, int len, void *pUser)</argsstring>
        <name>tdefl_put_buf_func_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="623" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a4e4ea4a3376e8d2a996b848c8e4319df" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* tinfl_put_buf_func_ptr) (const void *pBuf, int len, void *pUser)</definition>
        <argsstring>)(const void *pBuf, int len, void *pUser)</argsstring>
        <name>tinfl_put_buf_func_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="780" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ad5308cf24962df49c8b6a5c91bbbe05e" prot="public" static="no">
        <type>struct <ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor_tag</ref></type>
        <definition>typedef struct tinfl_decompressor_tag tinfl_decompressor</definition>
        <argsstring></argsstring>
        <name>tinfl_decompressor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="781" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1af6af194c507342cda458498cd37ca418" prot="public" static="no">
        <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
        <definition>typedef mz_uint32 tinfl_bit_buf_t</definition>
        <argsstring></argsstring>
        <name>tinfl_bit_buf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="869" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a88993adb5262c6e17495f22790b22bdd" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* mz_file_read_func) (void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n)</definition>
        <argsstring>)(void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n)</argsstring>
        <name>mz_file_read_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="961" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* mz_file_write_func) (void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n)</definition>
        <argsstring>)(void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n)</argsstring>
        <name>mz_file_write_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="962" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1ad7bc23cd7073bca03279afc2f57dc50f" prot="public" static="no">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref>(*</type>
        <definition>typedef mz_bool(* mz_file_needs_keepalive) (void *pOpaque)</definition>
        <argsstring>)(void *pOpaque)</argsstring>
        <name>mz_file_needs_keepalive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="963" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="miniz_8h_1a2f5efde14c151952d14c6a231b7767ac" prot="public" static="no">
        <type>struct <ref refid="structmz__zip__internal__state__tag" kindref="compound">mz_zip_internal_state_tag</ref></type>
        <definition>typedef struct mz_zip_internal_state_tag mz_zip_internal_state</definition>
        <argsstring></argsstring>
        <name>mz_zip_internal_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="963" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" bodystart="966" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="miniz_8h_1a7bdc0af59e4ca6d7bd8b7d5d005ff55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mz_free</definition>
        <argsstring>(void *p)</argsstring>
        <name>mz_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="189" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a094d181afc4c98dc1864f6ce7d636258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
        <definition>mz_ulong mz_adler32</definition>
        <argsstring>(mz_ulong adler, const unsigned char *ptr, size_t buf_len)</argsstring>
        <name>mz_adler32</name>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>adler</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="193" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="39" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acd660cec3b02f8ba7416d04934a41e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
        <definition>mz_ulong mz_crc32</definition>
        <argsstring>(mz_ulong crc, const unsigned char *ptr, size_t buf_len)</argsstring>
        <name>mz_crc32</name>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>crc</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="197" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="88" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3d5d232e407e113f68859c17212526cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mz_version</definition>
        <argsstring>(void)</argsstring>
        <name>mz_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="295" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a69f53f93ea50410b674721408b2aff24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_deflateInit</definition>
        <argsstring>(mz_streamp pStream, int level)</argsstring>
        <name>mz_deflateInit</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="308" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a66d75d30383d1b7af379b7d19db3aba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_deflateInit2</definition>
        <argsstring>(mz_streamp pStream, int level, int method, int window_bits, int mem_level, int strategy)</argsstring>
        <name>mz_deflateInit2</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mem_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="315" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="188" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2632b66b8e67b1482f24dff4d4b65e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_deflateReset</definition>
        <argsstring>(mz_streamp pStream)</argsstring>
        <name>mz_deflateReset</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="318" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="224" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ab843b570ebaeb31d801a5414260edeaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_deflate</definition>
        <argsstring>(mz_streamp pStream, int flush)</argsstring>
        <name>mz_deflate</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="330" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="233" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a36e2a62c4a31c1b7f8b51da8cffd7281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_deflateEnd</definition>
        <argsstring>(mz_streamp pStream)</argsstring>
        <name>mz_deflateEnd</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="336" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acd123a509ce06edd3a97506622873102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
        <definition>mz_ulong mz_deflateBound</definition>
        <argsstring>(mz_streamp pStream, mz_ulong source_len)</argsstring>
        <name>mz_deflateBound</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>source_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="339" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2e39a706e4a41c7168983f7e7c2e1a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_compress</definition>
        <argsstring>(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len)</argsstring>
        <name>mz_compress</name>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref> *</type>
          <declname>pDest_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pSource</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>source_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="343" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a7a7b50a0d965d229ce14f3afa5981edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_compress2</definition>
        <argsstring>(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len, int level)</argsstring>
        <name>mz_compress2</name>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref> *</type>
          <declname>pDest_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pSource</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>source_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="344" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="310" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3046aad784a296b0064530b4b98f5adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
        <definition>mz_ulong mz_compressBound</definition>
        <argsstring>(mz_ulong source_len)</argsstring>
        <name>mz_compressBound</name>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>source_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="347" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2cd16abe6e673d9f98d98ae81c2d7c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_inflateInit</definition>
        <argsstring>(mz_streamp pStream)</argsstring>
        <name>mz_inflateInit</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="350" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a95babde50d211fa1d2401e70516d2e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_inflateInit2</definition>
        <argsstring>(mz_streamp pStream, int window_bits)</argsstring>
        <name>mz_inflateInit2</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="354" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="359" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2d5d109e8f992526202122134e092aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_inflate</definition>
        <argsstring>(mz_streamp pStream, int flush)</argsstring>
        <name>mz_inflate</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="370" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="400" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ab3074e360c49f66ccd955e6630d23108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_inflateEnd</definition>
        <argsstring>(mz_streamp pStream)</argsstring>
        <name>mz_inflateEnd</name>
        <param>
          <type><ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref></type>
          <declname>pStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="373" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="512" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aa0ce62915456b6c5f0bcf1ed09e94599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_uncompress</definition>
        <argsstring>(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len)</argsstring>
        <name>mz_uncompress</name>
        <param>
          <type>unsigned char *</type>
          <declname>pDest</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref> *</type>
          <declname>pDest_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pSource</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref></type>
          <declname>source_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="377" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="524" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ac315062b2450716e20d21843f2022660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mz_error</definition>
        <argsstring>(int err)</argsstring>
        <name>mz_error</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="380" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="554" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5b8c4d334248b00bb255a64a7628ab36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* miniz_def_alloc_func</definition>
        <argsstring>(void *opaque, size_t items, size_t size)</argsstring>
        <name>miniz_def_alloc_func</name>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>items</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="543" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a74bd5c1f3f342d2109643cfa500689fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void miniz_def_free_func</definition>
        <argsstring>(void *opaque, void *address)</argsstring>
        <name>miniz_def_free_func</name>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="544" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ae51abb9ee6167023388e1d1122b10d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* miniz_def_realloc_func</definition>
        <argsstring>(void *opaque, void *address, size_t items, size_t size)</argsstring>
        <name>miniz_def_realloc_func</name>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>items</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="545" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1afb50d9ccdd6d2da88a020e0e5ad3fa20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* tdefl_compress_mem_to_heap</definition>
        <argsstring>(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)</argsstring>
        <name>tdefl_compress_mem_to_heap</name>
        <param>
          <type>const void *</type>
          <declname>pSrc_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pOut_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="603" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1986" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a37639f95844a8c30995fc1f5d4bb75a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tdefl_compress_mem_to_mem</definition>
        <argsstring>(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)</argsstring>
        <name>tdefl_compress_mem_to_mem</name>
        <param>
          <type>void *</type>
          <declname>pOut_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_buf_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pSrc_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_buf_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="607" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2001" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a63a3ef354a44c931ddf34a66cf064b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* tdefl_write_image_to_png_file_in_memory_ex</definition>
        <argsstring>(const void *pImage, int w, int h, int num_chans, size_t *pLen_out, mz_uint level, mz_bool flip)</argsstring>
        <name>tdefl_write_image_to_png_file_in_memory_ex</name>
        <param>
          <type>const void *</type>
          <declname>pImage</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_chans</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pLen_out</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
          <declname>flip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="619" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2045" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a0895bd488b9650322eedf2739f81402a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* tdefl_write_image_to_png_file_in_memory</definition>
        <argsstring>(const void *pImage, int w, int h, int num_chans, size_t *pLen_out)</argsstring>
        <name>tdefl_write_image_to_png_file_in_memory</name>
        <param>
          <type>const void *</type>
          <declname>pImage</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_chans</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pLen_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="620" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2123" bodyend="2127"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a153fd833b8c09efd13aa1d35dd22d092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool tdefl_compress_mem_to_output</definition>
        <argsstring>(const void *pBuf, size_t buf_len, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)</argsstring>
        <name>tdefl_compress_mem_to_output</name>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref></type>
          <declname>pPut_buf_func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pPut_buf_user</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="626" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1939" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3c2c67a6200147020ba4bfbf77962792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref></type>
        <definition>tdefl_status tdefl_init</definition>
        <argsstring>(tdefl_compressor *d, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)</argsstring>
        <name>tdefl_init</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref></type>
          <declname>pPut_buf_func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pPut_buf_user</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="716" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1896" bodyend="1927"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ae9968978f7ea9f732c5ed08db988208b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref></type>
        <definition>tdefl_status tdefl_compress</definition>
        <argsstring>(tdefl_compressor *d, const void *pIn_buf, size_t *pIn_buf_size, void *pOut_buf, size_t *pOut_buf_size, tdefl_flush flush)</argsstring>
        <name>tdefl_compress</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pIn_buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pIn_buf_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pOut_buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pOut_buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref></type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="719" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1822" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5f2608070112b0e81a3017e9c39c73b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref></type>
        <definition>tdefl_status tdefl_compress_buffer</definition>
        <argsstring>(tdefl_compressor *d, const void *pIn_buf, size_t in_buf_size, tdefl_flush flush)</argsstring>
        <name>tdefl_compress_buffer</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pIn_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref></type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="723" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1890" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a516a79788364e4f3e3b55187a2a67b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref></type>
        <definition>tdefl_status tdefl_get_prev_return_status</definition>
        <argsstring>(tdefl_compressor *d)</argsstring>
        <name>tdefl_get_prev_return_status</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="725" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1929" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2ec6403111ea9afbcdc4d76cfda97110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
        <definition>mz_uint32 tdefl_get_adler32</definition>
        <argsstring>(tdefl_compressor *d)</argsstring>
        <name>tdefl_get_adler32</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="726" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="1934" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acf2306ec6b7f92753264f68bc554750b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
        <definition>mz_uint tdefl_create_comp_flags_from_zip_params</definition>
        <argsstring>(int level, int window_bits, int strategy)</argsstring>
        <name>tdefl_create_comp_flags_from_zip_params</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="732" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2017" bodyend="2035"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a862e12a5b9361933538572c4692d4544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
        <definition>tdefl_compressor* tdefl_compressor_alloc</definition>
        <argsstring>()</argsstring>
        <name>tdefl_compressor_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="737" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2132" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aaed356efd84e96e9f5eecdf078b07e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tdefl_compressor_free</definition>
        <argsstring>(tdefl_compressor *pComp)</argsstring>
        <name>tdefl_compressor_free</name>
        <param>
          <type><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref> *</type>
          <declname>pComp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="738" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2137" bodyend="2140"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2a949056c9eed394b9f2217ba6f55f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* tinfl_decompress_mem_to_heap</definition>
        <argsstring>(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)</argsstring>
        <name>tinfl_decompress_mem_to_heap</name>
        <param>
          <type>const void *</type>
          <declname>pSrc_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pOut_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="771" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2791" bodyend="2827"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ac4642bb91b5abc566c6b23c0658d6995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tinfl_decompress_mem_to_mem</definition>
        <argsstring>(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)</argsstring>
        <name>tinfl_decompress_mem_to_mem</name>
        <param>
          <type>void *</type>
          <declname>pOut_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_buf_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pSrc_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_buf_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="776" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2829" bodyend="2836"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3e8087762c8423c4e48d1e5e01a243de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tinfl_decompress_mem_to_callback</definition>
        <argsstring>(const void *pIn_buf, size_t *pIn_buf_size, tinfl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)</argsstring>
        <name>tinfl_decompress_mem_to_callback</name>
        <param>
          <type>const void *</type>
          <declname>pIn_buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pIn_buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4e4ea4a3376e8d2a996b848c8e4319df" kindref="member">tinfl_put_buf_func_ptr</ref></type>
          <declname>pPut_buf_func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pPut_buf_user</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="781" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2838" bodyend="2865"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a65dd8744393e4f726a67aa3833656353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ad5308cf24962df49c8b6a5c91bbbe05e" kindref="member">tinfl_decompressor</ref> *</type>
        <definition>tinfl_decompressor* tinfl_decompressor_alloc</definition>
        <argsstring>()</argsstring>
        <name>tinfl_decompressor_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="790" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2867" bodyend="2873"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af8586e33fb8be9bff1c261d3aae1fc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tinfl_decompressor_free</definition>
        <argsstring>(tinfl_decompressor *pDecomp)</argsstring>
        <name>tinfl_decompressor_free</name>
        <param>
          <type><ref refid="miniz_8h_1ad5308cf24962df49c8b6a5c91bbbe05e" kindref="member">tinfl_decompressor</ref> *</type>
          <declname>pDecomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="791" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2875" bodyend="2878"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ac4e4c006d234780922676ecc31fe1416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4" kindref="member">tinfl_status</ref></type>
        <definition>tinfl_status tinfl_decompress</definition>
        <argsstring>(tinfl_decompressor *r, const mz_uint8 *pIn_buf_next, size_t *pIn_buf_size, mz_uint8 *pOut_buf_start, mz_uint8 *pOut_buf_next, size_t *pOut_buf_size, const mz_uint32 decomp_flags)</argsstring>
        <name>tinfl_decompress</name>
        <param>
          <type><ref refid="miniz_8h_1ad5308cf24962df49c8b6a5c91bbbe05e" kindref="member">tinfl_decompressor</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *</type>
          <declname>pIn_buf_next</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pIn_buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *</type>
          <declname>pOut_buf_start</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref> *</type>
          <declname>pOut_buf_next</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pOut_buf_size</declname>
        </param>
        <param>
          <type>const <ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
          <declname>decomp_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="842" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="2323" bodyend="2788"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5aeef8648af76ac95c3d8e2f43be095e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_init</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint64 size, mz_uint flags)</argsstring>
        <name>mz_zip_reader_init</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1069" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3755" bodyend="3773"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a6806f0e4c2e8320f33188e12ec0b63b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_init_mem</definition>
        <argsstring>(mz_zip_archive *pZip, const void *pMem, size_t size, mz_uint flags)</argsstring>
        <name>mz_zip_reader_init_mem</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pMem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1071" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3783" bodyend="3815"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a24e55b3b8f9f7722a43117d8a3497eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_init_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_uint32 flags)</argsstring>
        <name>mz_zip_reader_init_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1077" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3831" bodyend="3834"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aac2174a6cb49f234d050051bff59bfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_init_file_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_uint flags, mz_uint64 file_start_ofs, mz_uint64 archive_size)</argsstring>
        <name>mz_zip_reader_init_file_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>file_start_ofs</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>archive_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1078" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3836" bodyend="3885"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1adf32b3615759bd3db23877eb95d106d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_init_cfile</definition>
        <argsstring>(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint64 archive_size, mz_uint flags)</argsstring>
        <name>mz_zip_reader_init_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>archive_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1083" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3887" bodyend="3925"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a0cf333c7781de5d56d24d70e573507e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_end</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_reader_end</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1087" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3751" bodyend="3754"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a8c64687454aca17948eb58730dc6f41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mz_zip_zero_struct</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_zero_struct</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1093" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3698" bodyend="3702"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a388a0652c3c8d2b75a418fb2966efe2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" kindref="member">mz_zip_mode</ref></type>
        <definition>mz_zip_mode mz_zip_get_mode</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_mode</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1095" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7020" bodyend="7023"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a10e9a214efba7f8c6740f05eaafaaf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4" kindref="member">mz_zip_type</ref></type>
        <definition>mz_zip_type mz_zip_get_type</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_type</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1096" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7025" bodyend="7028"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a1cb6b5d48f24b9aef3cb0a3f63793166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
        <definition>mz_uint mz_zip_reader_get_num_files</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_reader_get_num_files</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1099" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7161" bodyend="7164"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a8ff0f5ba2757db9b36eafcf9cbdbdadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
        <definition>mz_uint64 mz_zip_get_archive_size</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_archive_size</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1101" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7166" bodyend="7171"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aaf20afef8b149b8653572002646e7e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
        <definition>mz_uint64 mz_zip_get_archive_file_start_offset</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_archive_file_start_offset</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1102" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7173" bodyend="7178"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a88c5879a7ef605d4d6f5e21557c7c145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
        <definition>MZ_FILE* mz_zip_get_cfile</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1103" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7180" bodyend="7185"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3e27ad8c1597bb95c808cd841ebae3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mz_zip_read_archive_data</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint64 file_ofs, void *pBuf, size_t n)</argsstring>
        <name>mz_zip_read_archive_data</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>file_ofs</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1106" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7187" bodyend="7193"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a8f637bba47eee7cdb0c8db1b1ddb9a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_zip_locate_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags)</argsstring>
        <name>mz_zip_locate_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af81afebb11893a270e21e2d8667dd6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_locate_file_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags, mz_uint32 *pIndex)</argsstring>
        <name>mz_zip_locate_file_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref> *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a9d0a18d927aab166ef7ea84cb98cd9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
        <definition>mz_zip_error mz_zip_set_last_error</definition>
        <argsstring>(mz_zip_archive *pZip, mz_zip_error err_num)</argsstring>
        <name>mz_zip_set_last_error</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
          <declname>err_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1117" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7030" bodyend="7041"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5ab3dec70535617213e159a2c9bec0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
        <definition>mz_zip_error mz_zip_peek_last_error</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_peek_last_error</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1118" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7043" bodyend="7049"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aece78e8972f5437affc90509550ba82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
        <definition>mz_zip_error mz_zip_clear_last_error</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_clear_last_error</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1119" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7051" bodyend="7054"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5cc8cf2275e42cef6721b84282d690c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
        <definition>mz_zip_error mz_zip_get_last_error</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_last_error</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1120" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7056" bodyend="7067"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a6d45d0df0da44c7f373d994a9bd3786d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mz_zip_get_error_string</definition>
        <argsstring>(mz_zip_error mz_err)</argsstring>
        <name>mz_zip_get_error_string</name>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref></type>
          <declname>mz_err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1121" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7069" bodyend="7142"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a400dc4c44934e7d73706b419f4a73595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_is_file_a_directory</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index)</argsstring>
        <name>mz_zip_reader_is_file_a_directory</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1124" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3986" bodyend="4016"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a8b262a8e0d2b58d0d0d5523655bd07bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_is_file_encrypted</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index)</argsstring>
        <name>mz_zip_reader_is_file_encrypted</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1127" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3936" bodyend="3948"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a996d0ae919e19b0821cebbc7ce52ce91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_is_file_supported</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index)</argsstring>
        <name>mz_zip_reader_is_file_supported</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1130" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="3950" bodyend="3984"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af5ea9749b815e356b6df09c166687d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
        <definition>mz_uint mz_zip_reader_get_filename</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, char *pFilename, mz_uint filename_buf_size)</argsstring>
        <name>mz_zip_reader_get_filename</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>filename_buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1134" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7195" bodyend="7214"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a84813b57c1313c2e2d94a1f62d3ab9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_zip_reader_locate_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags)</argsstring>
        <name>mz_zip_reader_locate_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1139" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4206" bodyend="4213"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acb9595cdd4deca326d32d0bcc301d9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mz_zip_reader_locate_file_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags, mz_uint32 *file_index)</argsstring>
        <name>mz_zip_reader_locate_file_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref> *</type>
          <declname>file_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1140" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4215" bodyend="4278"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aa9d3abc65b4b9b91efc437ec151e9c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_file_stat</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, mz_zip_archive_file_stat *pStat)</argsstring>
        <name>mz_zip_reader_file_stat</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type><ref refid="structmz__zip__archive__file__stat" kindref="compound">mz_zip_archive_file_stat</ref> *</type>
          <declname>pStat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1143" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7216" bodyend="7219"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a0b0ba17abd48cc98db90960b623b1162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_is_zip64</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_is_zip64</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1147" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7145" bodyend="7151"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2828228dbbcf66c0d5ecd66dafd39267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mz_zip_get_central_dir_size</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_get_central_dir_size</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1151" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7153" bodyend="7159"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a4721777518994d4d3ba978e427565e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_to_mem_no_alloc</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)</argsstring>
        <name>mz_zip_reader_extract_to_mem_no_alloc</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pUser_read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>user_read_buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1155" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4280" bodyend="4421"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ac16cec09731400cc18c3b907340ef601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_file_to_mem_no_alloc</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)</argsstring>
        <name>mz_zip_reader_extract_file_to_mem_no_alloc</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pUser_read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>user_read_buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1156" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4423" bodyend="4429"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a9aa631c7bc8147b39b6d8a910682463e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_to_mem</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_to_mem</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1159" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4431" bodyend="4434"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1abb734054fc4e51026c1187aa8a12a1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_file_to_mem</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_file_to_mem</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1160" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4436" bodyend="4439"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a7387530cd78979243538a5c87132b64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mz_zip_reader_extract_to_heap</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, size_t *pSize, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_to_heap</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pSize</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1165" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4441" bodyend="4481"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ac0301a766ca6023da1a58f3a3f3333c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mz_zip_reader_extract_file_to_heap</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, size_t *pSize, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_file_to_heap</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pSize</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1166" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4483" bodyend="4493"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a607bba163f72b6728191504c53bf70a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_to_callback</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, mz_file_write_func pCallback, void *pOpaque, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_to_callback</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref></type>
          <declname>pCallback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pOpaque</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1169" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4495" bodyend="4691"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a2f77f2adc9a6d554f89f79e4f0207b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_file_to_callback</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_file_write_func pCallback, void *pOpaque, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_file_to_callback</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref></type>
          <declname>pCallback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pOpaque</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1170" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4693" bodyend="4700"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af328f94aff4a5d44825959eb58bdf3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_to_file</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, const char *pDst_filename, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_to_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pDst_filename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1175" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4710" bodyend="4742"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a5e053a05efdc3b9d210f9391382dcd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_file_to_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_filename, const char *pDst_filename, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_file_to_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pDst_filename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1176" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4744" bodyend="4751"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af669041b12075550984842fb97bc7618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_to_cfile</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, MZ_FILE *File, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_to_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1179" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4753" bodyend="4764"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ae696e70169c739706434446c01fa6f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_reader_extract_file_to_cfile</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_filename, MZ_FILE *pFile, mz_uint flags)</argsstring>
        <name>mz_zip_reader_extract_file_to_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_filename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1180" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4766" bodyend="4773"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acaef85bf26fe6936ac04e14950078892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_validate_file</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags)</argsstring>
        <name>mz_zip_validate_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>file_index</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1196" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4784" bodyend="4988"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a0f22c932bfa13ea1f720dc757e22be12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_validate_archive</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint flags)</argsstring>
        <name>mz_zip_validate_archive</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1199" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="4990" bodyend="5041"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1acaaba12f38ef5ec95f895c54a7c56351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_validate_mem_archive</definition>
        <argsstring>(const void *pMem, size_t size, mz_uint flags, mz_zip_error *pErr)</argsstring>
        <name>mz_zip_validate_mem_archive</name>
        <param>
          <type>const void *</type>
          <declname>pMem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref> *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1202" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5043" bodyend="5082"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a608ee912bc95f54d663f39157dae0d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_validate_file_archive</definition>
        <argsstring>(const char *pFilename, mz_uint flags, mz_zip_error *pErr)</argsstring>
        <name>mz_zip_validate_file_archive</name>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref> *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1203" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5085" bodyend="5124"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a18c65a7ddd8d0efbb071e3708bf72105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_end</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_end</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1206" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7221" bodyend="7234"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a8b4c858b16cf5ea4508ca2e38a8e2a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint64 existing_size)</argsstring>
        <name>mz_zip_writer_init</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>existing_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1213" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5286" bodyend="5289"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ae7a4dc8ccdc92cf8fe90f0703dae5650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_v2</definition>
        <argsstring>(mz_zip_archive *pZip, mz_uint64 existing_size, mz_uint flags)</argsstring>
        <name>mz_zip_writer_init_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>existing_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1214" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5237" bodyend="5284"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a520050b2d27e4a1073e4462c5258d7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_heap</definition>
        <argsstring>(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size)</argsstring>
        <name>mz_zip_writer_init_heap</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_to_reserve_at_beginning</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>initial_allocation_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1215" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5319" bodyend="5322"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1af2dce1c3179550a7870704abc099f086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_heap_v2</definition>
        <argsstring>(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size, mz_uint flags)</argsstring>
        <name>mz_zip_writer_init_heap_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_to_reserve_at_beginning</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>initial_allocation_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1216" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5291" bodyend="5317"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a1ef57babf68945c7ef12f471d7c417c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning)</argsstring>
        <name>mz_zip_writer_init_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>size_to_reserve_at_beginning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1219" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5341" bodyend="5344"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a3f063007374b7ddf5fd84f0644b4cfba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_file_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning, mz_uint flags)</argsstring>
        <name>mz_zip_writer_init_file_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>size_to_reserve_at_beginning</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1220" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5346" bodyend="5391"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a7d826f57eb4ba51217912b915512bd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_cfile</definition>
        <argsstring>(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint flags)</argsstring>
        <name>mz_zip_writer_init_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1221" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5393" bodyend="5411"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aea1a273234436ccb155a0e92ef2a30e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_from_reader</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename)</argsstring>
        <name>mz_zip_writer_init_from_reader</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1230" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5501" bodyend="5504"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aaa53ceaf8230510769b12e04df060c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_init_from_reader_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pFilename, mz_uint flags)</argsstring>
        <name>mz_zip_writer_init_from_reader_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFilename</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1231" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5414" bodyend="5499"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ab5aac408b80e6f51a14434330fc76d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_mem</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, mz_uint level_and_flags)</argsstring>
        <name>mz_zip_writer_add_mem</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1236" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5507" bodyend="5510"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a48ece9a3d251aa69af280e975b6cc080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_mem_ex</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, mz_uint64 uncomp_size, mz_uint32 uncomp_crc32)</argsstring>
        <name>mz_zip_writer_add_mem_ex</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>uncomp_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
          <declname>uncomp_crc32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1240" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5692" bodyend="5696"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a371c9af2ceab417c4d2cf4e79309f634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_mem_ex_v2</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, mz_uint64 uncomp_size, mz_uint32 uncomp_crc32, MZ_TIME_T *last_modified, const char *user_extra_data_local, mz_uint user_extra_data_local_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)</argsstring>
        <name>mz_zip_writer_add_mem_ex_v2</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>uncomp_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref></type>
          <declname>uncomp_crc32</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" kindref="member">MZ_TIME_T</ref> *</type>
          <declname>last_modified</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user_extra_data_local</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>user_extra_data_local_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user_extra_data_central</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>user_extra_data_central_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1243" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5698" bodyend="5978"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a7e65ca89365aca18317932a5a6a53ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_file</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_name, const char *pSrc_filename, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags)</argsstring>
        <name>mz_zip_writer_add_file</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pSrc_filename</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1250" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6279" bodyend="6308"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a32d55e4298dec2815704deec35f7596d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_cfile</definition>
        <argsstring>(mz_zip_archive *pZip, const char *pArchive_name, MZ_FILE *pSrc_file, mz_uint64 size_to_add, const MZ_TIME_T *pFile_time, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, const char *user_extra_data_local, mz_uint user_extra_data_local_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)</argsstring>
        <name>mz_zip_writer_add_cfile</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref> *</type>
          <declname>pSrc_file</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref></type>
          <declname>size_to_add</declname>
        </param>
        <param>
          <type>const <ref refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" kindref="member">MZ_TIME_T</ref> *</type>
          <declname>pFile_time</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user_extra_data_local</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>user_extra_data_local_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user_extra_data_central</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>user_extra_data_central_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1253" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="5981" bodyend="6277"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a995089c55642ae721d39970627a6f692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_add_from_zip_reader</definition>
        <argsstring>(mz_zip_archive *pZip, mz_zip_archive *pSource_zip, mz_uint src_file_index)</argsstring>
        <name>mz_zip_writer_add_from_zip_reader</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pSource_zip</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>src_file_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1260" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6391" bodyend="6751"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a0f7c5b26c1200daacd0eefa8744d9d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_finalize_archive</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_writer_finalize_archive</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1265" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6753" bodyend="6839"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1ae21d7f8237b520a1c8681bddb68cad42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_finalize_heap_archive</definition>
        <argsstring>(mz_zip_archive *pZip, void **ppBuf, size_t *pSize)</argsstring>
        <name>mz_zip_writer_finalize_heap_archive</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>ppBuf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1269" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6841" bodyend="6864"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a7ac49ded3cc37713226764131602e857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_writer_end</definition>
        <argsstring>(mz_zip_archive *pZip)</argsstring>
        <name>mz_zip_writer_end</name>
        <param>
          <type><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref> *</type>
          <declname>pZip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1273" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6866" bodyend="6869"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a36c32e80d9a7c3c217ae7afdfe1d30cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_add_mem_to_archive_file_in_place</definition>
        <argsstring>(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags)</argsstring>
        <name>mz_zip_add_mem_to_archive_file_in_place</name>
        <param>
          <type>const char *</type>
          <declname>pZip_filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1281" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6872" bodyend="6875"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a443af52ee783e8ce9dc397761632d30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref></type>
        <definition>mz_bool mz_zip_add_mem_to_archive_file_in_place_v2</definition>
        <argsstring>(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, mz_zip_error *pErr)</argsstring>
        <name>mz_zip_add_mem_to_archive_file_in_place_v2</name>
        <param>
          <type>const char *</type>
          <declname>pZip_filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref></type>
          <declname>comment_size</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>level_and_flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref> *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1282" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6877" bodyend="6968"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1aebd3651c5138a33ff42d46ad9596fe6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mz_zip_extract_archive_file_to_heap</definition>
        <argsstring>(const char *pZip_filename, const char *pArchive_name, size_t *pSize, mz_uint flags)</argsstring>
        <name>mz_zip_extract_archive_file_to_heap</name>
        <param>
          <type>const char *</type>
          <declname>pZip_filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pSize</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1287" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="7009" bodyend="7012"/>
      </memberdef>
      <memberdef kind="function" id="miniz_8h_1a94dc7c4eddd98466020dc02881d016d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mz_zip_extract_archive_file_to_heap_v2</definition>
        <argsstring>(const char *pZip_filename, const char *pArchive_name, const char *pComment, size_t *pSize, mz_uint flags, mz_zip_error *pErr)</argsstring>
        <name>mz_zip_extract_archive_file_to_heap_v2</name>
        <param>
          <type>const char *</type>
          <declname>pZip_filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pArchive_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pComment</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pSize</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref> *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h" line="1288" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.c" bodystart="6970" bodyend="7007"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>miniz.c<sp/>v1.16<sp/>beta<sp/>r1<sp/>-<sp/>public<sp/>domain<sp/>deflate/inflate,<sp/>zlib-subset,<sp/>ZIP<sp/>reading/writing/appending,<sp/>PNG<sp/>writing</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>See<sp/>&quot;unlicense&quot;<sp/>statement<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>file.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>Rich<sp/>Geldreich<sp/>&lt;richgel99@gmail.com&gt;,<sp/>last<sp/>updated<sp/>Oct.<sp/>13,<sp/>2013</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>Implements<sp/>RFC<sp/>1950:<sp/>http://www.ietf.org/rfc/rfc1950.txt<sp/>and<sp/>RFC<sp/>1951:<sp/>http://www.ietf.org/rfc/rfc1951.txt</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>Most<sp/>API&apos;s<sp/>defined<sp/>in<sp/>miniz.c<sp/>are<sp/>optional.<sp/>For<sp/>example,<sp/>to<sp/>disable<sp/>the<sp/>archive<sp/>related<sp/>functions<sp/>just<sp/>define</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>MINIZ_NO_ARCHIVE_APIS,<sp/>or<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>all<sp/>stdio<sp/>usage<sp/>define<sp/>MINIZ_NO_STDIO<sp/>(see<sp/>the<sp/>list<sp/>below<sp/>for<sp/>more<sp/>macros).</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Low-level<sp/>Deflate/Inflate<sp/>implementation<sp/>notes:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compression:<sp/>Use<sp/>the<sp/>&quot;tdefl&quot;<sp/>API&apos;s.<sp/>The<sp/>compressor<sp/>supports<sp/>raw,<sp/>static,<sp/>and<sp/>dynamic<sp/>blocks,<sp/>lazy<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>greedy<sp/>parsing,<sp/>match<sp/>length<sp/>filtering,<sp/>RLE-only,<sp/>and<sp/>Huffman-only<sp/>streams.<sp/>It<sp/>performs<sp/>and<sp/>compresses</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>approximately<sp/>as<sp/>well<sp/>as<sp/>zlib.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Decompression:<sp/>Use<sp/>the<sp/>&quot;tinfl&quot;<sp/>API&apos;s.<sp/>The<sp/>entire<sp/>decompressor<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>single<sp/>function</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>coroutine:<sp/>see<sp/>tinfl_decompress().<sp/>It<sp/>supports<sp/>decompression<sp/>into<sp/>a<sp/>32KB<sp/>(or<sp/>larger<sp/>power<sp/>of<sp/>2)<sp/>wrapping<sp/>buffer,<sp/>or<sp/>into<sp/>a<sp/>memory</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>block<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>entire<sp/>file.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>low-level<sp/>tdefl/tinfl<sp/>API&apos;s<sp/>do<sp/>not<sp/>make<sp/>any<sp/>use<sp/>of<sp/>dynamic<sp/>memory<sp/>allocation.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>*<sp/>zlib-style<sp/>API<sp/>notes:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>miniz.c<sp/>implements<sp/>a<sp/>fairly<sp/>large<sp/>subset<sp/>of<sp/>zlib.<sp/>There&apos;s<sp/>enough<sp/>functionality<sp/>present<sp/>for<sp/>it<sp/>to<sp/>be<sp/>a<sp/>drop-in</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>zlib<sp/>replacement<sp/>in<sp/>many<sp/>apps:</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>z_stream<sp/>struct,<sp/>optional<sp/>memory<sp/>allocation<sp/>callbacks</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit/deflateInit2/deflate/deflateReset/deflateEnd/deflateBound</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit/inflateInit2/inflate/inflateEnd</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compress,<sp/>compress2,<sp/>compressBound,<sp/>uncompress</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRC-32,<sp/>Adler-32<sp/>-<sp/>Using<sp/>modern,<sp/>minimal<sp/>code<sp/>size,<sp/>CPU<sp/>cache<sp/>friendly<sp/>routines.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Supports<sp/>raw<sp/>deflate<sp/>streams<sp/>or<sp/>standard<sp/>zlib<sp/>streams<sp/>with<sp/>adler-32<sp/>checking.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Limitations:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>callback<sp/>API&apos;s<sp/>are<sp/>not<sp/>implemented<sp/>yet.<sp/>No<sp/>support<sp/>for<sp/>gzip<sp/>headers<sp/>or<sp/>zlib<sp/>static<sp/>dictionaries.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>I&apos;ve<sp/>tried<sp/>to<sp/>closely<sp/>emulate<sp/>zlib&apos;s<sp/>various<sp/>flavors<sp/>of<sp/>stream<sp/>flushing<sp/>and<sp/>return<sp/>status<sp/>codes,<sp/>but</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>are<sp/>no<sp/>guarantees<sp/>that<sp/>miniz.c<sp/>pulls<sp/>this<sp/>off<sp/>perfectly.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>*<sp/>PNG<sp/>writing:<sp/>See<sp/>the<sp/>tdefl_write_image_to_png_file_in_memory()<sp/>function,<sp/>originally<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Alex<sp/>Evans.<sp/>Supports<sp/>1-4<sp/>bytes/pixel<sp/>images.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>*<sp/>ZIP<sp/>archive<sp/>API<sp/>notes:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>ZIP<sp/>archive<sp/>API&apos;s<sp/>where<sp/>designed<sp/>with<sp/>simplicity<sp/>and<sp/>efficiency<sp/>in<sp/>mind,<sp/>with<sp/>just<sp/>enough<sp/>abstraction<sp/>to</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>get<sp/>the<sp/>job<sp/>done<sp/>with<sp/>minimal<sp/>fuss.<sp/>There<sp/>are<sp/>simple<sp/>API&apos;s<sp/>to<sp/>retrieve<sp/>file<sp/>information,<sp/>read<sp/>files<sp/>from</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>existing<sp/>archives,<sp/>create<sp/>new<sp/>archives,<sp/>append<sp/>new<sp/>files<sp/>to<sp/>existing<sp/>archives,<sp/>or<sp/>clone<sp/>archive<sp/>data<sp/>from</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>one<sp/>archive<sp/>to<sp/>another.<sp/>It<sp/>supports<sp/>archives<sp/>located<sp/>in<sp/>memory<sp/>or<sp/>the<sp/>heap,<sp/>on<sp/>disk<sp/>(using<sp/>stdio.h),</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>you<sp/>can<sp/>specify<sp/>custom<sp/>file<sp/>read/write<sp/>callbacks.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-<sp/>Archive<sp/>reading:<sp/>Just<sp/>call<sp/>this<sp/>function<sp/>to<sp/>read<sp/>a<sp/>single<sp/>file<sp/>from<sp/>a<sp/>disk<sp/>archive:</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*mz_zip_extract_archive_file_to_heap(const<sp/>char<sp/>*pZip_filename,<sp/>const<sp/>char<sp/>*pArchive_name,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>*pSize,<sp/>mz_uint<sp/>zip_flags);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>For<sp/>more<sp/>complex<sp/>cases,<sp/>use<sp/>the<sp/>&quot;mz_zip_reader&quot;<sp/>functions.<sp/>Upon<sp/>opening<sp/>an<sp/>archive,<sp/>the<sp/>entire<sp/>central</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>directory<sp/>is<sp/>located<sp/>and<sp/>read<sp/>as-is<sp/>into<sp/>memory,<sp/>and<sp/>subsequent<sp/>file<sp/>access<sp/>only<sp/>occurs<sp/>when<sp/>reading<sp/>individual<sp/>files.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-<sp/>Archives<sp/>file<sp/>scanning:<sp/>The<sp/>simple<sp/>way<sp/>is<sp/>to<sp/>use<sp/>this<sp/>function<sp/>to<sp/>scan<sp/>a<sp/>loaded<sp/>archive<sp/>for<sp/>a<sp/>specific<sp/>file:</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>mz_zip_reader_locate_file(mz_zip_archive<sp/>*pZip,<sp/>const<sp/>char<sp/>*pName,<sp/>const<sp/>char<sp/>*pComment,<sp/>mz_uint<sp/>flags);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>locate<sp/>operation<sp/>can<sp/>optionally<sp/>check<sp/>file<sp/>comments<sp/>too,<sp/>which<sp/>(as<sp/>one<sp/>example)<sp/>can<sp/>be<sp/>used<sp/>to<sp/>identify</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>multiple<sp/>versions<sp/>of<sp/>the<sp/>same<sp/>file<sp/>in<sp/>an<sp/>archive.<sp/>This<sp/>function<sp/>uses<sp/>a<sp/>simple<sp/>linear<sp/>search<sp/>through<sp/>the<sp/>central</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>directory,<sp/>so<sp/>it&apos;s<sp/>not<sp/>very<sp/>fast.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Alternately,<sp/>you<sp/>can<sp/>iterate<sp/>through<sp/>all<sp/>the<sp/>files<sp/>in<sp/>an<sp/>archive<sp/>(using<sp/>mz_zip_reader_get_num_files())<sp/>and</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>retrieve<sp/>detailed<sp/>info<sp/>on<sp/>each<sp/>file<sp/>by<sp/>calling<sp/>mz_zip_reader_file_stat().</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-<sp/>Archive<sp/>creation:<sp/>Use<sp/>the<sp/>&quot;mz_zip_writer&quot;<sp/>functions.<sp/>The<sp/>ZIP<sp/>writer<sp/>immediately<sp/>writes<sp/>compressed<sp/>file<sp/>data</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>disk<sp/>and<sp/>builds<sp/>an<sp/>exact<sp/>image<sp/>of<sp/>the<sp/>central<sp/>directory<sp/>in<sp/>memory.<sp/>The<sp/>central<sp/>directory<sp/>image<sp/>is<sp/>written</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>all<sp/>at<sp/>once<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>archive<sp/>file<sp/>when<sp/>the<sp/>archive<sp/>is<sp/>finalized.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>archive<sp/>writer<sp/>can<sp/>optionally<sp/>align<sp/>each<sp/>file&apos;s<sp/>local<sp/>header<sp/>and<sp/>file<sp/>data<sp/>to<sp/>any<sp/>power<sp/>of<sp/>2<sp/>alignment,</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>which<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>the<sp/>archive<sp/>will<sp/>be<sp/>read<sp/>from<sp/>optical<sp/>media.<sp/>Also,<sp/>the<sp/>writer<sp/>supports<sp/>placing</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arbitrary<sp/>data<sp/>blobs<sp/>at<sp/>the<sp/>very<sp/>beginning<sp/>of<sp/>ZIP<sp/>archives.<sp/>Archives<sp/>written<sp/>using<sp/>either<sp/>feature<sp/>are<sp/>still</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>readable<sp/>by<sp/>any<sp/>ZIP<sp/>tool.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-<sp/>Archive<sp/>appending:<sp/>The<sp/>simple<sp/>way<sp/>to<sp/>add<sp/>a<sp/>single<sp/>file<sp/>to<sp/>an<sp/>archive<sp/>is<sp/>to<sp/>call<sp/>this<sp/>function:</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mz_bool<sp/>mz_zip_add_mem_to_archive_file_in_place(const<sp/>char<sp/>*pZip_filename,<sp/>const<sp/>char<sp/>*pArchive_name,</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>void<sp/>*pBuf,<sp/>size_t<sp/>buf_size,<sp/>const<sp/>void<sp/>*pComment,<sp/>mz_uint16<sp/>comment_size,<sp/>mz_uint<sp/>level_and_flags);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>archive<sp/>will<sp/>be<sp/>created<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>already<sp/>exist,<sp/>otherwise<sp/>it&apos;ll<sp/>be<sp/>appended<sp/>to.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Note<sp/>the<sp/>appending<sp/>is<sp/>done<sp/>in-place<sp/>and<sp/>is<sp/>not<sp/>an<sp/>atomic<sp/>operation,<sp/>so<sp/>if<sp/>something<sp/>goes<sp/>wrong</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>during<sp/>the<sp/>operation<sp/>it&apos;s<sp/>possible<sp/>the<sp/>archive<sp/>could<sp/>be<sp/>left<sp/>without<sp/>a<sp/>central<sp/>directory<sp/>(although<sp/>the<sp/>local</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>file<sp/>headers<sp/>and<sp/>file<sp/>data<sp/>will<sp/>be<sp/>fine,<sp/>so<sp/>the<sp/>archive<sp/>will<sp/>be<sp/>recoverable).</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>For<sp/>more<sp/>complex<sp/>archive<sp/>modification<sp/>scenarios:</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>1.<sp/>The<sp/>safest<sp/>way<sp/>is<sp/>to<sp/>use<sp/>a<sp/>mz_zip_reader<sp/>to<sp/>read<sp/>the<sp/>existing<sp/>archive,<sp/>cloning<sp/>only<sp/>those<sp/>bits<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>preserve<sp/>into<sp/>a<sp/>new<sp/>archive<sp/>using<sp/>using<sp/>the<sp/>mz_zip_writer_add_from_zip_reader()<sp/>function<sp/>(which<sp/>compiles<sp/>the</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compressed<sp/>file<sp/>data<sp/>as-is).<sp/>When<sp/>you&apos;re<sp/>done,<sp/>delete<sp/>the<sp/>old<sp/>archive<sp/>and<sp/>rename<sp/>the<sp/>newly<sp/>written<sp/>archive,<sp/>and</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>you&apos;re<sp/>done.<sp/>This<sp/>is<sp/>safe<sp/>but<sp/>requires<sp/>a<sp/>bunch<sp/>of<sp/>temporary<sp/>disk<sp/>space<sp/>or<sp/>heap<sp/>memory.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>2.<sp/>Or,<sp/>you<sp/>can<sp/>convert<sp/>an<sp/>mz_zip_reader<sp/>in-place<sp/>to<sp/>an<sp/>mz_zip_writer<sp/>using<sp/>mz_zip_writer_init_from_reader(),</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>append<sp/>new<sp/>files<sp/>as<sp/>needed,<sp/>then<sp/>finalize<sp/>the<sp/>archive<sp/>which<sp/>will<sp/>write<sp/>an<sp/>updated<sp/>central<sp/>directory<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>original<sp/>archive.<sp/>(This<sp/>is<sp/>basically<sp/>what<sp/>mz_zip_add_mem_to_archive_file_in_place()<sp/>does.)<sp/>There&apos;s<sp/>a</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>possibility<sp/>that<sp/>the<sp/>archive&apos;s<sp/>central<sp/>directory<sp/>could<sp/>be<sp/>lost<sp/>with<sp/>this<sp/>method<sp/>if<sp/>anything<sp/>goes<sp/>wrong,<sp/>though.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-<sp/>ZIP<sp/>archive<sp/>support<sp/>limitations:</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>No<sp/>zip64<sp/>or<sp/>spanning<sp/>support.<sp/>Extraction<sp/>functions<sp/>can<sp/>only<sp/>handle<sp/>unencrypted,<sp/>stored<sp/>or<sp/>deflated<sp/>files.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Requires<sp/>streams<sp/>capable<sp/>of<sp/>seeking.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>a<sp/>header<sp/>file<sp/>library,<sp/>like<sp/>stb_image.c.<sp/>To<sp/>get<sp/>only<sp/>a<sp/>header<sp/>file,<sp/>either<sp/>cut<sp/>and<sp/>paste<sp/>the</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>below<sp/>header,<sp/>or<sp/>create<sp/>miniz.h,<sp/>#define<sp/>MINIZ_HEADER_FILE_ONLY,<sp/>and<sp/>then<sp/>include<sp/>miniz.c<sp/>from<sp/>it.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Important:<sp/>For<sp/>best<sp/>perf.<sp/>be<sp/>sure<sp/>to<sp/>customize<sp/>the<sp/>below<sp/>macros<sp/>for<sp/>your<sp/>target<sp/>platform:</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>#define<sp/>MINIZ_USE_UNALIGNED_LOADS_AND_STORES<sp/>1</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>#define<sp/>MINIZ_LITTLE_ENDIAN<sp/>1</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>#define<sp/>MINIZ_HAS_64BIT_REGISTERS<sp/>1</highlight></codeline>
<codeline lineno="108"><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*<sp/>On<sp/>platforms<sp/>using<sp/>glibc,<sp/>Be<sp/>sure<sp/>to<sp/>&quot;#define<sp/>_LARGEFILE64_SOURCE<sp/>1&quot;<sp/>before<sp/>including<sp/>miniz.c<sp/>to<sp/>ensure<sp/>miniz</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uses<sp/>the<sp/>64-bit<sp/>variants:<sp/>fopen64(),<sp/>stat64(),<sp/>etc.<sp/>Otherwise<sp/>you<sp/>won&apos;t<sp/>be<sp/>able<sp/>to<sp/>process<sp/>large<sp/>files</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(i.e.<sp/>32-bit<sp/>stat()<sp/>fails<sp/>for<sp/>me<sp/>on<sp/>files<sp/>&gt;<sp/>0x7FFFFFFF<sp/>bytes).</highlight></codeline>
<codeline lineno="112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defines<sp/>to<sp/>completely<sp/>disable<sp/>specific<sp/>portions<sp/>of<sp/>miniz.c:<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>If<sp/>all<sp/>macros<sp/>here<sp/>are<sp/>defined<sp/>the<sp/>only<sp/>functionality<sp/>remaining<sp/>will<sp/>be<sp/>CRC-32,<sp/>adler-32,<sp/>tinfl,<sp/>and<sp/>tdefl.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_STDIO<sp/>to<sp/>disable<sp/>all<sp/>usage<sp/>and<sp/>any<sp/>functions<sp/>which<sp/>rely<sp/>on<sp/>stdio<sp/>for<sp/>file<sp/>I/O.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_STDIO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>MINIZ_NO_TIME<sp/>is<sp/>specified<sp/>then<sp/>the<sp/>ZIP<sp/>archive<sp/>functions<sp/>will<sp/>not<sp/>be<sp/>able<sp/>to<sp/>get<sp/>the<sp/>current<sp/>time,<sp/>or<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get/set<sp/>file<sp/>times,<sp/>and<sp/>the<sp/>C<sp/>run-time<sp/>funcs<sp/>that<sp/>get/set<sp/>times<sp/>won&apos;t<sp/>be<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>current<sp/>downside<sp/>is<sp/>the<sp/>times<sp/>written<sp/>to<sp/>your<sp/>archives<sp/>will<sp/>be<sp/>from<sp/>1979.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_TIME<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_ARCHIVE_APIS<sp/>to<sp/>disable<sp/>all<sp/>ZIP<sp/>archive<sp/>API&apos;s.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_ARCHIVE_APIS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_ARCHIVE_WRITING_APIS<sp/>to<sp/>disable<sp/>all<sp/>writing<sp/>related<sp/>ZIP<sp/>archive<sp/>API&apos;s.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_ARCHIVE_WRITING_APIS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_ZLIB_APIS<sp/>to<sp/>remove<sp/>all<sp/>ZLIB-style<sp/>compression/decompression<sp/>API&apos;s.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_ZLIB_APIS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_ZLIB_COMPATIBLE_NAME<sp/>to<sp/>disable<sp/>zlib<sp/>names,<sp/>to<sp/>prevent<sp/>conflicts<sp/>against<sp/>stock<sp/>zlib.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_ZLIB_COMPATIBLE_NAMES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_MALLOC<sp/>to<sp/>disable<sp/>all<sp/>calls<sp/>to<sp/>malloc,<sp/>free,<sp/>and<sp/>realloc.<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>if<sp/>MINIZ_NO_MALLOC<sp/>is<sp/>defined<sp/>then<sp/>the<sp/>user<sp/>must<sp/>always<sp/>provide<sp/>custom<sp/>user<sp/>alloc/free/realloc</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>callbacks<sp/>to<sp/>the<sp/>zlib<sp/>and<sp/>archive<sp/>API&apos;s,<sp/>and<sp/>a<sp/>few<sp/>stand-alone<sp/>helper<sp/>API&apos;s<sp/>which<sp/>don&apos;t<sp/>provide<sp/>custom<sp/>user</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>functions<sp/>(such<sp/>as<sp/>tdefl_compress_mem_to_heap()<sp/>and<sp/>tinfl_decompress_mem_to_heap())<sp/>won&apos;t<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>MINIZ_NO_MALLOC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__TINYC__)<sp/>&amp;&amp;<sp/>(defined(__linux)<sp/>||<sp/>defined(__linux__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Work<sp/>around<sp/>&quot;error:<sp/>include<sp/>file<sp/>&apos;sys\utime.h&apos;<sp/>when<sp/>compiling<sp/>with<sp/>tcc<sp/>on<sp/>Linux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINIZ_NO_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MINIZ_NO_TIME)<sp/>&amp;&amp;<sp/>!defined(MINIZ_NO_ARCHIVE_APIS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_M_IX86)<sp/>||<sp/>defined(_M_X64)<sp/>||<sp/>defined(__i386__)<sp/>||<sp/>defined(__i386)<sp/>||<sp/>defined(__i486__)<sp/>||<sp/>defined(__i486)<sp/>||<sp/>defined(i386)<sp/>||<sp/>defined(__ia64__)<sp/>||<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MINIZ_X86_OR_X64_CPU<sp/>is<sp/>only<sp/>used<sp/>to<sp/>help<sp/>set<sp/>the<sp/>below<sp/>macros.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINIZ_X86_OR_X64_CPU<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__BYTE_ORDER__<sp/>==<sp/>__ORDER_LITTLE_ENDIAN__)<sp/>||<sp/>MINIZ_X86_OR_X64_CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>MINIZ_LITTLE_ENDIAN<sp/>to<sp/>1<sp/>if<sp/>the<sp/>processor<sp/>is<sp/>little<sp/>endian.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="miniz_8h_1aad490130f6d5ff67357e3ad3038858c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINIZ_LITTLE_ENDIAN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MINIZ_X86_OR_X64_CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>MINIZ_USE_UNALIGNED_LOADS_AND_STORES<sp/>to<sp/>1<sp/>on<sp/>CPU&apos;s<sp/>that<sp/>permit<sp/>efficient<sp/>integer<sp/>loads<sp/>and<sp/>stores<sp/>from<sp/>unaligned<sp/>addresses.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINIZ_USE_UNALIGNED_LOADS_AND_STORES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_M_X64)<sp/>||<sp/>defined(_WIN64)<sp/>||<sp/>defined(__MINGW64__)<sp/>||<sp/>defined(_LP64)<sp/>||<sp/>defined(__LP64__)<sp/>||<sp/>defined(__ia64__)<sp/>||<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>MINIZ_HAS_64BIT_REGISTERS<sp/>to<sp/>1<sp/>if<sp/>operations<sp/>on<sp/>64-bit<sp/>integers<sp/>are<sp/>reasonably<sp/>fast<sp/>(and<sp/>don&apos;t<sp/>involve<sp/>compiler<sp/>generated<sp/>calls<sp/>to<sp/>helper<sp/>functions).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINIZ_HAS_64BIT_REGISTERS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>zlib-style<sp/>API<sp/>Definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>more<sp/>compatibility<sp/>with<sp/>zlib,<sp/>miniz.c<sp/>uses<sp/>unsigned<sp/>long<sp/>for<sp/>some<sp/>parameters/struct<sp/>members.<sp/>Beware:<sp/>mz_ulong<sp/>can<sp/>be<sp/>either<sp/>32<sp/>or<sp/>64-bits!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a01ae29d9e32fb57d42d52fb83f3fb8e8" kindref="member">mz_ulong</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_free()<sp/>internally<sp/>uses<sp/>the<sp/>MZ_FREE()<sp/>macro<sp/>(which<sp/>by<sp/>default<sp/>calls<sp/>free()<sp/>unless<sp/>you&apos;ve<sp/>modified<sp/>the<sp/>MZ_MALLOC<sp/>macro)<sp/>to<sp/>release<sp/>a<sp/>block<sp/>allocated<sp/>from<sp/>the<sp/>heap.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a7bdc0af59e4ca6d7bd8b7d5d005ff55e" kindref="member">mz_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="miniz_8h_1a4d8a6ee7365a49c7a25251e1dbebdd2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_ADLER32_INIT<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_adler32()<sp/>returns<sp/>the<sp/>initial<sp/>adler-32<sp/>value<sp/>to<sp/>use<sp/>when<sp/>called<sp/>with<sp/>ptr==NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">mz_ulong<sp/><ref refid="miniz_8h_1a094d181afc4c98dc1864f6ce7d636258" kindref="member">mz_adler32</ref>(mz_ulong<sp/>adler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="miniz_8h_1a4e28761db3f5f136f790563dd13a08d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_CRC32_INIT<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_crc32()<sp/>returns<sp/>the<sp/>initial<sp/>CRC-32<sp/>value<sp/>to<sp/>use<sp/>when<sp/>called<sp/>with<sp/>ptr==NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">mz_ulong<sp/><ref refid="miniz_8h_1acd660cec3b02f8ba7416d04934a41e6f" kindref="member">mz_crc32</ref>(mz_ulong<sp/>crc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compression<sp/>strategies.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202" refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a96891a5aa5d03f61da7f4a9c5b94f1d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a96891a5aa5d03f61da7f4a9c5b94f1d5" kindref="member">MZ_DEFAULT_STRATEGY</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="203" refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a0419e718926687394bbc0d18d12068f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a0419e718926687394bbc0d18d12068f6" kindref="member">MZ_FILTERED</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="204" refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5abb43b8c09f8d8dddd644893a8a6a3ae8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5abb43b8c09f8d8dddd644893a8a6a3ae8" kindref="member">MZ_HUFFMAN_ONLY</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="205" refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5ab22de2edae7b989e35120a84e1ffff3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5ab22de2edae7b989e35120a84e1ffff3e" kindref="member">MZ_RLE</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="206" refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a3fe6f0f5a44a41155ec4022b6c85b5a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a99fb83031ce9923c84392b4e92f956b5a3fe6f0f5a44a41155ec4022b6c85b5a9" kindref="member">MZ_FIXED</ref><sp/>=<sp/>4</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="miniz_8h_1a3e92e9b3cc525db1fd503d9630ec1bf5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_DEFLATED<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Heap<sp/>allocation<sp/>callbacks.</highlight></codeline>
<codeline lineno="213"><highlight class="comment">Note<sp/>that<sp/>mz_alloc_func<sp/>parameter<sp/>types<sp/>purpsosely<sp/>differ<sp/>from<sp/>zlib&apos;s:<sp/>items/size<sp/>is<sp/>size_t,<sp/>not<sp/>unsigned<sp/>long.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="miniz_8h_1a8145a3e9c9fac12ec4089a6e39ba9f4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*mz_alloc_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="215" refid="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(*<ref refid="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" kindref="member">mz_free_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address);</highlight></codeline>
<codeline lineno="216" refid="miniz_8h_1a9adc24aaf31eeb77293ebdb97ab6463c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*mz_realloc_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compression<sp/>levels:<sp/>0-9<sp/>are<sp/>the<sp/>standard<sp/>zlib-style<sp/>levels,<sp/>10<sp/>is<sp/>best<sp/>possible<sp/>compression<sp/>(not<sp/>zlib<sp/>compatible,<sp/>and<sp/>may<sp/>be<sp/>very<sp/>slow),<sp/>MZ_DEFAULT_COMPRESSION=MZ_DEFAULT_LEVEL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a4f66327d56ffc5b2c79fce1daf25ded5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a4f66327d56ffc5b2c79fce1daf25ded5" kindref="member">MZ_NO_COMPRESSION</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="222" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a3ef4372349b755bf55e8f9e367d46dd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a3ef4372349b755bf55e8f9e367d46dd3" kindref="member">MZ_BEST_SPEED</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="223" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ac8ff4999153f2b5565650037b268cdff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ac8ff4999153f2b5565650037b268cdff" kindref="member">MZ_BEST_COMPRESSION</ref><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="224" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a54ec4bb3bd4e6ae21180b27a73c46147" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04a54ec4bb3bd4e6ae21180b27a73c46147" kindref="member">MZ_UBER_COMPRESSION</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="225" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ab5dc326a9f034dc71d6012d86dd1343f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04ab5dc326a9f034dc71d6012d86dd1343f" kindref="member">MZ_DEFAULT_LEVEL</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="226" refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04aceaa50dfb8809ffd1631b0fe01344279" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc6126af1d45847bc59afa0aa3216b04aceaa50dfb8809ffd1631b0fe01344279" kindref="member">MZ_DEFAULT_COMPRESSION</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="227"><highlight class="normal">};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="miniz_8h_1a69229ba2b86a229226516575d1a458c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VERSION<sp/>&quot;10.0.0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="miniz_8h_1ada760edfdc8e8f93c2b6ce340096cb9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VERNUM<sp/>0xA000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="miniz_8h_1a60a85972478e0df3572242ff915f6613" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VER_MAJOR<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="miniz_8h_1aebc5ecb9bc366efc5de653c005a06fe1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VER_MINOR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="miniz_8h_1af685fd946d23a6eea4705d5830bb10d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VER_REVISION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="miniz_8h_1ac78dfe8be78df919afad8d29c19264f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_VER_SUBREVISION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_ZLIB_APIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flush<sp/>values.<sp/>For<sp/>typical<sp/>usage<sp/>you<sp/>only<sp/>need<sp/>MZ_NO_FLUSH<sp/>and<sp/>MZ_FINISH.<sp/>The<sp/>other<sp/>values<sp/>are<sp/>for<sp/>advanced<sp/>use<sp/>(refer<sp/>to<sp/>the<sp/>zlib<sp/>docs).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06cae54d4f5ccd64bd2e36d28d7e637894ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06cae54d4f5ccd64bd2e36d28d7e637894ab" kindref="member">MZ_NO_FLUSH</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="242" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06caa074139e59dc5aba5f6461ab5cfaee8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06caa074139e59dc5aba5f6461ab5cfaee8f" kindref="member">MZ_PARTIAL_FLUSH</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="243" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca1a77ad21e37d528c658b024642f347bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca1a77ad21e37d528c658b024642f347bb" kindref="member">MZ_SYNC_FLUSH</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="244" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca56a3093215e393a178218f7bb04bd079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca56a3093215e393a178218f7bb04bd079" kindref="member">MZ_FULL_FLUSH</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="245" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca8c1ad84176153047845d17c151097124" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca8c1ad84176153047845d17c151097124" kindref="member">MZ_FINISH</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="246" refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca2916cea538a7b77a7638857b40bf31af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1adc29c2ff13d900c2f185ee95427fb06ca2916cea538a7b77a7638857b40bf31af" kindref="member">MZ_BLOCK</ref><sp/>=<sp/>5</highlight></codeline>
<codeline lineno="247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>status<sp/>codes.<sp/>MZ_PARAM_ERROR<sp/>is<sp/>non-standard.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac889ce55af78ff1376747e2e52b8e7e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac889ce55af78ff1376747e2e52b8e7e3" kindref="member">MZ_OK</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="253" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea9e82839e613eba20eb822b780eb4c312" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea9e82839e613eba20eb822b780eb4c312" kindref="member">MZ_STREAM_END</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="254" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8cabf17fbb841935d0bfb626ce61814d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8cabf17fbb841935d0bfb626ce61814d" kindref="member">MZ_NEED_DICT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="255" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac7325ec0656a65e1b12861c5b97be96b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eac7325ec0656a65e1b12861c5b97be96b" kindref="member">MZ_ERRNO</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="256" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae1066da08adca98d4715701158591c50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae1066da08adca98d4715701158591c50" kindref="member">MZ_STREAM_ERROR</ref><sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="257" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae4f65fd7767379614da35ab5c43ad77d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eae4f65fd7767379614da35ab5c43ad77d" kindref="member">MZ_DATA_ERROR</ref><sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="258" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea00c3c60b8c4dd75a5f19ed84aebc519b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea00c3c60b8c4dd75a5f19ed84aebc519b" kindref="member">MZ_MEM_ERROR</ref><sp/>=<sp/>-4,</highlight></codeline>
<codeline lineno="259" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eada9fc0699137425d9e993b3a91eb2b52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9eada9fc0699137425d9e993b3a91eb2b52" kindref="member">MZ_BUF_ERROR</ref><sp/>=<sp/>-5,</highlight></codeline>
<codeline lineno="260" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8f0080210beb22cd8cc6e4fca5e5f2f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea8f0080210beb22cd8cc6e4fca5e5f2f4" kindref="member">MZ_VERSION_ERROR</ref><sp/>=<sp/>-6,</highlight></codeline>
<codeline lineno="261" refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea6bc32d182dcf344e4921fcb604abc35e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a61dadd085c1777f559549e05962b2c9ea6bc32d182dcf344e4921fcb604abc35e" kindref="member">MZ_PARAM_ERROR</ref><sp/>=<sp/>-10000</highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Window<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="miniz_8h_1a6027b7b919794d9e1f1852f075d0cbb6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_DEFAULT_WINDOW_BITS<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mz_internal_state;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compression/decompression<sp/>stream<sp/>struct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="structmz__stream__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmz__stream__s" kindref="compound">mz_stream_s</ref></highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272" refid="structmz__stream__s_1aa75ed42cc83b0f74d7fcce6299439307" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmz__stream__s_1aa75ed42cc83b0f74d7fcce6299439307" kindref="member">next_in</ref>;<sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>next<sp/>byte<sp/>to<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="structmz__stream__s_1aafcd4c220622ede6d54015f1fbdadd9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmz__stream__s_1aafcd4c220622ede6d54015f1fbdadd9e" kindref="member">avail_in</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>at<sp/>next_in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="structmz__stream__s_1abfa083eb7707360c33389ec12fadf376" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mz_ulong<sp/><ref refid="structmz__stream__s_1abfa083eb7707360c33389ec12fadf376" kindref="member">total_in</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>bytes<sp/>consumed<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="structmz__stream__s_1a2c569383efce3b9d9e7c02e3e03941bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmz__stream__s_1a2c569383efce3b9d9e7c02e3e03941bc" kindref="member">next_out</ref>;<sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>next<sp/>byte<sp/>to<sp/>write<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="structmz__stream__s_1a9092fed61f7be520fb1bbcf152905ee8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmz__stream__s_1a9092fed61f7be520fb1bbcf152905ee8" kindref="member">avail_out</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>can<sp/>be<sp/>written<sp/>to<sp/>next_out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="structmz__stream__s_1a5cf2c15cc49a99ee7d541375798a3e27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mz_ulong<sp/><ref refid="structmz__stream__s_1a5cf2c15cc49a99ee7d541375798a3e27" kindref="member">total_out</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>bytes<sp/>produced<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="structmz__stream__s_1ad4095b25455e382787dc06d20157e05f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmz__stream__s_1ad4095b25455e382787dc06d20157e05f" kindref="member">msg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>msg<sp/>(unused)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="structmz__stream__s_1a935cdb239d37161b5a5e6eda1e047df6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mz_internal_state<sp/>*<ref refid="structmz__stream__s_1a935cdb239d37161b5a5e6eda1e047df6" kindref="member">state</ref>;<sp/></highlight><highlight class="comment">/*<sp/>internal<sp/>state,<sp/>allocated<sp/>by<sp/>zalloc/zfree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="structmz__stream__s_1abbd8109a7f88713f39b9e3046a223ef2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a8145a3e9c9fac12ec4089a6e39ba9f4f" kindref="member">mz_alloc_func</ref><sp/><ref refid="structmz__stream__s_1abbd8109a7f88713f39b9e3046a223ef2" kindref="member">zalloc</ref>;<sp/></highlight><highlight class="comment">/*<sp/>optional<sp/>heap<sp/>allocation<sp/>function<sp/>(defaults<sp/>to<sp/>malloc)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="structmz__stream__s_1a55dbac0e9b86472bfa41f86dfb35df9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" kindref="member">mz_free_func</ref><sp/><ref refid="structmz__stream__s_1a55dbac0e9b86472bfa41f86dfb35df9a" kindref="member">zfree</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optional<sp/>heap<sp/>free<sp/>function<sp/>(defaults<sp/>to<sp/>free)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="structmz__stream__s_1a31c21928246598992a5cce6d20ae7e78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmz__stream__s_1a31c21928246598992a5cce6d20ae7e78" kindref="member">opaque</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>heap<sp/>alloc<sp/>function<sp/>user<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="structmz__stream__s_1a3e1503f72464a3b7b40d1df232ba9f43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmz__stream__s_1a3e1503f72464a3b7b40d1df232ba9f43" kindref="member">data_type</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data_type<sp/>(unused)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="structmz__stream__s_1a24c6cf42b5b6a655f4664dd15203dce7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mz_ulong<sp/><ref refid="structmz__stream__s_1a24c6cf42b5b6a655f4664dd15203dce7" kindref="member">adler</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>adler32<sp/>of<sp/>the<sp/>source<sp/>or<sp/>uncompressed<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="structmz__stream__s_1ae4fc708fffee7b10a4586964401613fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mz_ulong<sp/><ref refid="structmz__stream__s_1ae4fc708fffee7b10a4586964401613fb" kindref="member">reserved</ref>;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}<sp/><ref refid="miniz_8h_1a978e823669e60e8d4d8d89d9b58f1c87" kindref="member">mz_stream</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structmz__stream__s" kindref="compound">mz_stream</ref><sp/>*<ref refid="miniz_8h_1aeb3235f9c8a7803ef846d6e6d7eed986" kindref="member">mz_streamp</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>version<sp/>string<sp/>of<sp/>miniz.c.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a3d5d232e407e113f68859c17212526cb" kindref="member">mz_version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_deflateInit()<sp/>initializes<sp/>a<sp/>compressor<sp/>with<sp/>default<sp/>options:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parameters:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>pStream<sp/>must<sp/>point<sp/>to<sp/>an<sp/>initialized<sp/>mz_stream<sp/>struct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>level<sp/>must<sp/>be<sp/>between<sp/>[MZ_NO_COMPRESSION,<sp/>MZ_BEST_COMPRESSION].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>level<sp/>1<sp/>enables<sp/>a<sp/>specially<sp/>optimized<sp/>compression<sp/>function<sp/>that&apos;s<sp/>been<sp/>optimized<sp/>purely<sp/>for<sp/>performance,<sp/>not<sp/>ratio.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>(This<sp/>special<sp/>func.<sp/>is<sp/>currently<sp/>only<sp/>enabled<sp/>when<sp/>MINIZ_USE_UNALIGNED_LOADS_AND_STORES<sp/>and<sp/>MINIZ_LITTLE_ENDIAN<sp/>are<sp/>defined.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>values:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_OK<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>bogus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_PARAM_ERROR<sp/>if<sp/>the<sp/>input<sp/>parameters<sp/>are<sp/>bogus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_MEM_ERROR<sp/>on<sp/>out<sp/>of<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a69f53f93ea50410b674721408b2aff24" kindref="member">mz_deflateInit</ref>(mz_streamp<sp/>pStream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_deflateInit2()<sp/>is<sp/>like<sp/>mz_deflate(),<sp/>except<sp/>with<sp/>more<sp/>control:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Additional<sp/>parameters:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>method<sp/>must<sp/>be<sp/>MZ_DEFLATED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>window_bits<sp/>must<sp/>be<sp/>MZ_DEFAULT_WINDOW_BITS<sp/>(to<sp/>wrap<sp/>the<sp/>deflate<sp/>stream<sp/>with<sp/>zlib<sp/>header/adler-32<sp/>footer)<sp/>or<sp/>-MZ_DEFAULT_WINDOW_BITS<sp/>(raw<sp/>deflate/no<sp/>header<sp/>or<sp/>footer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>mem_level<sp/>must<sp/>be<sp/>between<sp/>[1,<sp/>9]<sp/>(it&apos;s<sp/>checked<sp/>but<sp/>ignored<sp/>by<sp/>miniz.c)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a66d75d30383d1b7af379b7d19db3aba0" kindref="member">mz_deflateInit2</ref>(mz_streamp<sp/>pStream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mem_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Quickly<sp/>resets<sp/>a<sp/>compressor<sp/>without<sp/>having<sp/>to<sp/>reallocate<sp/>anything.<sp/>Same<sp/>as<sp/>calling<sp/>mz_deflateEnd()<sp/>followed<sp/>by<sp/>mz_deflateInit()/mz_deflateInit2().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a2632b66b8e67b1482f24dff4d4b65e8c" kindref="member">mz_deflateReset</ref>(mz_streamp<sp/>pStream);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_deflate()<sp/>compresses<sp/>the<sp/>input<sp/>to<sp/>output,<sp/>consuming<sp/>as<sp/>much<sp/>of<sp/>the<sp/>input<sp/>and<sp/>producing<sp/>as<sp/>much<sp/>output<sp/>as<sp/>possible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parameters:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>pStream<sp/>is<sp/>the<sp/>stream<sp/>to<sp/>read<sp/>from<sp/>and<sp/>write<sp/>to.<sp/>You<sp/>must<sp/>initialize/update<sp/>the<sp/>next_in,<sp/>avail_in,<sp/>next_out,<sp/>and<sp/>avail_out<sp/>members.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>flush<sp/>may<sp/>be<sp/>MZ_NO_FLUSH,<sp/>MZ_PARTIAL_FLUSH/MZ_SYNC_FLUSH,<sp/>MZ_FULL_FLUSH,<sp/>or<sp/>MZ_FINISH.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>values:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_OK<sp/>on<sp/>success<sp/>(when<sp/>flushing,<sp/>or<sp/>if<sp/>more<sp/>input<sp/>is<sp/>needed<sp/>but<sp/>not<sp/>available,<sp/>and/or<sp/>there&apos;s<sp/>more<sp/>output<sp/>to<sp/>be<sp/>written<sp/>but<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_STREAM_END<sp/>if<sp/>all<sp/>input<sp/>has<sp/>been<sp/>consumed<sp/>and<sp/>all<sp/>output<sp/>bytes<sp/>have<sp/>been<sp/>written.<sp/>Don&apos;t<sp/>call<sp/>mz_deflate()<sp/>on<sp/>the<sp/>stream<sp/>anymore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>bogus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_PARAM_ERROR<sp/>if<sp/>one<sp/>of<sp/>the<sp/>parameters<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_BUF_ERROR<sp/>if<sp/>no<sp/>forward<sp/>progress<sp/>is<sp/>possible<sp/>because<sp/>the<sp/>input<sp/>and/or<sp/>output<sp/>buffers<sp/>are<sp/>empty.<sp/>(Fill<sp/>up<sp/>the<sp/>input<sp/>buffer<sp/>or<sp/>free<sp/>up<sp/>some<sp/>output<sp/>space<sp/>and<sp/>try<sp/>again.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab843b570ebaeb31d801a5414260edeaf" kindref="member">mz_deflate</ref>(mz_streamp<sp/>pStream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_deflateEnd()<sp/>deinitializes<sp/>a<sp/>compressor:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>values:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_OK<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MZ_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>bogus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a36e2a62c4a31c1b7f8b51da8cffd7281" kindref="member">mz_deflateEnd</ref>(mz_streamp<sp/>pStream);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_deflateBound()<sp/>returns<sp/>a<sp/>(very)<sp/>conservative<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>amount<sp/>of<sp/>data<sp/>that<sp/>could<sp/>be<sp/>generated<sp/>by<sp/>deflate(),<sp/>assuming<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>only<sp/>MZ_NO_FLUSH<sp/>or<sp/>MZ_FINISH.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">mz_ulong<sp/><ref refid="miniz_8h_1acd123a509ce06edd3a97506622873102" kindref="member">mz_deflateBound</ref>(mz_streamp<sp/>pStream,<sp/>mz_ulong<sp/>source_len);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Single-call<sp/>compression<sp/>functions<sp/>mz_compress()<sp/>and<sp/>mz_compress2():<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>MZ_OK<sp/>on<sp/>success,<sp/>or<sp/>one<sp/>of<sp/>the<sp/>error<sp/>codes<sp/>from<sp/>mz_deflate()<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a2e39a706e4a41c7168983f7e7c2e1a1d" kindref="member">mz_compress</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pDest,<sp/>mz_ulong<sp/>*pDest_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pSource,<sp/>mz_ulong<sp/>source_len);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a7a7b50a0d965d229ce14f3afa5981edd" kindref="member">mz_compress2</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pDest,<sp/>mz_ulong<sp/>*pDest_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pSource,<sp/>mz_ulong<sp/>source_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_compressBound()<sp/>returns<sp/>a<sp/>(very)<sp/>conservative<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>amount<sp/>of<sp/>data<sp/>that<sp/>could<sp/>be<sp/>generated<sp/>by<sp/>calling<sp/>mz_compress().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">mz_ulong<sp/><ref refid="miniz_8h_1a3046aad784a296b0064530b4b98f5adb" kindref="member">mz_compressBound</ref>(mz_ulong<sp/>source_len);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>a<sp/>decompressor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a2cd16abe6e673d9f98d98ae81c2d7c52" kindref="member">mz_inflateInit</ref>(mz_streamp<sp/>pStream);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_inflateInit2()<sp/>is<sp/>like<sp/>mz_inflateInit()<sp/>with<sp/>an<sp/>additional<sp/>option<sp/>that<sp/>controls<sp/>the<sp/>window<sp/>size<sp/>and<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>stream<sp/>has<sp/>been<sp/>wrapped<sp/>with<sp/>a<sp/>zlib<sp/>header/footer:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>window_bits<sp/>must<sp/>be<sp/>MZ_DEFAULT_WINDOW_BITS<sp/>(to<sp/>parse<sp/>zlib<sp/>header/footer)<sp/>or<sp/>-MZ_DEFAULT_WINDOW_BITS<sp/>(raw<sp/>deflate).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a95babde50d211fa1d2401e70516d2e93" kindref="member">mz_inflateInit2</ref>(mz_streamp<sp/>pStream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_bits);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decompresses<sp/>the<sp/>input<sp/>stream<sp/>to<sp/>the<sp/>output,<sp/>consuming<sp/>only<sp/>as<sp/>much<sp/>of<sp/>the<sp/>input<sp/>as<sp/>needed,<sp/>and<sp/>writing<sp/>as<sp/>much<sp/>to<sp/>the<sp/>output<sp/>as<sp/>possible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parameters:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>pStream<sp/>is<sp/>the<sp/>stream<sp/>to<sp/>read<sp/>from<sp/>and<sp/>write<sp/>to.<sp/>You<sp/>must<sp/>initialize/update<sp/>the<sp/>next_in,<sp/>avail_in,<sp/>next_out,<sp/>and<sp/>avail_out<sp/>members.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>flush<sp/>may<sp/>be<sp/>MZ_NO_FLUSH,<sp/>MZ_SYNC_FLUSH,<sp/>or<sp/>MZ_FINISH.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>On<sp/>the<sp/>first<sp/>call,<sp/>if<sp/>flush<sp/>is<sp/>MZ_FINISH<sp/>it&apos;s<sp/>assumed<sp/>the<sp/>input<sp/>and<sp/>output<sp/>buffers<sp/>are<sp/>both<sp/>sized<sp/>large<sp/>enough<sp/>to<sp/>decompress<sp/>the<sp/>entire<sp/>stream<sp/>in<sp/>a<sp/>single<sp/>call<sp/>(this<sp/>is<sp/>slightly<sp/>faster).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_FINISH<sp/>implies<sp/>that<sp/>there<sp/>are<sp/>no<sp/>more<sp/>source<sp/>bytes<sp/>available<sp/>beside<sp/>what&apos;s<sp/>already<sp/>in<sp/>the<sp/>input<sp/>buffer,<sp/>and<sp/>that<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>decompressed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>values:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_OK<sp/>on<sp/>success.<sp/>Either<sp/>more<sp/>input<sp/>is<sp/>needed<sp/>but<sp/>not<sp/>available,<sp/>and/or<sp/>there&apos;s<sp/>more<sp/>output<sp/>to<sp/>be<sp/>written<sp/>but<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_STREAM_END<sp/>if<sp/>all<sp/>needed<sp/>input<sp/>has<sp/>been<sp/>consumed<sp/>and<sp/>all<sp/>output<sp/>bytes<sp/>have<sp/>been<sp/>written.<sp/>For<sp/>zlib<sp/>streams,<sp/>the<sp/>adler-32<sp/>of<sp/>the<sp/>decompressed<sp/>data<sp/>has<sp/>also<sp/>been<sp/>verified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>bogus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_DATA_ERROR<sp/>if<sp/>the<sp/>deflate<sp/>stream<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_PARAM_ERROR<sp/>if<sp/>one<sp/>of<sp/>the<sp/>parameters<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MZ_BUF_ERROR<sp/>if<sp/>no<sp/>forward<sp/>progress<sp/>is<sp/>possible<sp/>because<sp/>the<sp/>input<sp/>buffer<sp/>is<sp/>empty<sp/>but<sp/>the<sp/>inflater<sp/>needs<sp/>more<sp/>input<sp/>to<sp/>continue,<sp/>or<sp/>if<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>not<sp/>large<sp/>enough.<sp/>Call<sp/>mz_inflate()<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>with<sp/>more<sp/>input<sp/>data,<sp/>or<sp/>with<sp/>more<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>(except<sp/>when<sp/>using<sp/>single<sp/>call<sp/>decompression,<sp/>described<sp/>above).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a2d5d109e8f992526202122134e092aa1" kindref="member">mz_inflate</ref>(mz_streamp<sp/>pStream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deinitializes<sp/>a<sp/>decompressor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab3074e360c49f66ccd955e6630d23108" kindref="member">mz_inflateEnd</ref>(mz_streamp<sp/>pStream);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Single-call<sp/>decompression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>MZ_OK<sp/>on<sp/>success,<sp/>or<sp/>one<sp/>of<sp/>the<sp/>error<sp/>codes<sp/>from<sp/>mz_inflate()<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1aa0ce62915456b6c5f0bcf1ed09e94599" kindref="member">mz_uncompress</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pDest,<sp/>mz_ulong<sp/>*pDest_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pSource,<sp/>mz_ulong<sp/>source_len);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>string<sp/>description<sp/>of<sp/>the<sp/>specified<sp/>error<sp/>code,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>error<sp/>code<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1ac315062b2450716e20d21843f2022660" kindref="member">mz_error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Redefine<sp/>zlib-compatible<sp/>names<sp/>to<sp/>miniz<sp/>equivalents,<sp/>so<sp/>miniz.c<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>drop-in<sp/>replacement<sp/>for<sp/>the<sp/>subset<sp/>of<sp/>zlib<sp/>that<sp/>miniz.c<sp/>supports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>MINIZ_NO_ZLIB_COMPATIBLE_NAMES<sp/>to<sp/>disable<sp/>zlib-compatibility<sp/>if<sp/>you<sp/>use<sp/>zlib<sp/>in<sp/>the<sp/>same<sp/>project.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_ZLIB_COMPATIBLE_NAMES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="miniz_8h_1ae3a497195d617519e5353ea7b417940f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ae3a497195d617519e5353ea7b417940f" kindref="member">Byte</ref>;</highlight></codeline>
<codeline lineno="386" refid="miniz_8h_1a87d141052bcd5ec8a80812a565c70369" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a87d141052bcd5ec8a80812a565c70369" kindref="member">uInt</ref>;</highlight></codeline>
<codeline lineno="387" refid="miniz_8h_1a5be7d28f32510c107a6ed87144cbcf9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>mz_ulong<sp/><ref refid="miniz_8h_1a5be7d28f32510c107a6ed87144cbcf9a" kindref="member">uLong</ref>;</highlight></codeline>
<codeline lineno="388" refid="miniz_8h_1ac5613fe8160cbbf89d3e470574b755fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Byte<sp/><ref refid="miniz_8h_1ac5613fe8160cbbf89d3e470574b755fb" kindref="member">Bytef</ref>;</highlight></codeline>
<codeline lineno="389" refid="miniz_8h_1a827d5110673ec09ae937156532f7c208" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uInt<sp/><ref refid="miniz_8h_1a827d5110673ec09ae937156532f7c208" kindref="member">uIntf</ref>;</highlight></codeline>
<codeline lineno="390" refid="miniz_8h_1a864fa0e2e4e499038305f3276990689b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a864fa0e2e4e499038305f3276990689b" kindref="member">charf</ref>;</highlight></codeline>
<codeline lineno="391" refid="miniz_8h_1a7c2da1a4711ea1e7cbf3174d4f5dda9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a7c2da1a4711ea1e7cbf3174d4f5dda9b" kindref="member">intf</ref>;</highlight></codeline>
<codeline lineno="392" refid="miniz_8h_1acb723a6acb493e64215f5a0613c11eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1acb723a6acb493e64215f5a0613c11eb4" kindref="member">voidpf</ref>;</highlight></codeline>
<codeline lineno="393" refid="miniz_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uLong<sp/><ref refid="miniz_8h_1ace0e0570092c9eb6acd3c85f88cc97ec" kindref="member">uLongf</ref>;</highlight></codeline>
<codeline lineno="394" refid="miniz_8h_1aef6ee0fd51b4998d5eae9ffe4e44306c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1aef6ee0fd51b4998d5eae9ffe4e44306c" kindref="member">voidp</ref>;</highlight></codeline>
<codeline lineno="395" refid="miniz_8h_1aff7dd941ce5e1aa30ad76fa09845dad3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1aff7dd941ce5e1aa30ad76fa09845dad3" kindref="member">voidpc</ref>;</highlight></codeline>
<codeline lineno="396" refid="miniz_8h_1ad15afa2776b41b2f4d8582dd152bd736" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NULL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="miniz_8h_1ac3b62e37b9922d9496014515acd6083a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_FLUSH<sp/>MZ_NO_FLUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="miniz_8h_1adbd49089a5611593f05ac80c9e12cc7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PARTIAL_FLUSH<sp/>MZ_PARTIAL_FLUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="miniz_8h_1aa32ca175522e0ef314f4dc0b0196bada" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SYNC_FLUSH<sp/>MZ_SYNC_FLUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="miniz_8h_1aed4fbb038c3973aacf52fccffbc44b53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FULL_FLUSH<sp/>MZ_FULL_FLUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="miniz_8h_1a876a626ba14eb12eea4bbf6823b6ca50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FINISH<sp/>MZ_FINISH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="miniz_8h_1a73e5f4c24156c63ba863014396685062" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BLOCK<sp/>MZ_BLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="miniz_8h_1a8cb802b6a11e926478dc6547c514c65c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_OK<sp/>MZ_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="miniz_8h_1a7d94a4a852228a899864a0053162e7a8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_END<sp/>MZ_STREAM_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="miniz_8h_1a32916ba675b2d06463da2576b6a49d64" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NEED_DICT<sp/>MZ_NEED_DICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="miniz_8h_1a3c66d64c427c0337c64e578537478737" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ERRNO<sp/>MZ_ERRNO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="miniz_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_ERROR<sp/>MZ_STREAM_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="miniz_8h_1a9eda83d428a71752d148f38b5dbe04f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DATA_ERROR<sp/>MZ_DATA_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="miniz_8h_1ae2be6be871e377c6e2c25a7296ce320c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MEM_ERROR<sp/>MZ_MEM_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="miniz_8h_1a425e2f0664e1b1f75bf2bffab88d353d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BUF_ERROR<sp/>MZ_BUF_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="miniz_8h_1a7634cdd55f955ee1be99c065c6977371" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_VERSION_ERROR<sp/>MZ_VERSION_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="miniz_8h_1a4a5a2c1bb51d2236fce3395fe1cd43f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PARAM_ERROR<sp/>MZ_PARAM_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="miniz_8h_1a496a4523776bcfa14568cd083b59f24c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_COMPRESSION<sp/>MZ_NO_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="miniz_8h_1ad5222ae19b77c6e83815d07ca5d03fd8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_SPEED<sp/>MZ_BEST_SPEED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="miniz_8h_1a8db83edd9dea51f8cf0afd1727838b95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_COMPRESSION<sp/>MZ_BEST_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="miniz_8h_1af5387baee05124298e431ebe6fe96b17" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_COMPRESSION<sp/>MZ_DEFAULT_COMPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="miniz_8h_1a580d7c2527e653ddd783109271750849" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_STRATEGY<sp/>MZ_DEFAULT_STRATEGY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="miniz_8h_1af01ccb5a9db8d415cde987d9553ad200" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FILTERED<sp/>MZ_FILTERED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="miniz_8h_1a1eec3d3720ba91fd54fa08d2757c1785" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_HUFFMAN_ONLY<sp/>MZ_HUFFMAN_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="miniz_8h_1af52c1220e7193d2da78332d75f9251ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_RLE<sp/>MZ_RLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="miniz_8h_1aaa5c996fbc985d5ec43f99112c0ac4a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FIXED<sp/>MZ_FIXED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="miniz_8h_1a27a96226f3dc88e4743131c632adf32f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFLATED<sp/>MZ_DEFLATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="miniz_8h_1a3ffc2b8c8034c6e80474b0ad988a4ab6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_WINDOW_BITS<sp/>MZ_DEFAULT_WINDOW_BITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="miniz_8h_1a4719a257e0920f8212b267186ea81083" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>alloc_func<sp/>mz_alloc_func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="miniz_8h_1ac18e786dc1c81785889a0f4edc113102" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>free_func<sp/>mz_free_func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="miniz_8h_1adda78bd650173d3f122d5e08162f74c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>internal_state<sp/>mz_internal_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="miniz_8h_1af3b07be31f8bce4acb46a295346a4524" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>z_stream<sp/>mz_stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="miniz_8h_1a5e9d5f0b1abf4368ac4d55b0909dcd99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit<sp/>mz_deflateInit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="miniz_8h_1a5fdefdacf3bc7c8484df6e8b7bd5b2bc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit2<sp/>mz_deflateInit2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="miniz_8h_1acd6a182af06163cb069f9e3a61dbac73" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateReset<sp/>mz_deflateReset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="miniz_8h_1a04be214323e3ae74865fa6f7006a16fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflate<sp/>mz_deflate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="miniz_8h_1a0a4adb4287e6b8f1f239821ee15834b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateEnd<sp/>mz_deflateEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="miniz_8h_1a56f41bdffa865e02ed160ebdc54b5d87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateBound<sp/>mz_deflateBound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="miniz_8h_1adc956d381ef47f4245a043ba7a4e0107" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>compress<sp/>mz_compress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="miniz_8h_1a37a617bb10b3bdd88c9ee229b3cf28e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>compress2<sp/>mz_compress2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="miniz_8h_1a503669573c2a17068ffb1c9a3ca38117" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>compressBound<sp/>mz_compressBound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="miniz_8h_1ad7c0eacb7c7a1117253bd7c76750cc7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflateInit<sp/>mz_inflateInit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="miniz_8h_1aa368ece0cf5d53986442b48accb13c7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflateInit2<sp/>mz_inflateInit2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="miniz_8h_1a7f8d65a874016c75d360b788db194cf5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflate<sp/>mz_inflate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="miniz_8h_1a07976576ebc3fdcbbcc990ad528fc100" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflateEnd<sp/>mz_inflateEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="miniz_8h_1a0a7eedf0dba136b3a92685a8f625b8e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>uncompress<sp/>mz_uncompress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="miniz_8h_1aa020ce787714a140599b55725bf7c657" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>crc32<sp/>mz_crc32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="miniz_8h_1a88899508e9a73aad5db1854cd1cc87d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>adler32<sp/>mz_adler32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="miniz_8h_1abd2f406ac1f9c49236376115d78ccb5b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_WBITS<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="miniz_8h_1a8e9fefb3d20386851ca693946127ab2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MEM_LEVEL<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="miniz_8h_1a55b209baca089467ba378166bb37aac0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zError<sp/>mz_error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="miniz_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERSION<sp/>MZ_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="miniz_8h_1a6413cdfb4cdc0b5a09cf9b5f3f8f48ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERNUM<sp/>MZ_VERNUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="miniz_8h_1a52eec052f38e306d472e75bfafda9608" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_MAJOR<sp/>MZ_VER_MAJOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="miniz_8h_1a82109105b5511ffa8f8373b6a917e1e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_MINOR<sp/>MZ_VER_MINOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="miniz_8h_1ad3662b8749a50045ec1c120354fb7e9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_REVISION<sp/>MZ_VER_REVISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="miniz_8h_1a788ea49a5b65e12b11d7f274542d5af5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VER_SUBREVISION<sp/>MZ_VER_SUBREVISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="miniz_8h_1a47cb947a9520625a49ec8a0eaa8ecf7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zlibVersion<sp/>mz_version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="miniz_8h_1a1f228220c3e6935eb171761c61487059" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zlib_version<sp/>mz_version()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>MINIZ_NO_ZLIB_COMPATIBLE_NAMES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MINIZ_NO_ZLIB_APIS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Types<sp/>and<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref>;</highlight></codeline>
<codeline lineno="470" refid="miniz_8h_1a5a94836eff2f4841bcdd2eb4ea3b8cc4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a5a94836eff2f4841bcdd2eb4ea3b8cc4" kindref="member">mz_int16</ref>;</highlight></codeline>
<codeline lineno="471" refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref>;</highlight></codeline>
<codeline lineno="472" refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref>;</highlight></codeline>
<codeline lineno="473" refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref>;</highlight></codeline>
<codeline lineno="474" refid="miniz_8h_1a49738d6efcd5ee0779fee9582fb3ebfa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="miniz_8h_1a49738d6efcd5ee0779fee9582fb3ebfa" kindref="member">mz_int64</ref>;</highlight></codeline>
<codeline lineno="475" refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref>;</highlight></codeline>
<codeline lineno="476" refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="miniz_8h_1a2b9e8f947197031a80d85b60d4e59449" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FALSE<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="miniz_8h_1aef00c8f99445949d239115e8f74618a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_TRUE<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Works<sp/>around<sp/>MSVC&apos;s<sp/>spammy<sp/>&quot;warning<sp/>C4127:<sp/>conditional<sp/>expression<sp/>is<sp/>constant&quot;<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MACRO_END<sp/>while<sp/>(0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="miniz_8h_1a704d9384ffb047ede84426d173b656e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MACRO_END<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MINIZ_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FILE<sp/>void<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FILE<sp/>FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>MINIZ_NO_STDIO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MINIZ_NO_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mz_dummy_time_t_tag</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_dummy;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}<sp/>mz_dummy_time_t;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_TIME_T<sp/>mz_dummy_time_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_TIME_T<sp/>time_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="miniz_8h_1a31afa8051f3faec21437339076a389e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_ASSERT(x)<sp/>assert(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MINIZ_NO_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MALLOC(x)<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FREE(x)<sp/>(void)<sp/>x,<sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_REALLOC(p,<sp/>x)<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="miniz_8h_1a09b9e87cb19529df25b3c3e47c9ad393" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MALLOC(x)<sp/>malloc(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="miniz_8h_1ac73e9b464ae92e51b762f496296d7582" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FREE(x)<sp/>free(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="miniz_8h_1a1420c15d77b938f459fa3e8bbd9f4c4d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_REALLOC(p,<sp/>x)<sp/>realloc(p,<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="miniz_8h_1aed350adb9c98cc277b69a348a7478cdb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MAX(a,<sp/>b)<sp/>(((a)<sp/>&gt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="miniz_8h_1abd12503e988aa99a5d82179c54b1acc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_MIN(a,<sp/>b)<sp/>(((a)<sp/>&lt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="miniz_8h_1a3da1eeeef02435f2d09129914aa2928b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_CLEAR_OBJ(obj)<sp/>memset(&amp;(obj),<sp/>0,<sp/>sizeof(obj))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MINIZ_USE_UNALIGNED_LOADS_AND_STORES<sp/>&amp;&amp;MINIZ_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_READ_LE16(p)<sp/>*((const<sp/>mz_uint16<sp/>*)(p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_READ_LE32(p)<sp/>*((const<sp/>mz_uint32<sp/>*)(p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="miniz_8h_1a12c43540bc29b7b9a89f02c4d2ce99d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_READ_LE16(p)<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[0])<sp/>|<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[1])<sp/>&lt;&lt;<sp/>8U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="miniz_8h_1ad46ee9d5a50dd10df9c3829a93773fb6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_READ_LE32(p)<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[0])<sp/>|<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[1])<sp/>&lt;&lt;<sp/>8U)<sp/>|<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[2])<sp/>&lt;&lt;<sp/>16U)<sp/>|<sp/>((mz_uint32)(((const<sp/>mz_uint8<sp/>*)(p))[3])<sp/>&lt;&lt;<sp/>24U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="miniz_8h_1ae29c34529021741ba9d9032248a7a625" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_READ_LE64(p)<sp/>(((mz_uint64)MZ_READ_LE32(p))<sp/>|<sp/>(((mz_uint64)MZ_READ_LE32((const<sp/>mz_uint8<sp/>*)(p)<sp/>+<sp/>sizeof(mz_uint32)))<sp/>&lt;&lt;<sp/>32U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FORCEINLINE<sp/>__forceinline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FORCEINLINE<sp/>__inline__<sp/>__attribute__((__always_inline__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="miniz_8h_1a2c231672fab55aa544b2a34cc9d92fe1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_FORCEINLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a5b8c4d334248b00bb255a64a7628ab36" kindref="member">miniz_def_alloc_func</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a74bd5c1f3f342d2109643cfa500689fc" kindref="member">miniz_def_free_func</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1ae51abb9ee6167023388e1d1122b10d89" kindref="member">miniz_def_realloc_func</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="miniz_8h_1a512356d187ddd5c72e3123703d60b6cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_UINT16_MAX<sp/>(0xFFFFU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="miniz_8h_1aff7bdd0a0a11c987a5f23ab7e97363cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MZ_UINT32_MAX<sp/>(0xFFFFFFFFU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Low-level<sp/>Compression<sp/>API<sp/>Definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>TDEFL_LESS_MEMORY<sp/>to<sp/>1<sp/>to<sp/>use<sp/>less<sp/>memory<sp/>(compression<sp/>will<sp/>be<sp/>slightly<sp/>slower,<sp/>and<sp/>raw/dynamic<sp/>blocks<sp/>will<sp/>be<sp/>output<sp/>more<sp/>frequently).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="miniz_8h_1afadef5daa88dfd06e907a3f8367d58fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TDEFL_LESS_MEMORY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_init()<sp/>compression<sp/>flags<sp/>logically<sp/>OR&apos;d<sp/>together<sp/>(low<sp/>12<sp/>bits<sp/>contain<sp/>the<sp/>max.<sp/>number<sp/>of<sp/>probes<sp/>per<sp/>dictionary<sp/>search):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_DEFAULT_MAX_PROBES:<sp/>The<sp/>compressor<sp/>defaults<sp/>to<sp/>128<sp/>dictionary<sp/>probes<sp/>per<sp/>dictionary<sp/>search.<sp/>0=Huffman<sp/>only,<sp/>1=Huffman+LZ<sp/>(fastest/crap<sp/>compression),<sp/>4095=Huffman+LZ<sp/>(slowest/best<sp/>compression).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568" refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a4a700b2861ad269845ed72e4dca2f7e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a4a700b2861ad269845ed72e4dca2f7e4" kindref="member">TDEFL_HUFFMAN_ONLY</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="569" refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a26ea7a0132eec06d31c1820d123a8d91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a26ea7a0132eec06d31c1820d123a8d91" kindref="member">TDEFL_DEFAULT_MAX_PROBES</ref><sp/>=<sp/>128,</highlight></codeline>
<codeline lineno="570" refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a60323cd4b3acc7a3711c143f7923dd34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a726ca809ffd3d67ab4b8476646f26635a60323cd4b3acc7a3711c143f7923dd34" kindref="member">TDEFL_MAX_PROBES_MASK</ref><sp/>=<sp/>0xFFF</highlight></codeline>
<codeline lineno="571"><highlight class="normal">};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_WRITE_ZLIB_HEADER:<sp/>If<sp/>set,<sp/>the<sp/>compressor<sp/>outputs<sp/>a<sp/>zlib<sp/>header<sp/>before<sp/>the<sp/>deflate<sp/>data,<sp/>and<sp/>the<sp/>Adler-32<sp/>of<sp/>the<sp/>source<sp/>data<sp/>at<sp/>the<sp/>end.<sp/>Otherwise,<sp/>you&apos;ll<sp/>get<sp/>raw<sp/>deflate<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_COMPUTE_ADLER32:<sp/>Always<sp/>compute<sp/>the<sp/>adler-32<sp/>of<sp/>the<sp/>input<sp/>data<sp/>(even<sp/>when<sp/>not<sp/>writing<sp/>zlib<sp/>headers).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_GREEDY_PARSING_FLAG:<sp/>Set<sp/>to<sp/>use<sp/>faster<sp/>greedy<sp/>parsing,<sp/>instead<sp/>of<sp/>more<sp/>efficient<sp/>lazy<sp/>parsing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_NONDETERMINISTIC_PARSING_FLAG:<sp/>Enable<sp/>to<sp/>decrease<sp/>the<sp/>compressor&apos;s<sp/>initialization<sp/>time<sp/>to<sp/>the<sp/>minimum,<sp/>but<sp/>the<sp/>output<sp/>may<sp/>vary<sp/>from<sp/>run<sp/>to<sp/>run<sp/>given<sp/>the<sp/>same<sp/>input<sp/>(depending<sp/>on<sp/>the<sp/>contents<sp/>of<sp/>memory).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_RLE_MATCHES:<sp/>Only<sp/>look<sp/>for<sp/>RLE<sp/>matches<sp/>(matches<sp/>with<sp/>a<sp/>distance<sp/>of<sp/>1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_FILTER_MATCHES:<sp/>Discards<sp/>matches<sp/>&lt;=<sp/>5<sp/>chars<sp/>if<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_FORCE_ALL_STATIC_BLOCKS:<sp/>Disable<sp/>usage<sp/>of<sp/>optimized<sp/>Huffman<sp/>tables.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_FORCE_ALL_RAW_BLOCKS:<sp/>Only<sp/>use<sp/>raw<sp/>(uncompressed)<sp/>deflate<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>low<sp/>12<sp/>bits<sp/>are<sp/>reserved<sp/>to<sp/>control<sp/>the<sp/>max<sp/>#<sp/>of<sp/>hash<sp/>probes<sp/>per<sp/>dictionary<sp/>lookup<sp/>(see<sp/>TDEFL_MAX_PROBES_MASK).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daddb3970da5e697152049482043174c63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daddb3970da5e697152049482043174c63" kindref="member">TDEFL_WRITE_ZLIB_HEADER</ref><sp/>=<sp/>0x01000,</highlight></codeline>
<codeline lineno="585" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daa3c1a489229a817dc6d07efd55a6f5cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daa3c1a489229a817dc6d07efd55a6f5cf" kindref="member">TDEFL_COMPUTE_ADLER32</ref><sp/>=<sp/>0x02000,</highlight></codeline>
<codeline lineno="586" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da6863400f7412d04ec75a2ca363baec03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da6863400f7412d04ec75a2ca363baec03" kindref="member">TDEFL_GREEDY_PARSING_FLAG</ref><sp/>=<sp/>0x04000,</highlight></codeline>
<codeline lineno="587" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daf52d1f4a633ac1d4c4537bd9d63346b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2daf52d1f4a633ac1d4c4537bd9d63346b9" kindref="member">TDEFL_NONDETERMINISTIC_PARSING_FLAG</ref><sp/>=<sp/>0x08000,</highlight></codeline>
<codeline lineno="588" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dafc9a53ebb5a5fdb1d1727eef9b21a524" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dafc9a53ebb5a5fdb1d1727eef9b21a524" kindref="member">TDEFL_RLE_MATCHES</ref><sp/>=<sp/>0x10000,</highlight></codeline>
<codeline lineno="589" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dabea695964526498a4a869b3172e39707" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dabea695964526498a4a869b3172e39707" kindref="member">TDEFL_FILTER_MATCHES</ref><sp/>=<sp/>0x20000,</highlight></codeline>
<codeline lineno="590" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da8fd3e432af0453833eb7168b8f63a064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da8fd3e432af0453833eb7168b8f63a064" kindref="member">TDEFL_FORCE_ALL_STATIC_BLOCKS</ref><sp/>=<sp/>0x40000,</highlight></codeline>
<codeline lineno="591" refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da24f00beb8f787cbdf73b33a535be747b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da24f00beb8f787cbdf73b33a535be747b" kindref="member">TDEFL_FORCE_ALL_RAW_BLOCKS</ref><sp/>=<sp/>0x80000</highlight></codeline>
<codeline lineno="592"><highlight class="normal">};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>level<sp/>compression<sp/>functions:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_compress_mem_to_heap()<sp/>compresses<sp/>a<sp/>block<sp/>in<sp/>memory<sp/>to<sp/>a<sp/>heap<sp/>block<sp/>allocated<sp/>via<sp/>malloc().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>entry:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>pSrc_buf,<sp/>src_buf_len:<sp/>Pointer<sp/>and<sp/>size<sp/>of<sp/>source<sp/>block<sp/>to<sp/>compress.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>flags:<sp/>The<sp/>max<sp/>match<sp/>finder<sp/>probes<sp/>(default<sp/>is<sp/>128)<sp/>logically<sp/>OR&apos;d<sp/>against<sp/>the<sp/>above<sp/>flags.<sp/>Higher<sp/>probes<sp/>are<sp/>slower<sp/>but<sp/>improve<sp/>compression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>return:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Function<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>compressed<sp/>data,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>*pOut_len<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>compressed<sp/>data&apos;s<sp/>size,<sp/>which<sp/>could<sp/>be<sp/>larger<sp/>than<sp/>src_buf_len<sp/>on<sp/>uncompressible<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>The<sp/>caller<sp/>must<sp/>free()<sp/>the<sp/>returned<sp/>block<sp/>when<sp/>it&apos;s<sp/>no<sp/>longer<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1afb50d9ccdd6d2da88a020e0e5ad3fa20" kindref="member">tdefl_compress_mem_to_heap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pSrc_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_buf_len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pOut_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_compress_mem_to_mem()<sp/>compresses<sp/>a<sp/>block<sp/>in<sp/>memory<sp/>to<sp/>another<sp/>block<sp/>in<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>0<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a37639f95844a8c30995fc1f5d4bb75a1" kindref="member">tdefl_compress_mem_to_mem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOut_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_buf_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pSrc_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_buf_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compresses<sp/>an<sp/>image<sp/>to<sp/>a<sp/>compressed<sp/>PNG<sp/>file<sp/>in<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>entry:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>pImage,<sp/>w,<sp/>h,<sp/>and<sp/>num_chans<sp/>describe<sp/>the<sp/>image<sp/>to<sp/>compress.<sp/>num_chans<sp/>may<sp/>be<sp/>1,<sp/>2,<sp/>3,<sp/>or<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>The<sp/>image<sp/>pitch<sp/>in<sp/>bytes<sp/>per<sp/>scanline<sp/>will<sp/>be<sp/>w*num_chans.<sp/>The<sp/>leftmost<sp/>pixel<sp/>on<sp/>the<sp/>top<sp/>scanline<sp/>is<sp/>stored<sp/>first<sp/>in<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>level<sp/>may<sp/>range<sp/>from<sp/>[0,10],<sp/>use<sp/>MZ_NO_COMPRESSION,<sp/>MZ_BEST_SPEED,<sp/>MZ_BEST_COMPRESSION,<sp/>etc.<sp/>or<sp/>a<sp/>decent<sp/>default<sp/>is<sp/>MZ_DEFAULT_LEVEL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>If<sp/>flip<sp/>is<sp/>true,<sp/>the<sp/>image<sp/>will<sp/>be<sp/>flipped<sp/>on<sp/>the<sp/>Y<sp/>axis<sp/>(useful<sp/>for<sp/>OpenGL<sp/>apps).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>return:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Function<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>compressed<sp/>data,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>*pLen_out<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>PNG<sp/>image<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>The<sp/>caller<sp/>must<sp/>mz_free()<sp/>the<sp/>returned<sp/>heap<sp/>block<sp/>(which<sp/>will<sp/>typically<sp/>be<sp/>larger<sp/>than<sp/>*pLen_out)<sp/>when<sp/>it&apos;s<sp/>no<sp/>longer<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a63a3ef354a44c931ddf34a66cf064b16" kindref="member">tdefl_write_image_to_png_file_in_memory_ex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pImage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chans,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pLen_out,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level,<sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/>flip);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a0895bd488b9650322eedf2739f81402a" kindref="member">tdefl_write_image_to_png_file_in_memory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pImage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chans,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pLen_out);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Output<sp/>stream<sp/>interface.<sp/>The<sp/>compressor<sp/>uses<sp/>this<sp/>interface<sp/>to<sp/>write<sp/>compressed<sp/>data.<sp/>It&apos;ll<sp/>typically<sp/>be<sp/>called<sp/>TDEFL_OUT_BUF_SIZE<sp/>at<sp/>a<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/>(*<ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUser);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_compress_mem_to_output()<sp/>compresses<sp/>a<sp/>block<sp/>to<sp/>an<sp/>output<sp/>stream.<sp/>The<sp/>above<sp/>helpers<sp/>use<sp/>this<sp/>function<sp/>internally.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a153fd833b8c09efd13aa1d35dd22d092" kindref="member">tdefl_compress_mem_to_output</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len,<sp/><ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref><sp/>pPut_buf_func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pPut_buf_user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" kindref="member">TDEFL_MAX_HUFF_TABLES</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="631" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a30643ecd31dedddcdb265685027c3730" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a30643ecd31dedddcdb265685027c3730" kindref="member">TDEFL_MAX_HUFF_SYMBOLS_0</ref><sp/>=<sp/>288,</highlight></codeline>
<codeline lineno="632" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600ab31107f9bbadea4b9a371a4c52885471" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600ab31107f9bbadea4b9a371a4c52885471" kindref="member">TDEFL_MAX_HUFF_SYMBOLS_1</ref><sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="633" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600ae84d30193f96d7234e473ee98ee25087" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600ae84d30193f96d7234e473ee98ee25087" kindref="member">TDEFL_MAX_HUFF_SYMBOLS_2</ref><sp/>=<sp/>19,</highlight></codeline>
<codeline lineno="634" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" kindref="member">TDEFL_LZ_DICT_SIZE</ref><sp/>=<sp/>32768,</highlight></codeline>
<codeline lineno="635" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a60ad8ff42b02877e23881e2475f641d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a60ad8ff42b02877e23881e2475f641d7" kindref="member">TDEFL_LZ_DICT_SIZE_MASK</ref><sp/>=<sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" kindref="member">TDEFL_LZ_DICT_SIZE</ref><sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="636" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a9697a9d6cfbbf8d8cb2c3367aec5ba9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a9697a9d6cfbbf8d8cb2c3367aec5ba9a" kindref="member">TDEFL_MIN_MATCH_LEN</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="637" refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a0d179990872afd64535490e85825edca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a0d179990872afd64535490e85825edca" kindref="member">TDEFL_MAX_MATCH_LEN</ref><sp/>=<sp/>258</highlight></codeline>
<codeline lineno="638"><highlight class="normal">};</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TDEFL_OUT_BUF_SIZE<sp/>MUST<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>a<sp/>single<sp/>entire<sp/>compressed<sp/>output<sp/>block<sp/>(using<sp/>static/fixed<sp/>Huffman<sp/>codes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TDEFL_LESS_MEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" kindref="member">TDEFL_LZ_CODE_BUF_SIZE</ref><sp/>=<sp/>24<sp/>*<sp/>1024,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ad79ca716ebec4ef5fa4752f32acc9418" kindref="member">TDEFL_OUT_BUF_SIZE</ref><sp/>=<sp/>(<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" kindref="member">TDEFL_LZ_CODE_BUF_SIZE</ref><sp/>*<sp/>13)<sp/>/<sp/>10,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" kindref="member">TDEFL_MAX_HUFF_SYMBOLS</ref><sp/>=<sp/>288,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref><sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a202a52e3c2065cea2c36a18630e1f863" kindref="member">TDEFL_LEVEL1_HASH_SIZE_MASK</ref><sp/>=<sp/>4095,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ab7e1aa0f0ee51ac5ed2976f7af52d138" kindref="member">TDEFL_LZ_HASH_SHIFT</ref><sp/>=<sp/>(<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref><sp/>+<sp/>2)<sp/>/<sp/>3,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2dc98b78800f2aa4dffe5438b01bd4c0" kindref="member">TDEFL_LZ_HASH_SIZE</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref></highlight></codeline>
<codeline lineno="651"><highlight class="normal">};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" kindref="member">TDEFL_LZ_CODE_BUF_SIZE</ref><sp/>=<sp/>64<sp/>*<sp/>1024,</highlight></codeline>
<codeline lineno="656" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ad79ca716ebec4ef5fa4752f32acc9418" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ad79ca716ebec4ef5fa4752f32acc9418" kindref="member">TDEFL_OUT_BUF_SIZE</ref><sp/>=<sp/>(<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" kindref="member">TDEFL_LZ_CODE_BUF_SIZE</ref><sp/>*<sp/>13)<sp/>/<sp/>10,</highlight></codeline>
<codeline lineno="657" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" kindref="member">TDEFL_MAX_HUFF_SYMBOLS</ref><sp/>=<sp/>288,</highlight></codeline>
<codeline lineno="658" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref><sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="659" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a202a52e3c2065cea2c36a18630e1f863" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a202a52e3c2065cea2c36a18630e1f863" kindref="member">TDEFL_LEVEL1_HASH_SIZE_MASK</ref><sp/>=<sp/>4095,</highlight></codeline>
<codeline lineno="660" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ab7e1aa0f0ee51ac5ed2976f7af52d138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ab7e1aa0f0ee51ac5ed2976f7af52d138" kindref="member">TDEFL_LZ_HASH_SHIFT</ref><sp/>=<sp/>(<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref><sp/>+<sp/>2)<sp/>/<sp/>3,</highlight></codeline>
<codeline lineno="661" refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2dc98b78800f2aa4dffe5438b01bd4c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2dc98b78800f2aa4dffe5438b01bd4c0" kindref="member">TDEFL_LZ_HASH_SIZE</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2b22a3813245c6d00c5a802f8593daf2" kindref="member">TDEFL_LZ_HASH_BITS</ref></highlight></codeline>
<codeline lineno="662"><highlight class="normal">};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>low-level<sp/>tdefl<sp/>functions<sp/>below<sp/>may<sp/>be<sp/>used<sp/>directly<sp/>if<sp/>the<sp/>above<sp/>helper<sp/>functions<sp/>aren&apos;t<sp/>flexible<sp/>enough.<sp/>The<sp/>low-level<sp/>functions<sp/>don&apos;t<sp/>make<sp/>any<sp/>heap<sp/>allocations,<sp/>unlike<sp/>the<sp/>above<sp/>helper<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668" refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fabfe89ba8aaf460134dbf95c5969f82f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fabfe89ba8aaf460134dbf95c5969f82f8" kindref="member">TDEFL_STATUS_BAD_PARAM</ref><sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="669" refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fad33a46f2b32817746e26144ecb16687f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fad33a46f2b32817746e26144ecb16687f" kindref="member">TDEFL_STATUS_PUT_BUF_FAILED</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="670" refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa0db9f12eded9feed194fd0b20fec8b27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa0db9f12eded9feed194fd0b20fec8b27" kindref="member">TDEFL_STATUS_OKAY</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="671" refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa9beb7850b5d6941b6860db23f426b0d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748fa9beb7850b5d6941b6860db23f426b0d2" kindref="member">TDEFL_STATUS_DONE</ref><sp/>=<sp/>1</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}<sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Must<sp/>map<sp/>to<sp/>MZ_NO_FLUSH,<sp/>MZ_SYNC_FLUSH,<sp/>etc.<sp/>enums<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677" refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87a9bde52f27872bf5821ed345bc6768" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87a9bde52f27872bf5821ed345bc6768" kindref="member">TDEFL_NO_FLUSH</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="678" refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87252ae761afc143db0fb20c5daca847" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfa87252ae761afc143db0fb20c5daca847" kindref="member">TDEFL_SYNC_FLUSH</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="679" refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfac38ba366db95f4ad31c7719bd08ae7f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfac38ba366db95f4ad31c7719bd08ae7f8" kindref="member">TDEFL_FULL_FLUSH</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="680" refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfaea9e4d7ec26223f627ff02c5335b7e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abfaea9e4d7ec26223f627ff02c5335b7e66" kindref="member">TDEFL_FINISH</ref><sp/>=<sp/>4</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}<sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl&apos;s<sp/>compression<sp/>state<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="structtdefl__compressor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686" refid="structtdefl__compressor_1a744d78e0e02c77ff224a3a2eefc6c39f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref><sp/><ref refid="structtdefl__compressor_1a744d78e0e02c77ff224a3a2eefc6c39f" kindref="member">m_pPut_buf_func</ref>;</highlight></codeline>
<codeline lineno="687" refid="structtdefl__compressor_1ad495682142ede0ea54a774a45a1e4145" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtdefl__compressor_1ad495682142ede0ea54a774a45a1e4145" kindref="member">m_pPut_buf_user</ref>;</highlight></codeline>
<codeline lineno="688" refid="structtdefl__compressor_1a019a2a421ee743e69dc0b3abdad00d67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>m_flags,<sp/>m_max_probes[2];</highlight></codeline>
<codeline lineno="689" refid="structtdefl__compressor_1acd97ca2c9c322def4d1873145f5c8e50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtdefl__compressor_1acd97ca2c9c322def4d1873145f5c8e50" kindref="member">m_greedy_parsing</ref>;</highlight></codeline>
<codeline lineno="690" refid="structtdefl__compressor_1aad683845a1c4d4646819b9580f498f04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>m_adler32,<sp/>m_lookahead_pos,<sp/><ref refid="structtdefl__compressor_1aad683845a1c4d4646819b9580f498f04" kindref="member">m_lookahead_size</ref>,<sp/>m_dict_size;</highlight></codeline>
<codeline lineno="691" refid="structtdefl__compressor_1aa790d06026f9cd65e5ab373c46447694" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>*m_pLZ_code_buf,<sp/>*m_pLZ_flags,<sp/>*m_pOutput_buf,<sp/>*<ref refid="structtdefl__compressor_1aa790d06026f9cd65e5ab373c46447694" kindref="member">m_pOutput_buf_end</ref>;</highlight></codeline>
<codeline lineno="692" refid="structtdefl__compressor_1a4e55500e9af5206ac47492f3a568ef9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>m_num_flags_left,<sp/><ref refid="structtdefl__compressor_1a4e55500e9af5206ac47492f3a568ef9f" kindref="member">m_total_lz_bytes</ref>,<sp/>m_lz_code_buf_dict_pos,<sp/>m_bits_in,<sp/>m_bit_buffer;</highlight></codeline>
<codeline lineno="693" refid="structtdefl__compressor_1a48846993be500c613cc1343b586e5754" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>m_saved_match_dist,<sp/>m_saved_match_len,<sp/>m_saved_lit,<sp/>m_output_flush_ofs,<sp/>m_output_flush_remaining,<sp/>m_finished,<sp/>m_block_index,<sp/><ref refid="structtdefl__compressor_1a48846993be500c613cc1343b586e5754" kindref="member">m_wants_to_finish</ref>;</highlight></codeline>
<codeline lineno="694" refid="structtdefl__compressor_1a58be7740c1c0bbc9bc1dc52a79e420bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref><sp/><ref refid="structtdefl__compressor_1a58be7740c1c0bbc9bc1dc52a79e420bf" kindref="member">m_prev_return_status</ref>;</highlight></codeline>
<codeline lineno="695" refid="structtdefl__compressor_1ac131b5e6ff8ca9af418b01eefd77c7f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtdefl__compressor_1ac131b5e6ff8ca9af418b01eefd77c7f9" kindref="member">m_pIn_buf</ref>;</highlight></codeline>
<codeline lineno="696" refid="structtdefl__compressor_1abaf4c7afc0fc8e487340c3461e8028a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtdefl__compressor_1abaf4c7afc0fc8e487340c3461e8028a4" kindref="member">m_pOut_buf</ref>;</highlight></codeline>
<codeline lineno="697" refid="structtdefl__compressor_1a2629e9f8046f0d2d8898303ed6e50fbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*m_pIn_buf_size,<sp/>*<ref refid="structtdefl__compressor_1a2629e9f8046f0d2d8898303ed6e50fbf" kindref="member">m_pOut_buf_size</ref>;</highlight></codeline>
<codeline lineno="698" refid="structtdefl__compressor_1a8a3cce846b9849371735935790d8bab5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref><sp/><ref refid="structtdefl__compressor_1a8a3cce846b9849371735935790d8bab5" kindref="member">m_flush</ref>;</highlight></codeline>
<codeline lineno="699" refid="structtdefl__compressor_1a2fe623583532f09b395e99e3d25c123e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>*<ref refid="structtdefl__compressor_1a2fe623583532f09b395e99e3d25c123e" kindref="member">m_pSrc</ref>;</highlight></codeline>
<codeline lineno="700" refid="structtdefl__compressor_1a5405cb47173aa1c06cb7bb067a036f07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structtdefl__compressor_1a5405cb47173aa1c06cb7bb067a036f07" kindref="member">m_src_buf_left</ref>,<sp/>m_out_buf_ofs;</highlight></codeline>
<codeline lineno="701" refid="structtdefl__compressor_1a5dfd187e5e547f16920cf3cf48b7a151" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>m_dict[<ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" kindref="member">TDEFL_LZ_DICT_SIZE</ref><sp/>+<sp/><ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a0d179990872afd64535490e85825edca" kindref="member">TDEFL_MAX_MATCH_LEN</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="702" refid="structtdefl__compressor_1ab77f4dbe0fa2167b4491a99fb9250fba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>m_huff_count[<ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" kindref="member">TDEFL_MAX_HUFF_TABLES</ref>][<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" kindref="member">TDEFL_MAX_HUFF_SYMBOLS</ref>];</highlight></codeline>
<codeline lineno="703" refid="structtdefl__compressor_1a32dd7a7684f0408712fc2b2a2e97edba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>m_huff_codes[<ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" kindref="member">TDEFL_MAX_HUFF_TABLES</ref>][<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" kindref="member">TDEFL_MAX_HUFF_SYMBOLS</ref>];</highlight></codeline>
<codeline lineno="704" refid="structtdefl__compressor_1ae77276d53c663acfa812990426d45197" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>m_huff_code_sizes[<ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a2f6e01ed3c0946afac61e4bea7428fc4" kindref="member">TDEFL_MAX_HUFF_TABLES</ref>][<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a0a40feaf86d8aed58861a6bd3964b2f4" kindref="member">TDEFL_MAX_HUFF_SYMBOLS</ref>];</highlight></codeline>
<codeline lineno="705" refid="structtdefl__compressor_1ac4233d89f25c3f5f9c9eda73bcf3e6c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>m_lz_code_buf[<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57aa31c23d99c4bf4bb9857de2286b6d7e6" kindref="member">TDEFL_LZ_CODE_BUF_SIZE</ref>];</highlight></codeline>
<codeline lineno="706" refid="structtdefl__compressor_1aa55f0314f4b7bfff6999060bdf2d96fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>m_next[<ref refid="miniz_8h_1abed82baf7f470b522273a3e37c24c600a784fb221e94e69893e546101919879b4" kindref="member">TDEFL_LZ_DICT_SIZE</ref>];</highlight></codeline>
<codeline lineno="707" refid="structtdefl__compressor_1a2dffbb84dd4d9bf24bc3b1476cbd636c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>m_hash[<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57a2dc98b78800f2aa4dffe5438b01bd4c0" kindref="member">TDEFL_LZ_HASH_SIZE</ref>];</highlight></codeline>
<codeline lineno="708" refid="structtdefl__compressor_1af3767449a43c686c7870b4bf939c878a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>m_output_buf[<ref refid="miniz_8h_1ab04a0655cd1e3bcac5e8f48c18df1a57ad79ca716ebec4ef5fa4752f32acc9418" kindref="member">TDEFL_OUT_BUF_SIZE</ref>];</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}<sp/><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>the<sp/>compressor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>no<sp/>corresponding<sp/>deinit()<sp/>function<sp/>because<sp/>the<sp/>tdefl<sp/>API&apos;s<sp/>do<sp/>not<sp/>dynamically<sp/>allocate<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pBut_buf_func:<sp/>If<sp/>NULL,<sp/>output<sp/>data<sp/>will<sp/>be<sp/>supplied<sp/>to<sp/>the<sp/>specified<sp/>callback.<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>user<sp/>should<sp/>call<sp/>the<sp/>tdefl_compress_buffer()<sp/>API<sp/>for<sp/>compression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>pBut_buf_func<sp/>is<sp/>NULL<sp/>the<sp/>user<sp/>should<sp/>always<sp/>call<sp/>the<sp/>tdefl_compress()<sp/>API.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>flags:<sp/>See<sp/>the<sp/>above<sp/>enums<sp/>(TDEFL_HUFFMAN_ONLY,<sp/>TDEFL_WRITE_ZLIB_HEADER,<sp/>etc.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref><sp/><ref refid="miniz_8h_1a3c2c67a6200147020ba4bfbf77962792" kindref="member">tdefl_init</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*d,<sp/><ref refid="miniz_8h_1ad9ea9d3eac48ba0658f750a920452497" kindref="member">tdefl_put_buf_func_ptr</ref><sp/>pPut_buf_func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pPut_buf_user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compresses<sp/>a<sp/>block<sp/>of<sp/>data,<sp/>consuming<sp/>as<sp/>much<sp/>of<sp/>the<sp/>specified<sp/>input<sp/>buffer<sp/>as<sp/>possible,<sp/>and<sp/>writing<sp/>as<sp/>much<sp/>compressed<sp/>data<sp/>to<sp/>the<sp/>specified<sp/>output<sp/>buffer<sp/>as<sp/>possible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref><sp/><ref refid="miniz_8h_1ae9968978f7ea9f732c5ed08db988208b" kindref="member">tdefl_compress</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pIn_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pIn_buf_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOut_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pOut_buf_size,<sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref><sp/>flush);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_compress_buffer()<sp/>is<sp/>only<sp/>usable<sp/>when<sp/>the<sp/>tdefl_init()<sp/>is<sp/>called<sp/>with<sp/>a<sp/>non-NULL<sp/>tdefl_put_buf_func_ptr.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tdefl_compress_buffer()<sp/>always<sp/>consumes<sp/>the<sp/>entire<sp/>input<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref><sp/><ref refid="miniz_8h_1a5f2608070112b0e81a3017e9c39c73b7" kindref="member">tdefl_compress_buffer</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pIn_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_buf_size,<sp/><ref refid="miniz_8h_1a9bfa87b1c54146014408fcca1bf37abf" kindref="member">tdefl_flush</ref><sp/>flush);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><ref refid="miniz_8h_1abe27406ab0ea1c4d615d93a3e688748f" kindref="member">tdefl_status</ref><sp/><ref refid="miniz_8h_1a516a79788364e4f3e3b55187a2a67b24" kindref="member">tdefl_get_prev_return_status</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*d);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="miniz_8h_1a2ec6403111ea9afbcdc4d76cfda97110" kindref="member">tdefl_get_adler32</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*d);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>tdefl_compress()<sp/>flags<sp/>given<sp/>zlib-style<sp/>compression<sp/>parameters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>level<sp/>may<sp/>range<sp/>from<sp/>[0,10]<sp/>(where<sp/>10<sp/>is<sp/>absolute<sp/>max<sp/>compression,<sp/>but<sp/>may<sp/>be<sp/>much<sp/>slower<sp/>on<sp/>some<sp/>files)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>window_bits<sp/>may<sp/>be<sp/>-15<sp/>(raw<sp/>deflate)<sp/>or<sp/>15<sp/>(zlib)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>strategy<sp/>may<sp/>be<sp/>either<sp/>MZ_DEFAULT_STRATEGY,<sp/>MZ_FILTERED,<sp/>MZ_HUFFMAN_ONLY,<sp/>MZ_RLE,<sp/>or<sp/>MZ_FIXED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/><ref refid="miniz_8h_1acf2306ec6b7f92753264f68bc554750b" kindref="member">tdefl_create_comp_flags_from_zip_params</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>tdefl_compressor<sp/>structure<sp/>in<sp/>C<sp/>so<sp/>that<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>non-C<sp/>language<sp/>bindings<sp/>to<sp/>tdefl_<sp/>API<sp/>don&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>structure<sp/>size<sp/>and<sp/>allocation<sp/>mechanism.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*<ref refid="miniz_8h_1a862e12a5b9361933538572c4692d4544" kindref="member">tdefl_compressor_alloc</ref>();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1aaed356efd84e96e9f5eecdf078b07e50" kindref="member">tdefl_compressor_free</ref>(<ref refid="structtdefl__compressor" kindref="compound">tdefl_compressor</ref><sp/>*pComp);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Low-level<sp/>Decompression<sp/>API<sp/>Definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decompression<sp/>flags<sp/>used<sp/>by<sp/>tinfl_decompress().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TINFL_FLAG_PARSE_ZLIB_HEADER:<sp/>If<sp/>set,<sp/>the<sp/>input<sp/>has<sp/>a<sp/>valid<sp/>zlib<sp/>header<sp/>and<sp/>ends<sp/>with<sp/>an<sp/>adler32<sp/>checksum<sp/>(it&apos;s<sp/>a<sp/>valid<sp/>zlib<sp/>stream).<sp/>Otherwise,<sp/>the<sp/>input<sp/>is<sp/>a<sp/>raw<sp/>deflate<sp/>stream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TINFL_FLAG_HAS_MORE_INPUT:<sp/>If<sp/>set,<sp/>there<sp/>are<sp/>more<sp/>input<sp/>bytes<sp/>available<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>supplied<sp/>input<sp/>buffer.<sp/>If<sp/>clear,<sp/>the<sp/>input<sp/>buffer<sp/>contains<sp/>all<sp/>remaining<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF:<sp/>If<sp/>set,<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>entire<sp/>decompressed<sp/>stream.<sp/>If<sp/>clear,<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>at<sp/>least<sp/>the<sp/>size<sp/>of<sp/>the<sp/>dictionary<sp/>(typically<sp/>32KB).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TINFL_FLAG_COMPUTE_ADLER32:<sp/>Force<sp/>adler-32<sp/>checksum<sp/>computation<sp/>of<sp/>the<sp/>decompressed<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757" refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388af085740084ef23d974d043aeda6f2245" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388af085740084ef23d974d043aeda6f2245" kindref="member">TINFL_FLAG_PARSE_ZLIB_HEADER</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="758" refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a2eb96c68c6a8df342d8f12d7efcf96c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a2eb96c68c6a8df342d8f12d7efcf96c1" kindref="member">TINFL_FLAG_HAS_MORE_INPUT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="759" refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a086ec4df460b3a0c5085e22fd679b7d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a086ec4df460b3a0c5085e22fd679b7d9" kindref="member">TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="760" refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a9454c17ebc5717f8553d01ab99b8c1c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a385c44f6fb256e5716a2302a5b940388a9454c17ebc5717f8553d01ab99b8c1c9" kindref="member">TINFL_FLAG_COMPUTE_ADLER32</ref><sp/>=<sp/>8</highlight></codeline>
<codeline lineno="761"><highlight class="normal">};</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>level<sp/>decompression<sp/>functions:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tinfl_decompress_mem_to_heap()<sp/>decompresses<sp/>a<sp/>block<sp/>in<sp/>memory<sp/>to<sp/>a<sp/>heap<sp/>block<sp/>allocated<sp/>via<sp/>malloc().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>entry:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>pSrc_buf,<sp/>src_buf_len:<sp/>Pointer<sp/>and<sp/>size<sp/>of<sp/>the<sp/>Deflate<sp/>or<sp/>zlib<sp/>source<sp/>data<sp/>to<sp/>decompress.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>return:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Function<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>decompressed<sp/>data,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>*pOut_len<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>decompressed<sp/>data&apos;s<sp/>size,<sp/>which<sp/>could<sp/>be<sp/>larger<sp/>than<sp/>src_buf_len<sp/>on<sp/>uncompressible<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>The<sp/>caller<sp/>must<sp/>call<sp/>mz_free()<sp/>on<sp/>the<sp/>returned<sp/>block<sp/>when<sp/>it&apos;s<sp/>no<sp/>longer<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a2a949056c9eed394b9f2217ba6f55f6b" kindref="member">tinfl_decompress_mem_to_heap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pSrc_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_buf_len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pOut_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tinfl_decompress_mem_to_mem()<sp/>decompresses<sp/>a<sp/>block<sp/>in<sp/>memory<sp/>to<sp/>another<sp/>block<sp/>in<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>TINFL_DECOMPRESS_MEM_TO_MEM_FAILED<sp/>on<sp/>failure,<sp/>or<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>written<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="miniz_8h_1abc05bb1717f26edc88a010e903de04e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINFL_DECOMPRESS_MEM_TO_MEM_FAILED<sp/>((size_t)(-1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ac4642bb91b5abc566c6b23c0658d6995" kindref="member">tinfl_decompress_mem_to_mem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOut_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_buf_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pSrc_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_buf_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tinfl_decompress_mem_to_callback()<sp/>decompresses<sp/>a<sp/>block<sp/>in<sp/>memory<sp/>to<sp/>an<sp/>internal<sp/>32KB<sp/>buffer,<sp/>and<sp/>a<sp/>user<sp/>provided<sp/>callback<sp/>function<sp/>will<sp/>be<sp/>called<sp/>to<sp/>flush<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>1<sp/>on<sp/>success<sp/>or<sp/>0<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="miniz_8h_1a4e4ea4a3376e8d2a996b848c8e4319df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="miniz_8h_1a4e4ea4a3376e8d2a996b848c8e4319df" kindref="member">tinfl_put_buf_func_ptr</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUser);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a3e8087762c8423c4e48d1e5e01a243de" kindref="member">tinfl_decompress_mem_to_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pIn_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pIn_buf_size,<sp/><ref refid="miniz_8h_1a4e4ea4a3376e8d2a996b848c8e4319df" kindref="member">tinfl_put_buf_func_ptr</ref><sp/>pPut_buf_func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pPut_buf_user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor_tag</ref>;</highlight></codeline>
<codeline lineno="784" refid="miniz_8h_1ad5308cf24962df49c8b6a5c91bbbe05e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor_tag</ref><sp/><ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor</ref>;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>tinfl_decompressor<sp/>structure<sp/>in<sp/>C<sp/>so<sp/>that<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>non-C<sp/>language<sp/>bindings<sp/>to<sp/>tinfl_<sp/>API<sp/>don&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>structure<sp/>size<sp/>and<sp/>allocation<sp/>mechanism.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor</ref><sp/>*<ref refid="miniz_8h_1a65dd8744393e4f726a67aa3833656353" kindref="member">tinfl_decompressor_alloc</ref>();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1af8586e33fb8be9bff1c261d3aae1fc5e" kindref="member">tinfl_decompressor_free</ref>(<ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor</ref><sp/>*pDecomp);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Max<sp/>size<sp/>of<sp/>LZ<sp/>dictionary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="miniz_8h_1a39dc152de3351183ff8af716f0c556cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINFL_LZ_DICT_SIZE<sp/>32768</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>status.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flags<sp/>indicates<sp/>the<sp/>inflator<sp/>needs<sp/>1<sp/>or<sp/>more<sp/>input<sp/>bytes<sp/>to<sp/>make<sp/>forward<sp/>progress,<sp/>but<sp/>the<sp/>caller<sp/>is<sp/>indicating<sp/>that<sp/>no<sp/>more<sp/>are<sp/>available.<sp/>The<sp/>compressed<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>probably<sp/>corrupted.<sp/>If<sp/>you<sp/>call<sp/>the<sp/>inflator<sp/>again<sp/>with<sp/>more<sp/>bytes<sp/>it&apos;ll<sp/>try<sp/>to<sp/>continue<sp/>processing<sp/>the<sp/>input<sp/>but<sp/>this<sp/>is<sp/>a<sp/>BAD<sp/>sign<sp/>(either<sp/>the<sp/>data<sp/>is<sp/>corrupted<sp/>or<sp/>you<sp/>called<sp/>it<sp/>incorrectly).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>you<sp/>call<sp/>it<sp/>again<sp/>with<sp/>no<sp/>input<sp/>you&apos;ll<sp/>just<sp/>get<sp/>TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a7661742c9463ceaa3872ffca2fb15998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a7661742c9463ceaa3872ffca2fb15998" kindref="member">TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS</ref><sp/>=<sp/>-4,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flag<sp/>indicates<sp/>that<sp/>one<sp/>or<sp/>more<sp/>of<sp/>the<sp/>input<sp/>parameters<sp/>was<sp/>obviously<sp/>bogus.<sp/>(You<sp/>can<sp/>try<sp/>calling<sp/>it<sp/>again,<sp/>but<sp/>if<sp/>you<sp/>get<sp/>this<sp/>error<sp/>the<sp/>calling<sp/>code<sp/>is<sp/>wrong.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a61c8d6dd2c312ee7a474ac6782e4bed9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a61c8d6dd2c312ee7a474ac6782e4bed9" kindref="member">TINFL_STATUS_BAD_PARAM</ref><sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flags<sp/>indicate<sp/>the<sp/>inflator<sp/>is<sp/>finished<sp/>but<sp/>the<sp/>adler32<sp/>check<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>didn&apos;t<sp/>match.<sp/>If<sp/>you<sp/>call<sp/>it<sp/>again<sp/>it&apos;ll<sp/>return<sp/>TINFL_STATUS_DONE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3c0ca7cb0911c046d25e1ab3e525a3af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3c0ca7cb0911c046d25e1ab3e525a3af" kindref="member">TINFL_STATUS_ADLER32_MISMATCH</ref><sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flags<sp/>indicate<sp/>the<sp/>inflator<sp/>has<sp/>somehow<sp/>failed<sp/>(bad<sp/>code,<sp/>corrupted<sp/>input,<sp/>etc.).<sp/>If<sp/>you<sp/>call<sp/>it<sp/>again<sp/>without<sp/>resetting<sp/>via<sp/>tinfl_init()<sp/>it<sp/>it&apos;ll<sp/>just<sp/>keep<sp/>on<sp/>returning<sp/>the<sp/>same<sp/>status<sp/>failure<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3d9ecb5e7298395555ec061cda50644c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a3d9ecb5e7298395555ec061cda50644c" kindref="member">TINFL_STATUS_FAILED</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Any<sp/>status<sp/>code<sp/>less<sp/>than<sp/>TINFL_STATUS_DONE<sp/>must<sp/>indicate<sp/>a<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flag<sp/>indicates<sp/>the<sp/>inflator<sp/>has<sp/>returned<sp/>every<sp/>byte<sp/>of<sp/>uncompressed<sp/>data<sp/>that<sp/>it<sp/>can,<sp/>has<sp/>consumed<sp/>every<sp/>byte<sp/>that<sp/>it<sp/>needed,<sp/>has<sp/>successfully<sp/>reached<sp/>the<sp/>end<sp/>of<sp/>the<sp/>deflate<sp/>stream,<sp/>and<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>zlib<sp/>headers<sp/>and<sp/>adler32<sp/>checking<sp/>enabled<sp/>that<sp/>it<sp/>has<sp/>successfully<sp/>checked<sp/>the<sp/>uncompressed<sp/>data&apos;s<sp/>adler32.<sp/>If<sp/>you<sp/>call<sp/>it<sp/>again<sp/>you&apos;ll<sp/>just<sp/>get<sp/>TINFL_STATUS_DONE<sp/>over<sp/>and<sp/>over<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4af9316c69027621352f435c9a343f1042" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4af9316c69027621352f435c9a343f1042" kindref="member">TINFL_STATUS_DONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flag<sp/>indicates<sp/>the<sp/>inflator<sp/>MUST<sp/>have<sp/>more<sp/>input<sp/>data<sp/>(even<sp/>1<sp/>byte)<sp/>before<sp/>it<sp/>can<sp/>make<sp/>any<sp/>more<sp/>forward<sp/>progress,<sp/>or<sp/>you<sp/>need<sp/>to<sp/>clear<sp/>the<sp/>TINFL_FLAG_HAS_MORE_INPUT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>on<sp/>the<sp/>next<sp/>call<sp/>if<sp/>you<sp/>don&apos;t<sp/>have<sp/>any<sp/>more<sp/>source<sp/>data.<sp/>If<sp/>the<sp/>source<sp/>data<sp/>was<sp/>somehow<sp/>corrupted<sp/>it&apos;s<sp/>also<sp/>possible<sp/>(but<sp/>unlikely)<sp/>for<sp/>the<sp/>inflator<sp/>to<sp/>keep<sp/>on<sp/>demanding<sp/>input<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>proceed,<sp/>so<sp/>be<sp/>sure<sp/>to<sp/>properly<sp/>set<sp/>the<sp/>TINFL_FLAG_HAS_MORE_INPUT<sp/>flag.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a4150e95aacd9bf414c6f9155263b60e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a4150e95aacd9bf414c6f9155263b60e8" kindref="member">TINFL_STATUS_NEEDS_MORE_INPUT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>flag<sp/>indicates<sp/>the<sp/>inflator<sp/>definitely<sp/>has<sp/>1<sp/>or<sp/>more<sp/>bytes<sp/>of<sp/>uncompressed<sp/>data<sp/>available,<sp/>but<sp/>it<sp/>cannot<sp/>write<sp/>this<sp/>data<sp/>into<sp/>the<sp/>output<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>if<sp/>the<sp/>source<sp/>compressed<sp/>data<sp/>was<sp/>corrupted<sp/>it&apos;s<sp/>possible<sp/>for<sp/>the<sp/>inflator<sp/>to<sp/>return<sp/>a<sp/>lot<sp/>of<sp/>uncompressed<sp/>data<sp/>to<sp/>the<sp/>caller.<sp/>I&apos;ve<sp/>been<sp/>assuming<sp/>you<sp/>know<sp/>how<sp/>much<sp/>uncompressed<sp/>data<sp/>to<sp/>expect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(either<sp/>exact<sp/>or<sp/>worst<sp/>case)<sp/>and<sp/>will<sp/>stop<sp/>calling<sp/>the<sp/>inflator<sp/>and<sp/>fail<sp/>after<sp/>receiving<sp/>too<sp/>much.<sp/>In<sp/>pure<sp/>streaming<sp/>scenarios<sp/>where<sp/>you<sp/>have<sp/>no<sp/>idea<sp/>how<sp/>many<sp/>bytes<sp/>to<sp/>expect<sp/>this<sp/>may<sp/>not<sp/>be<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>so<sp/>I<sp/>may<sp/>need<sp/>to<sp/>add<sp/>some<sp/>code<sp/>to<sp/>address<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a49583f3a8fa8eb17838e17f21c08be05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4a49583f3a8fa8eb17838e17f21c08be05" kindref="member">TINFL_STATUS_HAS_MORE_OUTPUT</ref><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}<sp/><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4" kindref="member">tinfl_status</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>the<sp/>decompressor<sp/>to<sp/>its<sp/>initial<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="miniz_8h_1a38425ff8609fe5fe5a9a48612e6f3e46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tinfl_init(r)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(r)-&gt;m_state<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MZ_MACRO_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="miniz_8h_1a5542a5383b30c24dc30bc2af3857a291" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tinfl_get_adler32(r)<sp/>(r)-&gt;m_check_adler32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Main<sp/>low-level<sp/>decompressor<sp/>coroutine<sp/>function.<sp/>This<sp/>is<sp/>the<sp/>only<sp/>function<sp/>actually<sp/>needed<sp/>for<sp/>decompression.<sp/>All<sp/>the<sp/>other<sp/>functions<sp/>are<sp/>just<sp/>high-level<sp/>helpers<sp/>for<sp/>improved<sp/>usability.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>universal<sp/>API,<sp/>i.e.<sp/>it<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>building<sp/>block<sp/>to<sp/>build<sp/>any<sp/>desired<sp/>higher<sp/>level<sp/>decompression<sp/>API.<sp/>In<sp/>the<sp/>limit<sp/>case,<sp/>it<sp/>can<sp/>be<sp/>called<sp/>once<sp/>per<sp/>every<sp/>byte<sp/>input<sp/>or<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><ref refid="miniz_8h_1a387ccd3d7a7891c9e1d6ec4f4207c8d4" kindref="member">tinfl_status</ref><sp/><ref refid="miniz_8h_1ac4e4c006d234780922676ecc31fe1416" kindref="member">tinfl_decompress</ref>(<ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>*pIn_buf_next,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pIn_buf_size,<sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>*pOut_buf_start,<sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>*pOut_buf_next,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pOut_buf_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>decomp_flags);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal/private<sp/>bits<sp/>follow.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dad908ef7390a1643b0f0dece0d816bd64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dad908ef7390a1643b0f0dece0d816bd64" kindref="member">TINFL_MAX_HUFF_TABLES</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="848" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" kindref="member">TINFL_MAX_HUFF_SYMBOLS_0</ref><sp/>=<sp/>288,</highlight></codeline>
<codeline lineno="849" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dac44807ea07817afa2b5e97b5bfc204fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dac44807ea07817afa2b5e97b5bfc204fb" kindref="member">TINFL_MAX_HUFF_SYMBOLS_1</ref><sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="850" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da534af4e11dc848dc29c16f276a6a428e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da534af4e11dc848dc29c16f276a6a428e" kindref="member">TINFL_MAX_HUFF_SYMBOLS_2</ref><sp/>=<sp/>19,</highlight></codeline>
<codeline lineno="851" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dae20e8613820bdf626439b9265dc5e4a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dae20e8613820bdf626439b9265dc5e4a1" kindref="member">TINFL_FAST_LOOKUP_BITS</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="852" refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da650112828c38f327bd914ec150855c87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da650112828c38f327bd914ec150855c87" kindref="member">TINFL_FAST_LOOKUP_SIZE</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dae20e8613820bdf626439b9265dc5e4a1" kindref="member">TINFL_FAST_LOOKUP_BITS</ref></highlight></codeline>
<codeline lineno="853"><highlight class="normal">};</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="structtinfl__huff__table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="857" refid="structtinfl__huff__table_1a31f719d4829db3d6646139d5249094cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/>m_code_size[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" kindref="member">TINFL_MAX_HUFF_SYMBOLS_0</ref>];</highlight></codeline>
<codeline lineno="858" refid="structtinfl__huff__table_1a1208fe7e128f00188f99ba6f51fa9af6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a5a94836eff2f4841bcdd2eb4ea3b8cc4" kindref="member">mz_int16</ref><sp/>m_look_up[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035da650112828c38f327bd914ec150855c87" kindref="member">TINFL_FAST_LOOKUP_SIZE</ref>],<sp/>m_tree[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" kindref="member">TINFL_MAX_HUFF_SYMBOLS_0</ref><sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}<sp/><ref refid="structtinfl__huff__table" kindref="compound">tinfl_huff_table</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MINIZ_HAS_64BIT_REGISTERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINFL_USE_64BIT_BITBUF<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TINFL_USE_64BIT_BITBUF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="miniz_8h_1af6af194c507342cda458498cd37ca418" kindref="member">tinfl_bit_buf_t</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINFL_BITBUF_SIZE<sp/>(64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869" refid="miniz_8h_1af6af194c507342cda458498cd37ca418" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="miniz_8h_1af6af194c507342cda458498cd37ca418" kindref="member">tinfl_bit_buf_t</ref>;</highlight></codeline>
<codeline lineno="870" refid="miniz_8h_1a8749219bfc4c8fe35661f5c22ede4bc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINFL_BITBUF_SIZE<sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="structtinfl__decompressor__tag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtinfl__decompressor__tag" kindref="compound">tinfl_decompressor_tag</ref></highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875" refid="structtinfl__decompressor__tag_1aa20c2fae45d99a1ae97fb7d58fefcd48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structtinfl__decompressor__tag_1a92296a332b76f047a4cd7ad8437c4735" kindref="member">m_state</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1aa27988907a00d70bbeb36f4c4c09a2cf" kindref="member">m_num_bits</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1a3f27466b6f5ec49b73db82fde43118c3" kindref="member">m_zhdr0</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1aa20c2fae45d99a1ae97fb7d58fefcd48" kindref="member">m_zhdr1</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1aab03536da4b49c3125b11f8c7e999895" kindref="member">m_z_adler32</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1a39ed69be124315c9b42358d27b285987" kindref="member">m_final</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1a25a2446091964983dc8a4b01064a287c" kindref="member">m_type</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1a80c6f22b32fb288a5d376f6f93b2d63d" kindref="member">m_check_adler32</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1ad0221a26f3135d362943de2e2806aa12" kindref="member">m_dist</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1a55d43ca0603c01e6b40945c901e1343e" kindref="member">m_counter</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1af646c16845f58dd81ee8dc03e0fc2a43" kindref="member">m_num_extra</ref>,<sp/><ref refid="structtinfl__decompressor__tag_1ac592ab5540fb0bd0ae64867ed50402b2" kindref="member">m_table_sizes</ref>[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dad908ef7390a1643b0f0dece0d816bd64" kindref="member">TINFL_MAX_HUFF_TABLES</ref>];</highlight></codeline>
<codeline lineno="876" refid="structtinfl__decompressor__tag_1a534e77162cb88e3d5b2ca52378860e04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>tinfl_bit_buf_t<sp/><ref refid="structtinfl__decompressor__tag_1a534e77162cb88e3d5b2ca52378860e04" kindref="member">m_bit_buf</ref>;</highlight></codeline>
<codeline lineno="877" refid="structtinfl__decompressor__tag_1a7f3575865115ab117d1d16afd5c173d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structtinfl__decompressor__tag_1a7f3575865115ab117d1d16afd5c173d9" kindref="member">m_dist_from_out_buf_start</ref>;</highlight></codeline>
<codeline lineno="878" refid="structtinfl__decompressor__tag_1a98139fb01bb5d503cb24acbd23af33a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtinfl__huff__table" kindref="compound">tinfl_huff_table</ref><sp/><ref refid="structtinfl__decompressor__tag_1a98139fb01bb5d503cb24acbd23af33a1" kindref="member">m_tables</ref>[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dad908ef7390a1643b0f0dece0d816bd64" kindref="member">TINFL_MAX_HUFF_TABLES</ref>];</highlight></codeline>
<codeline lineno="879" refid="structtinfl__decompressor__tag_1a9e1f3aec5562c9b6fe92d96ad70b6d29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9354eca32f90733aa9bb3738c92da596" kindref="member">mz_uint8</ref><sp/><ref refid="structtinfl__decompressor__tag_1a9e1f3aec5562c9b6fe92d96ad70b6d29" kindref="member">m_raw_header</ref>[4],<sp/><ref refid="structtinfl__decompressor__tag_1adb33b4be77767c95e8b1816567583ba1" kindref="member">m_len_codes</ref>[<ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dabc60f0bf72551ed7cbbf1ed9b20752ba" kindref="member">TINFL_MAX_HUFF_SYMBOLS_0</ref><sp/>+<sp/><ref refid="miniz_8h_1abc5c98fcc1211af2b80116dd6e0a035dac44807ea07817afa2b5e97b5bfc204fb" kindref="member">TINFL_MAX_HUFF_SYMBOLS_1</ref><sp/>+<sp/>137];</highlight></codeline>
<codeline lineno="880"><highlight class="normal">};</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>ZIP<sp/>archive<sp/>reading/writing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_ARCHIVE_APIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>These<sp/>enums<sp/>can<sp/>be<sp/>reduced<sp/>as<sp/>needed<sp/>to<sp/>save<sp/>memory<sp/>or<sp/>stack<sp/>space<sp/>-<sp/>they<sp/>are<sp/>pretty<sp/>conservative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a5b5935618c8f80bac84484ffa644df05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a5b5935618c8f80bac84484ffa644df05" kindref="member">MZ_ZIP_MAX_IO_BUF_SIZE</ref><sp/>=<sp/>64<sp/>*<sp/>1024,</highlight></codeline>
<codeline lineno="901" refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8aea0de5eaaef93308322a12ea1097b370" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8aea0de5eaaef93308322a12ea1097b370" kindref="member">MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE</ref><sp/>=<sp/>512,</highlight></codeline>
<codeline lineno="902" refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1705abc3aa04db87446b6477bffc4899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1705abc3aa04db87446b6477bffc4899" kindref="member">MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE</ref><sp/>=<sp/>512</highlight></codeline>
<codeline lineno="903"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="structmz__zip__archive__file__stat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Central<sp/>directory<sp/>file<sp/>index.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908" refid="structmz__zip__archive__file__stat_1a9a7f0737f031b23a29c58fc7ff2bd131" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a9a7f0737f031b23a29c58fc7ff2bd131" kindref="member">m_file_index</ref>;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byte<sp/>offset<sp/>of<sp/>this<sp/>entry<sp/>in<sp/>the<sp/>archive&apos;s<sp/>central<sp/>directory.<sp/>Note<sp/>we<sp/>currently<sp/>only<sp/>support<sp/>up<sp/>to<sp/>UINT_MAX<sp/>or<sp/>less<sp/>bytes<sp/>in<sp/>the<sp/>central<sp/>dir.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="structmz__zip__archive__file__stat_1a79ac549bef6a828b37e4dc72d9282d1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a79ac549bef6a828b37e4dc72d9282d1e" kindref="member">m_central_dir_ofs</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>copied<sp/>directly<sp/>from<sp/>the<sp/>zip&apos;s<sp/>central<sp/>dir.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="structmz__zip__archive__file__stat_1a3038faf9c1f24f2bf48eab9cc2b8ce8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a3038faf9c1f24f2bf48eab9cc2b8ce8c" kindref="member">m_version_made_by</ref>;</highlight></codeline>
<codeline lineno="915" refid="structmz__zip__archive__file__stat_1a0cfb77699313b855dcd1b5bed9dfb93a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a0cfb77699313b855dcd1b5bed9dfb93a" kindref="member">m_version_needed</ref>;</highlight></codeline>
<codeline lineno="916" refid="structmz__zip__archive__file__stat_1ac9fdb10d21124d44be05ef0c04c1ad15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/><ref refid="structmz__zip__archive__file__stat_1ac9fdb10d21124d44be05ef0c04c1ad15" kindref="member">m_bit_flag</ref>;</highlight></codeline>
<codeline lineno="917" refid="structmz__zip__archive__file__stat_1ae1a9a8fbc09a4c3c14b04667d0f2d189" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/><ref refid="structmz__zip__archive__file__stat_1ae1a9a8fbc09a4c3c14b04667d0f2d189" kindref="member">m_method</ref>;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="structmz__zip__archive__file__stat_1ad9da17b1b5d7c66be26257c98f2492a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" kindref="member">MZ_TIME_T</ref><sp/><ref refid="structmz__zip__archive__file__stat_1ad9da17b1b5d7c66be26257c98f2492a9" kindref="member">m_time</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CRC-32<sp/>of<sp/>uncompressed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924" refid="structmz__zip__archive__file__stat_1af9fe260b684c70c1725a8b100cbd97a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structmz__zip__archive__file__stat_1af9fe260b684c70c1725a8b100cbd97a8" kindref="member">m_crc32</ref>;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>File&apos;s<sp/>compressed<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="structmz__zip__archive__file__stat_1ae2ac087fa11585219308de1677000ab3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive__file__stat_1ae2ac087fa11585219308de1677000ab3" kindref="member">m_comp_size</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>File&apos;s<sp/>uncompressed<sp/>size.<sp/>Note,<sp/>I&apos;ve<sp/>seen<sp/>some<sp/>old<sp/>archives<sp/>where<sp/>directory<sp/>entries<sp/>had<sp/>512<sp/>bytes<sp/>for<sp/>their<sp/>uncompressed<sp/>sizes,<sp/>but<sp/>when<sp/>you<sp/>try<sp/>to<sp/>unpack<sp/>them<sp/>you<sp/>actually<sp/>get<sp/>0<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="structmz__zip__archive__file__stat_1aa55ee3580a844400d4bd43be27ae3808" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive__file__stat_1aa55ee3580a844400d4bd43be27ae3808" kindref="member">m_uncomp_size</ref>;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Zip<sp/>internal<sp/>and<sp/>external<sp/>file<sp/>attributes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933" refid="structmz__zip__archive__file__stat_1ad628219b167bef01305e8fa09a1f10d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/><ref refid="structmz__zip__archive__file__stat_1ad628219b167bef01305e8fa09a1f10d1" kindref="member">m_internal_attr</ref>;</highlight></codeline>
<codeline lineno="934" refid="structmz__zip__archive__file__stat_1a0303a6779c89c31eecf62b4744913272" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a0303a6779c89c31eecf62b4744913272" kindref="member">m_external_attr</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry&apos;s<sp/>local<sp/>header<sp/>file<sp/>offset<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="structmz__zip__archive__file__stat_1acc27b6ca5dd7159c19bc3dc32e844ac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive__file__stat_1acc27b6ca5dd7159c19bc3dc32e844ac7" kindref="member">m_local_header_ofs</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>comment<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="structmz__zip__archive__file__stat_1aacf4d95d27894acac1303f51542c51b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structmz__zip__archive__file__stat_1aacf4d95d27894acac1303f51542c51b6" kindref="member">m_comment_size</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>entry<sp/>appears<sp/>to<sp/>be<sp/>a<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943" refid="structmz__zip__archive__file__stat_1a02509653cc5553e63a1053802f808cbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a02509653cc5553e63a1053802f808cbc" kindref="member">m_is_directory</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>entry<sp/>uses<sp/>encryption/strong<sp/>encryption<sp/>(which<sp/>miniz_zip<sp/>doesn&apos;t<sp/>support)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="structmz__zip__archive__file__stat_1a952eb97b58881df827ce3808071e7754" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a952eb97b58881df827ce3808071e7754" kindref="member">m_is_encrypted</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>file<sp/>is<sp/>not<sp/>encrypted,<sp/>a<sp/>patch<sp/>file,<sp/>and<sp/>if<sp/>it<sp/>uses<sp/>a<sp/>compression<sp/>method<sp/>we<sp/>support.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="structmz__zip__archive__file__stat_1a4742f25dec4e490bedc1262b96e49ed6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="structmz__zip__archive__file__stat_1a4742f25dec4e490bedc1262b96e49ed6" kindref="member">m_is_supported</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filename.<sp/>If<sp/>string<sp/>ends<sp/>in<sp/>&apos;/&apos;<sp/>it&apos;s<sp/>a<sp/>subdirectory<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Guaranteed<sp/>to<sp/>be<sp/>zero<sp/>terminated,<sp/>may<sp/>be<sp/>truncated<sp/>to<sp/>fit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953" refid="structmz__zip__archive__file__stat_1ae500a60c1ca2d56199fa06f54036abea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m_filename[<ref refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8aea0de5eaaef93308322a12ea1097b370" kindref="member">MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE</ref>];</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Comment<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Guaranteed<sp/>to<sp/>be<sp/>zero<sp/>terminated,<sp/>may<sp/>be<sp/>truncated<sp/>to<sp/>fit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="structmz__zip__archive__file__stat_1afb0f2b80d59f134f6fee4c8728649119" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m_comment[<ref refid="miniz_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1705abc3aa04db87446b6477bffc4899" kindref="member">MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE</ref>];</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal">}<sp/><ref refid="structmz__zip__archive__file__stat" kindref="compound">mz_zip_archive_file_stat</ref>;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961" refid="miniz_8h_1a88993adb5262c6e17495f22790b22bdd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="miniz_8h_1a88993adb5262c6e17495f22790b22bdd" kindref="member">mz_file_read_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOpaque,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>file_ofs,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="962" refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOpaque,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>file_ofs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="963" refid="miniz_8h_1ad7bc23cd7073bca03279afc2f57dc50f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/>(*<ref refid="miniz_8h_1ad7bc23cd7073bca03279afc2f57dc50f" kindref="member">mz_file_needs_keepalive</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOpaque);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmz__zip__internal__state__tag" kindref="compound">mz_zip_internal_state_tag</ref>;</highlight></codeline>
<codeline lineno="966" refid="miniz_8h_1a2f5efde14c151952d14c6a231b7767ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmz__zip__internal__state__tag" kindref="compound">mz_zip_internal_state_tag</ref><sp/><ref refid="structmz__zip__internal__state__tag" kindref="compound">mz_zip_internal_state</ref>;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970" refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a713f3b45f38e966b751027436df64e50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a713f3b45f38e966b751027436df64e50" kindref="member">MZ_ZIP_MODE_INVALID</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="971" refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a40c391220d01d172a451f3dad0d5aed6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a40c391220d01d172a451f3dad0d5aed6" kindref="member">MZ_ZIP_MODE_READING</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="972" refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a3b3ad1c596f00688f17e2672c1a20064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3a3b3ad1c596f00688f17e2672c1a20064" kindref="member">MZ_ZIP_MODE_WRITING</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="973" refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3ab445229af27a6e8c9d512d12265dea5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3ab445229af27a6e8c9d512d12265dea5b" kindref="member">MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED</ref><sp/>=<sp/>3</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}<sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" kindref="member">mz_zip_mode</ref>;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="978" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858abcc2b8dd27fc7b4889bbf2fa15896b3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858abcc2b8dd27fc7b4889bbf2fa15896b3b" kindref="member">MZ_ZIP_FLAG_CASE_SENSITIVE</ref><sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="979" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858aee414b99330e685f4405b2c5ba3bcc1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858aee414b99330e685f4405b2c5ba3bcc1e" kindref="member">MZ_ZIP_FLAG_IGNORE_PATH</ref><sp/>=<sp/>0x0200,</highlight></codeline>
<codeline lineno="980" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a8bd495808a247010b31dc240588f51d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a8bd495808a247010b31dc240588f51d9" kindref="member">MZ_ZIP_FLAG_COMPRESSED_DATA</ref><sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="981" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858ab09115999c35684b92cd771f65909e39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858ab09115999c35684b92cd771f65909e39" kindref="member">MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY</ref><sp/>=<sp/>0x0800,</highlight></codeline>
<codeline lineno="982" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a7859626934ae9a84d1fa7620ecb69f27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a7859626934ae9a84d1fa7620ecb69f27" kindref="member">MZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG</ref><sp/>=<sp/>0x1000,<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>enabled,<sp/>mz_zip_reader_locate_file()<sp/>will<sp/>be<sp/>called<sp/>on<sp/>each<sp/>file<sp/>as<sp/>its<sp/>validated<sp/>to<sp/>ensure<sp/>the<sp/>func<sp/>finds<sp/>the<sp/>file<sp/>in<sp/>the<sp/>central<sp/>dir<sp/>(intended<sp/>for<sp/>testing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a5d61357918be9c723e1765d6e0cf660f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a5d61357918be9c723e1765d6e0cf660f" kindref="member">MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY</ref><sp/>=<sp/>0x2000,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>the<sp/>local<sp/>headers,<sp/>but<sp/>don&apos;t<sp/>decompress<sp/>the<sp/>entire<sp/>file<sp/>and<sp/>check<sp/>the<sp/>crc32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a43306564d2afb7c7347cd7041481fa36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a43306564d2afb7c7347cd7041481fa36" kindref="member">MZ_ZIP_FLAG_WRITE_ZIP64</ref><sp/>=<sp/>0x4000,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>the<sp/>zip64<sp/>file<sp/>format,<sp/>instead<sp/>of<sp/>the<sp/>original<sp/>zip<sp/>file<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a4e7e927edda20a28027f4c4a43a4b2e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a4e7e927edda20a28027f4c4a43a4b2e2" kindref="member">MZ_ZIP_FLAG_WRITE_ALLOW_READING</ref><sp/>=<sp/>0x8000,</highlight></codeline>
<codeline lineno="986" refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a39d93b5c2db828e2fd3331d1421dc6c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858a39d93b5c2db828e2fd3331d1421dc6c5" kindref="member">MZ_ZIP_FLAG_ASCII_FILENAME</ref><sp/>=<sp/>0x10000</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}<sp/><ref refid="miniz_8h_1a0b7f6f797da7a3d078535ba71ca00858" kindref="member">mz_zip_flags</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="991" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4ae9586e76c9fa668b613a5a7172aa8824" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4ae9586e76c9fa668b613a5a7172aa8824" kindref="member">MZ_ZIP_TYPE_INVALID</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="992" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a01c18c633c1058f9e758e30169ea5170" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a01c18c633c1058f9e758e30169ea5170" kindref="member">MZ_ZIP_TYPE_USER</ref>,</highlight></codeline>
<codeline lineno="993" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a74c17a3e487cc9d8732404550466195b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a74c17a3e487cc9d8732404550466195b" kindref="member">MZ_ZIP_TYPE_MEMORY</ref>,</highlight></codeline>
<codeline lineno="994" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a59eb97f502e48ac0d4e0979919c822e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a59eb97f502e48ac0d4e0979919c822e5" kindref="member">MZ_ZIP_TYPE_HEAP</ref>,</highlight></codeline>
<codeline lineno="995" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a1c755e926bbf9197e0d64a0387a4e70a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a1c755e926bbf9197e0d64a0387a4e70a" kindref="member">MZ_ZIP_TYPE_FILE</ref>,</highlight></codeline>
<codeline lineno="996" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a83f61a4c11f3ac2eb415546785502af7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a83f61a4c11f3ac2eb415546785502af7" kindref="member">MZ_ZIP_TYPE_CFILE</ref>,</highlight></codeline>
<codeline lineno="997" refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a6bb0fee6f478d240df2efb89b5022607" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4a6bb0fee6f478d240df2efb89b5022607" kindref="member">MZ_ZIP_TOTAL_TYPES</ref></highlight></codeline>
<codeline lineno="998"><highlight class="normal">}<sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4" kindref="member">mz_zip_type</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>miniz<sp/>error<sp/>codes.<sp/>Be<sp/>sure<sp/>to<sp/>update<sp/>mz_zip_get_error_string()<sp/>if<sp/>you<sp/>add<sp/>or<sp/>modify<sp/>this<sp/>enum.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d0cd76e20534ea0d5777ac0c3601db9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d0cd76e20534ea0d5777ac0c3601db9" kindref="member">MZ_ZIP_NO_ERROR</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1004" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da75be265e4f600498fb28f2a42f4c9705" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da75be265e4f600498fb28f2a42f4c9705" kindref="member">MZ_ZIP_UNDEFINED_ERROR</ref>,</highlight></codeline>
<codeline lineno="1005" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da72b70e986fc0d33212f6a898e3e6ee94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da72b70e986fc0d33212f6a898e3e6ee94" kindref="member">MZ_ZIP_TOO_MANY_FILES</ref>,</highlight></codeline>
<codeline lineno="1006" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da1365f1c2703389a5e6d5b5bbcca37859" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da1365f1c2703389a5e6d5b5bbcca37859" kindref="member">MZ_ZIP_FILE_TOO_LARGE</ref>,</highlight></codeline>
<codeline lineno="1007" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da003e8bf2463b5f3849242b3808e4d6fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da003e8bf2463b5f3849242b3808e4d6fe" kindref="member">MZ_ZIP_UNSUPPORTED_METHOD</ref>,</highlight></codeline>
<codeline lineno="1008" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d29d37c6300c91cb5fc9a66d1cb1db1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da6d29d37c6300c91cb5fc9a66d1cb1db1" kindref="member">MZ_ZIP_UNSUPPORTED_ENCRYPTION</ref>,</highlight></codeline>
<codeline lineno="1009" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da079e286899478ed53a7473f1816a692f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da079e286899478ed53a7473f1816a692f" kindref="member">MZ_ZIP_UNSUPPORTED_FEATURE</ref>,</highlight></codeline>
<codeline lineno="1010" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dadce5afd210f3689e58e71ed2acc02d6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dadce5afd210f3689e58e71ed2acc02d6c" kindref="member">MZ_ZIP_FAILED_FINDING_CENTRAL_DIR</ref>,</highlight></codeline>
<codeline lineno="1011" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daeab66c528acdb43f7946e6411f515083" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daeab66c528acdb43f7946e6411f515083" kindref="member">MZ_ZIP_NOT_AN_ARCHIVE</ref>,</highlight></codeline>
<codeline lineno="1012" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dab6d04beda1c9d8cd1e41fa8b822daaf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dab6d04beda1c9d8cd1e41fa8b822daaf2" kindref="member">MZ_ZIP_INVALID_HEADER_OR_CORRUPTED</ref>,</highlight></codeline>
<codeline lineno="1013" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da8c4bcce26300af775c179d6b0a35aff7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da8c4bcce26300af775c179d6b0a35aff7" kindref="member">MZ_ZIP_UNSUPPORTED_MULTIDISK</ref>,</highlight></codeline>
<codeline lineno="1014" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa713f636687cfc5db4a588d6378a6a10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa713f636687cfc5db4a588d6378a6a10" kindref="member">MZ_ZIP_DECOMPRESSION_FAILED</ref>,</highlight></codeline>
<codeline lineno="1015" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5ff902fe9d66d26053d8a3c11d383460" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5ff902fe9d66d26053d8a3c11d383460" kindref="member">MZ_ZIP_COMPRESSION_FAILED</ref>,</highlight></codeline>
<codeline lineno="1016" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dae3b0b6f3ca889a916c69c518a54ee755" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dae3b0b6f3ca889a916c69c518a54ee755" kindref="member">MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE</ref>,</highlight></codeline>
<codeline lineno="1017" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da388518d305e53c51b07205856d0a8464" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da388518d305e53c51b07205856d0a8464" kindref="member">MZ_ZIP_CRC_CHECK_FAILED</ref>,</highlight></codeline>
<codeline lineno="1018" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dace5ba2a072f9f615873588e7ebc56ab3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dace5ba2a072f9f615873588e7ebc56ab3" kindref="member">MZ_ZIP_UNSUPPORTED_CDIR_SIZE</ref>,</highlight></codeline>
<codeline lineno="1019" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da9064de836ee72409214e860e84bad1b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da9064de836ee72409214e860e84bad1b2" kindref="member">MZ_ZIP_ALLOC_FAILED</ref>,</highlight></codeline>
<codeline lineno="1020" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da0c392e441dd7e14e4731686e8f3369ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da0c392e441dd7e14e4731686e8f3369ed" kindref="member">MZ_ZIP_FILE_OPEN_FAILED</ref>,</highlight></codeline>
<codeline lineno="1021" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da46b987d2968fe9d076a619e3ca9c68e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da46b987d2968fe9d076a619e3ca9c68e9" kindref="member">MZ_ZIP_FILE_CREATE_FAILED</ref>,</highlight></codeline>
<codeline lineno="1022" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa73c6e75a712dffca2370e8bd388b1da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daa73c6e75a712dffca2370e8bd388b1da" kindref="member">MZ_ZIP_FILE_WRITE_FAILED</ref>,</highlight></codeline>
<codeline lineno="1023" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dacf573b3be570b5b1fea0e8ee7a35840c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dacf573b3be570b5b1fea0e8ee7a35840c" kindref="member">MZ_ZIP_FILE_READ_FAILED</ref>,</highlight></codeline>
<codeline lineno="1024" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da425368dd51a2a374f88b285338098851" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da425368dd51a2a374f88b285338098851" kindref="member">MZ_ZIP_FILE_CLOSE_FAILED</ref>,</highlight></codeline>
<codeline lineno="1025" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dafada0e6e18c6a880a9a5af7848cceb54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dafada0e6e18c6a880a9a5af7848cceb54" kindref="member">MZ_ZIP_FILE_SEEK_FAILED</ref>,</highlight></codeline>
<codeline lineno="1026" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da593c3fe2d2ebf99b215bca2b60e6913e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da593c3fe2d2ebf99b215bca2b60e6913e" kindref="member">MZ_ZIP_FILE_STAT_FAILED</ref>,</highlight></codeline>
<codeline lineno="1027" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daad4e7e3731b0f050c53b7eeabcbdfdcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daad4e7e3731b0f050c53b7eeabcbdfdcc" kindref="member">MZ_ZIP_INVALID_PARAMETER</ref>,</highlight></codeline>
<codeline lineno="1028" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5f3d5a8641212fa3ad820bcb94124cc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da5f3d5a8641212fa3ad820bcb94124cc2" kindref="member">MZ_ZIP_INVALID_FILENAME</ref>,</highlight></codeline>
<codeline lineno="1029" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da4dd840e5a7def295e6a0a5eb8785a024" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da4dd840e5a7def295e6a0a5eb8785a024" kindref="member">MZ_ZIP_BUF_TOO_SMALL</ref>,</highlight></codeline>
<codeline lineno="1030" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da399161cc4d02bf0bb1815089d2bbdeb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da399161cc4d02bf0bb1815089d2bbdeb8" kindref="member">MZ_ZIP_INTERNAL_ERROR</ref>,</highlight></codeline>
<codeline lineno="1031" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dad845112f4958dee455d1be8cc8e0fd04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6dad845112f4958dee455d1be8cc8e0fd04" kindref="member">MZ_ZIP_FILE_NOT_FOUND</ref>,</highlight></codeline>
<codeline lineno="1032" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da99db269c395156b2ecaa9e39a0596601" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da99db269c395156b2ecaa9e39a0596601" kindref="member">MZ_ZIP_ARCHIVE_TOO_LARGE</ref>,</highlight></codeline>
<codeline lineno="1033" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da575251baf4e25b05f6cda0253cd2f49f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da575251baf4e25b05f6cda0253cd2f49f" kindref="member">MZ_ZIP_VALIDATION_FAILED</ref>,</highlight></codeline>
<codeline lineno="1034" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da2be5cd9afd4fd0fe1b36b753e377658f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6da2be5cd9afd4fd0fe1b36b753e377658f" kindref="member">MZ_ZIP_WRITE_CALLBACK_FAILED</ref>,</highlight></codeline>
<codeline lineno="1035" refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daefcdc42228132e6a582da470fa402538" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6daefcdc42228132e6a582da470fa402538" kindref="member">MZ_ZIP_TOTAL_ERRORS</ref></highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref>;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="structmz__zip__archive" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040" refid="structmz__zip__archive_1a45a402e348cc83629be5453441878d81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive_1a45a402e348cc83629be5453441878d81" kindref="member">m_archive_size</ref>;</highlight></codeline>
<codeline lineno="1041" refid="structmz__zip__archive_1a128125bc28f4d1f118fe7b9badd0f975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive_1a128125bc28f4d1f118fe7b9badd0f975" kindref="member">m_central_directory_file_ofs</ref>;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>only<sp/>support<sp/>up<sp/>to<sp/>UINT32_MAX<sp/>files<sp/>in<sp/>zip64<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="structmz__zip__archive_1afd3d9bd1f542c57aae52c8d6fad6f387" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/><ref refid="structmz__zip__archive_1afd3d9bd1f542c57aae52c8d6fad6f387" kindref="member">m_total_files</ref>;</highlight></codeline>
<codeline lineno="1045" refid="structmz__zip__archive_1a3015327b3da7922ae56ae73bb99b4fae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" kindref="member">mz_zip_mode</ref><sp/><ref refid="structmz__zip__archive_1a3015327b3da7922ae56ae73bb99b4fae" kindref="member">m_zip_mode</ref>;</highlight></codeline>
<codeline lineno="1046" refid="structmz__zip__archive_1ae63ea3648c32998d2b17cc6dc6401671" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4" kindref="member">mz_zip_type</ref><sp/><ref refid="structmz__zip__archive_1ae63ea3648c32998d2b17cc6dc6401671" kindref="member">m_zip_type</ref>;</highlight></codeline>
<codeline lineno="1047" refid="structmz__zip__archive_1a1b7722292a33d849b861e23bf94f69d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/><ref refid="structmz__zip__archive_1a1b7722292a33d849b861e23bf94f69d9" kindref="member">m_last_error</ref>;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="structmz__zip__archive_1ad0a89dcb30f4b8fc8b1a94c9df93d0ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="structmz__zip__archive_1ad0a89dcb30f4b8fc8b1a94c9df93d0ff" kindref="member">m_file_offset_alignment</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="structmz__zip__archive_1a1ee45d07ddf4439065e62c12f7de3286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a8145a3e9c9fac12ec4089a6e39ba9f4f" kindref="member">mz_alloc_func</ref><sp/><ref refid="structmz__zip__archive_1a1ee45d07ddf4439065e62c12f7de3286" kindref="member">m_pAlloc</ref>;</highlight></codeline>
<codeline lineno="1052" refid="structmz__zip__archive_1abb6dbd66d702cdffc05a885f8448003d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ac00f79fc7189a19f9729dbd9b82c8380" kindref="member">mz_free_func</ref><sp/><ref refid="structmz__zip__archive_1abb6dbd66d702cdffc05a885f8448003d" kindref="member">m_pFree</ref>;</highlight></codeline>
<codeline lineno="1053" refid="structmz__zip__archive_1ac3cdd59e8bcc156954790af62fee92e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a9adc24aaf31eeb77293ebdb97ab6463c" kindref="member">mz_realloc_func</ref><sp/><ref refid="structmz__zip__archive_1ac3cdd59e8bcc156954790af62fee92e8" kindref="member">m_pRealloc</ref>;</highlight></codeline>
<codeline lineno="1054" refid="structmz__zip__archive_1a54c3a1be907a1e075a112ff06b191644" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmz__zip__archive_1a54c3a1be907a1e075a112ff06b191644" kindref="member">m_pAlloc_opaque</ref>;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056" refid="structmz__zip__archive_1ac3df2038c7486a5df1ed51bfa3f7443c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a88993adb5262c6e17495f22790b22bdd" kindref="member">mz_file_read_func</ref><sp/><ref refid="structmz__zip__archive_1ac3df2038c7486a5df1ed51bfa3f7443c" kindref="member">m_pRead</ref>;</highlight></codeline>
<codeline lineno="1057" refid="structmz__zip__archive_1a999d2d2e54211bfe0606008b6597f0d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref><sp/><ref refid="structmz__zip__archive_1a999d2d2e54211bfe0606008b6597f0d5" kindref="member">m_pWrite</ref>;</highlight></codeline>
<codeline lineno="1058" refid="structmz__zip__archive_1a943ea385742e04f7995cb54b46892213" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad7bc23cd7073bca03279afc2f57dc50f" kindref="member">mz_file_needs_keepalive</ref><sp/><ref refid="structmz__zip__archive_1a943ea385742e04f7995cb54b46892213" kindref="member">m_pNeeds_keepalive</ref>;</highlight></codeline>
<codeline lineno="1059" refid="structmz__zip__archive_1a477d8ad842fa3707c2330454c8173f7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmz__zip__archive_1a477d8ad842fa3707c2330454c8173f7d" kindref="member">m_pIO_opaque</ref>;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061" refid="structmz__zip__archive_1a9d47a170d9f54452fcfe1152c26af40b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmz__zip__internal__state__tag" kindref="compound">mz_zip_internal_state</ref><sp/>*<ref refid="structmz__zip__archive_1a9d47a170d9f54452fcfe1152c26af40b" kindref="member">m_pState</ref>;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}<sp/><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref>;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------<sp/>ZIP<sp/>reading<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Inits<sp/>a<sp/>ZIP<sp/>archive<sp/>reader.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>functions<sp/>read<sp/>and<sp/>validate<sp/>the<sp/>archive&apos;s<sp/>central<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a5aeef8648af76ac95c3d8e2f43be095e" kindref="member">mz_zip_reader_init</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a6806f0e4c2e8320f33188e12ec0b63b6" kindref="member">mz_zip_reader_init_mem</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pMem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>a<sp/>archive<sp/>from<sp/>a<sp/>disk<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>file_start_ofs<sp/>is<sp/>the<sp/>file<sp/>offset<sp/>where<sp/>the<sp/>archive<sp/>actually<sp/>begins,<sp/>or<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>actual_archive_size<sp/>is<sp/>the<sp/>true<sp/>total<sp/>size<sp/>of<sp/>the<sp/>archive,<sp/>which<sp/>may<sp/>be<sp/>smaller<sp/>than<sp/>the<sp/>file&apos;s<sp/>actual<sp/>size<sp/>on<sp/>disk.<sp/>If<sp/>zero<sp/>the<sp/>entire<sp/>file<sp/>is<sp/>treated<sp/>as<sp/>the<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a24e55b3b8f9f7722a43117d8a3497eff" kindref="member">mz_zip_reader_init_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1aac2174a6cb49f234d050051bff59bfdd" kindref="member">mz_zip_reader_init_file_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>file_start_ofs,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>archive_size);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>an<sp/>archive<sp/>from<sp/>an<sp/>already<sp/>opened<sp/>FILE,<sp/>beginning<sp/>at<sp/>the<sp/>current<sp/>file<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>archive<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>archive_size<sp/>bytes<sp/>long.<sp/>If<sp/>archive_size<sp/>is<sp/>&lt;<sp/>0,<sp/>then<sp/>the<sp/>entire<sp/>rest<sp/>of<sp/>the<sp/>file<sp/>is<sp/>assumed<sp/>to<sp/>contain<sp/>the<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>FILE<sp/>will<sp/>NOT<sp/>be<sp/>closed<sp/>when<sp/>mz_zip_reader_end()<sp/>is<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1adf32b3615759bd3db23877eb95d106d5" kindref="member">mz_zip_reader_init_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*pFile,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>archive_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>archive<sp/>reading,<sp/>freeing<sp/>all<sp/>allocations,<sp/>and<sp/>closing<sp/>the<sp/>input<sp/>archive<sp/>file<sp/>if<sp/>mz_zip_reader_init_file()<sp/>was<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a0cf333c7781de5d56d24d70e573507e2" kindref="member">mz_zip_reader_end</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------<sp/>ZIP<sp/>reading<sp/>or<sp/>writing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clears<sp/>a<sp/>mz_zip_archive<sp/>struct<sp/>to<sp/>all<sp/>zeros.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Important:<sp/>This<sp/>must<sp/>be<sp/>done<sp/>before<sp/>passing<sp/>the<sp/>struct<sp/>to<sp/>any<sp/>mz_zip<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a8c64687454aca17948eb58730dc6f41b" kindref="member">mz_zip_zero_struct</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><ref refid="miniz_8h_1ad909f6ff4c74a79b317e306a164c77f3" kindref="member">mz_zip_mode</ref><sp/><ref refid="miniz_8h_1a388a0652c3c8d2b75a418fb2966efe2c" kindref="member">mz_zip_get_mode</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><ref refid="miniz_8h_1a9e009caf9b469d91618c184666c50da4" kindref="member">mz_zip_type</ref><sp/><ref refid="miniz_8h_1a10e9a214efba7f8c6740f05eaafaaf83" kindref="member">mz_zip_get_type</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>total<sp/>number<sp/>of<sp/>files<sp/>in<sp/>the<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/><ref refid="miniz_8h_1a1cb6b5d48f24b9aef3cb0a3f63793166" kindref="member">mz_zip_reader_get_num_files</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="miniz_8h_1a8ff0f5ba2757db9b36eafcf9cbdbdadd" kindref="member">mz_zip_get_archive_size</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/><ref refid="miniz_8h_1aaf20afef8b149b8653572002646e7e0a" kindref="member">mz_zip_get_archive_file_start_offset</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*<ref refid="miniz_8h_1a88c5879a7ef605d4d6f5e21557c7c145" kindref="member">mz_zip_get_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reads<sp/>n<sp/>bytes<sp/>of<sp/>raw<sp/>archive<sp/>data,<sp/>starting<sp/>at<sp/>file<sp/>offset<sp/>file_ofs,<sp/>to<sp/>pBuf.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a3e27ad8c1597bb95c808cd841ebae3b7" kindref="member">mz_zip_read_archive_data</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>file_ofs,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Attempts<sp/>to<sp/>locates<sp/>a<sp/>file<sp/>in<sp/>the<sp/>archive&apos;s<sp/>central<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Valid<sp/>flags:<sp/>MZ_ZIP_FLAG_CASE_SENSITIVE,<sp/>MZ_ZIP_FLAG_IGNORE_PATH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>-1<sp/>if<sp/>the<sp/>file<sp/>cannot<sp/>be<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a8f637bba47eee7cdb0c8db1b1ddb9a00" kindref="member">mz_zip_locate_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>MZ_FALSE<sp/>if<sp/>the<sp/>file<sp/>cannot<sp/>be<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1af81afebb11893a270e21e2d8667dd6ff" kindref="member">mz_zip_locate_file_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>*pIndex);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>All<sp/>mz_zip<sp/>funcs<sp/>set<sp/>the<sp/>m_last_error<sp/>field<sp/>in<sp/>the<sp/>mz_zip_archive<sp/>struct.<sp/>These<sp/>functions<sp/>retrieve/manipulate<sp/>this<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>the<sp/>m_last_error<sp/>functionality<sp/>is<sp/>not<sp/>thread<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/><ref refid="miniz_8h_1a9d0a18d927aab166ef7ea84cb98cd9ea" kindref="member">mz_zip_set_last_error</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>err_num);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/><ref refid="miniz_8h_1a5ab3dec70535617213e159a2c9bec0ca" kindref="member">mz_zip_peek_last_error</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/><ref refid="miniz_8h_1aece78e8972f5437affc90509550ba82c" kindref="member">mz_zip_clear_last_error</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/><ref refid="miniz_8h_1a5cc8cf2275e42cef6721b84282d690c1" kindref="member">mz_zip_get_last_error</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a6d45d0df0da44c7f373d994a9bd3786d" kindref="member">mz_zip_get_error_string</ref>(<ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>mz_err);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>archive<sp/>file<sp/>entry<sp/>is<sp/>a<sp/>directory<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a400dc4c44934e7d73706b419f4a73595" kindref="member">mz_zip_reader_is_file_a_directory</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>file<sp/>is<sp/>encrypted/strong<sp/>encrypted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a8b262a8e0d2b58d0d0d5523655bd07bc" kindref="member">mz_zip_reader_is_file_encrypted</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>compression<sp/>method<sp/>is<sp/>supported,<sp/>and<sp/>the<sp/>file<sp/>is<sp/>not<sp/>encrypted,<sp/>and<sp/>the<sp/>file<sp/>is<sp/>not<sp/>a<sp/>compressed<sp/>patch<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a996d0ae919e19b0821cebbc7ce52ce91" kindref="member">mz_zip_reader_is_file_supported</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Retrieves<sp/>the<sp/>filename<sp/>of<sp/>an<sp/>archive<sp/>file<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>written<sp/>to<sp/>pFilename,<sp/>or<sp/>if<sp/>filename_buf_size<sp/>is<sp/>0<sp/>this<sp/>function<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>needed<sp/>to<sp/>fully<sp/>store<sp/>the<sp/>filename.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/><ref refid="miniz_8h_1af5ea9749b815e356b6df09c166687d13" kindref="member">mz_zip_reader_get_filename</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>filename_buf_size);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Attempts<sp/>to<sp/>locates<sp/>a<sp/>file<sp/>in<sp/>the<sp/>archive&apos;s<sp/>central<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Valid<sp/>flags:<sp/>MZ_ZIP_FLAG_CASE_SENSITIVE,<sp/>MZ_ZIP_FLAG_IGNORE_PATH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>-1<sp/>if<sp/>the<sp/>file<sp/>cannot<sp/>be<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a84813b57c1313c2e2d94a1f62d3ab9b3" kindref="member">mz_zip_reader_locate_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1acb9595cdd4deca326d32d0bcc301d9a6" kindref="member">mz_zip_reader_locate_file_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>*file_index);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>detailed<sp/>information<sp/>about<sp/>an<sp/>archive<sp/>file<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1aa9d3abc65b4b9b91efc437ec151e9c99" kindref="member">mz_zip_reader_file_stat</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/><ref refid="structmz__zip__archive__file__stat" kindref="compound">mz_zip_archive_file_stat</ref><sp/>*pStat);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MZ_TRUE<sp/>if<sp/>the<sp/>file<sp/>is<sp/>in<sp/>zip64<sp/>format.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>file<sp/>is<sp/>considered<sp/>zip64<sp/>if<sp/>it<sp/>contained<sp/>a<sp/>zip64<sp/>end<sp/>of<sp/>central<sp/>directory<sp/>marker,<sp/>or<sp/>if<sp/>it<sp/>contained<sp/>any<sp/>zip64<sp/>extended<sp/>file<sp/>information<sp/>fields<sp/>in<sp/>the<sp/>central<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a0b0ba17abd48cc98db90960b623b1162" kindref="member">mz_zip_is_zip64</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>total<sp/>central<sp/>directory<sp/>size<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>current<sp/>max<sp/>supported<sp/>size<sp/>is<sp/>&lt;=<sp/>MZ_UINT32_MAX.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a2828228dbbcf66c0d5ecd66dafd39267" kindref="member">mz_zip_get_central_dir_size</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>to<sp/>a<sp/>memory<sp/>buffer<sp/>using<sp/>no<sp/>memory<sp/>allocation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>There<sp/>must<sp/>be<sp/>at<sp/>least<sp/>enough<sp/>room<sp/>on<sp/>the<sp/>stack<sp/>to<sp/>store<sp/>the<sp/>inflator&apos;s<sp/>state<sp/>(~34KB<sp/>or<sp/>so).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a4721777518994d4d3ba978e427565e28" kindref="member">mz_zip_reader_extract_to_mem_no_alloc</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUser_read_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>user_read_buf_size);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1ac16cec09731400cc18c3b907340ef601" kindref="member">mz_zip_reader_extract_file_to_mem_no_alloc</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUser_read_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>user_read_buf_size);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>to<sp/>a<sp/>memory<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a9aa631c7bc8147b39b6d8a910682463e" kindref="member">mz_zip_reader_extract_to_mem</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1abb734054fc4e51026c1187aa8a12a1f8" kindref="member">mz_zip_reader_extract_file_to_mem</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>to<sp/>a<sp/>dynamically<sp/>allocated<sp/>heap<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>will<sp/>be<sp/>allocated<sp/>via<sp/>the<sp/>mz_zip_archive&apos;s<sp/>alloc/realloc<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>NULL<sp/>and<sp/>sets<sp/>the<sp/>last<sp/>error<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a7387530cd78979243538a5c87132b64b" kindref="member">mz_zip_reader_extract_to_heap</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pSize,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1ac0301a766ca6023da1a58f3a3f3333c7" kindref="member">mz_zip_reader_extract_file_to_heap</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pSize,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>using<sp/>a<sp/>callback<sp/>function<sp/>to<sp/>output<sp/>the<sp/>file&apos;s<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a607bba163f72b6728191504c53bf70a8" kindref="member">mz_zip_reader_extract_to_callback</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/><ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref><sp/>pCallback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOpaque,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a2f77f2adc9a6d554f89f79e4f0207b9c" kindref="member">mz_zip_reader_extract_file_to_callback</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1a20dd8c64af05b367626a8e151c78e521" kindref="member">mz_file_write_func</ref><sp/>pCallback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pOpaque,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>to<sp/>a<sp/>disk<sp/>file<sp/>and<sp/>sets<sp/>its<sp/>last<sp/>accessed<sp/>and<sp/>modified<sp/>times.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>only<sp/>extracts<sp/>files,<sp/>not<sp/>archive<sp/>directory<sp/>records.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1af328f94aff4a5d44825959eb58bdf3c9" kindref="member">mz_zip_reader_extract_to_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pDst_filename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a5e053a05efdc3b9d210f9391382dcd9a" kindref="member">mz_zip_reader_extract_file_to_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pDst_filename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extracts<sp/>a<sp/>archive<sp/>file<sp/>starting<sp/>at<sp/>the<sp/>current<sp/>position<sp/>in<sp/>the<sp/>destination<sp/>FILE<sp/>stream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1af669041b12075550984842fb97bc7618" kindref="member">mz_zip_reader_extract_to_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*File,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1ae696e70169c739706434446c01fa6f82" kindref="member">mz_zip_reader_extract_file_to_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_filename,<sp/><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*pFile,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mz_zip_streaming_extract_state_ptr;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>mz_zip_streaming_extract_state_ptr<sp/>mz_zip_streaming_extract_begin(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>mz_zip_streaming_extract_get_size(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/>mz_zip_streaming_extract_state_ptr<sp/>pState);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>mz_zip_streaming_extract_get_cur_ofs(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/>mz_zip_streaming_extract_state_ptr<sp/>pState);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/>mz_zip_streaming_extract_seek(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/>mz_zip_streaming_extract_state_ptr<sp/>pState,<sp/>uint64_t<sp/>new_ofs);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mz_zip_streaming_extract_read(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/>mz_zip_streaming_extract_state_ptr<sp/>pState,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/>mz_zip_streaming_extract_end(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/>mz_zip_streaming_extract_state_ptr<sp/>pState);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>compares<sp/>the<sp/>archive&apos;s<sp/>local<sp/>headers,<sp/>the<sp/>optional<sp/>local<sp/>zip64<sp/>extended<sp/>information<sp/>block,<sp/>and<sp/>the<sp/>optional<sp/>descriptor<sp/>following<sp/>the<sp/>compressed<sp/>data<sp/>vs.<sp/>the<sp/>data<sp/>in<sp/>the<sp/>central<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>It<sp/>also<sp/>validates<sp/>that<sp/>each<sp/>file<sp/>can<sp/>be<sp/>successfully<sp/>uncompressed<sp/>unless<sp/>the<sp/>MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY<sp/>is<sp/>specified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1acaef85bf26fe6936ac04e14950078892" kindref="member">mz_zip_validate_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>file_index,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Validates<sp/>an<sp/>entire<sp/>archive<sp/>by<sp/>calling<sp/>mz_zip_validate_file()<sp/>on<sp/>each<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a0f22c932bfa13ea1f720dc757e22be12" kindref="member">mz_zip_validate_archive</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Misc<sp/>utils/helpers,<sp/>valid<sp/>for<sp/>ZIP<sp/>reading<sp/>or<sp/>writing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1acaaba12f38ef5ec95f895c54a7c56351" kindref="member">mz_zip_validate_mem_archive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pMem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>*pErr);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a608ee912bc95f54d663f39157dae0d43" kindref="member">mz_zip_validate_file_archive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>*pErr);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Universal<sp/>end<sp/>function<sp/>-<sp/>calls<sp/>either<sp/>mz_zip_reader_end()<sp/>or<sp/>mz_zip_writer_end().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a18c65a7ddd8d0efbb071e3708bf72105" kindref="member">mz_zip_end</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------<sp/>ZIP<sp/>writing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_ARCHIVE_WRITING_APIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Inits<sp/>a<sp/>ZIP<sp/>archive<sp/>writer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a8b4c858b16cf5ea4508ca2e38a8e2a0a" kindref="member">mz_zip_writer_init</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>existing_size);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1ae7a4dc8ccdc92cf8fe90f0703dae5650" kindref="member">mz_zip_writer_init_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>existing_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a520050b2d27e4a1073e4462c5258d7f2" kindref="member">mz_zip_writer_init_heap</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_to_reserve_at_beginning,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_allocation_size);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1af2dce1c3179550a7870704abc099f086" kindref="member">mz_zip_writer_init_heap_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_to_reserve_at_beginning,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_allocation_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a1ef57babf68945c7ef12f471d7c417c9" kindref="member">mz_zip_writer_init_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>size_to_reserve_at_beginning);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a3f063007374b7ddf5fd84f0644b4cfba" kindref="member">mz_zip_writer_init_file_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>size_to_reserve_at_beginning,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a7d826f57eb4ba51217912b915512bd77" kindref="member">mz_zip_writer_init_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*pFile,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Converts<sp/>a<sp/>ZIP<sp/>archive<sp/>reader<sp/>object<sp/>into<sp/>a<sp/>writer<sp/>object,<sp/>to<sp/>allow<sp/>efficient<sp/>in-place<sp/>file<sp/>appends<sp/>to<sp/>occur<sp/>on<sp/>an<sp/>existing<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>archives<sp/>opened<sp/>using<sp/>mz_zip_reader_init_file,<sp/>pFilename<sp/>must<sp/>be<sp/>the<sp/>archive&apos;s<sp/>filename<sp/>so<sp/>it<sp/>can<sp/>be<sp/>reopened<sp/>for<sp/>writing.<sp/>If<sp/>the<sp/>file<sp/>can&apos;t<sp/>be<sp/>reopened,<sp/>mz_zip_reader_end()<sp/>will<sp/>be<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>archives<sp/>opened<sp/>using<sp/>mz_zip_reader_init_mem,<sp/>the<sp/>memory<sp/>block<sp/>must<sp/>be<sp/>growable<sp/>using<sp/>the<sp/>realloc<sp/>callback<sp/>(which<sp/>defaults<sp/>to<sp/>realloc<sp/>unless<sp/>you&apos;ve<sp/>overridden<sp/>it).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Finally,<sp/>for<sp/>archives<sp/>opened<sp/>using<sp/>mz_zip_reader_init,<sp/>the<sp/>mz_zip_archive&apos;s<sp/>user<sp/>provided<sp/>m_pWrite<sp/>function<sp/>cannot<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>In-place<sp/>archive<sp/>modification<sp/>is<sp/>not<sp/>recommended<sp/>unless<sp/>you<sp/>know<sp/>what<sp/>you&apos;re<sp/>doing,<sp/>because<sp/>if<sp/>execution<sp/>stops<sp/>or<sp/>something<sp/>goes<sp/>wrong<sp/>before<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>archive<sp/>is<sp/>finalized<sp/>the<sp/>file&apos;s<sp/>central<sp/>directory<sp/>will<sp/>be<sp/>hosed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1aea1a273234436ccb155a0e92ef2a30e4" kindref="member">mz_zip_writer_init_from_reader</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1aaa53ceaf8230510769b12e04df060c23" kindref="member">mz_zip_writer_init_from_reader_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFilename,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>memory<sp/>buffer<sp/>to<sp/>an<sp/>archive.<sp/>These<sp/>functions<sp/>record<sp/>the<sp/>current<sp/>local<sp/>time<sp/>into<sp/>the<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>To<sp/>add<sp/>a<sp/>directory<sp/>entry,<sp/>call<sp/>this<sp/>method<sp/>with<sp/>an<sp/>archive<sp/>name<sp/>ending<sp/>in<sp/>a<sp/>forwardslash<sp/>with<sp/>an<sp/>empty<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>level_and_flags<sp/>-<sp/>compression<sp/>level<sp/>(0-10,<sp/>see<sp/>MZ_BEST_SPEED,<sp/>MZ_BEST_COMPRESSION,<sp/>etc.)<sp/>logically<sp/>OR&apos;d<sp/>with<sp/>zero<sp/>or<sp/>more<sp/>mz_zip_flags,<sp/>or<sp/>just<sp/>set<sp/>to<sp/>MZ_DEFAULT_COMPRESSION.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1ab5aac408b80e6f51a14434330fc76d6d" kindref="member">mz_zip_writer_add_mem</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>mz_zip_writer_add_mem(),<sp/>except<sp/>you<sp/>can<sp/>specify<sp/>a<sp/>file<sp/>comment<sp/>field,<sp/>and<sp/>optionally<sp/>supply<sp/>the<sp/>function<sp/>with<sp/>already<sp/>compressed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>uncomp_size/uncomp_crc32<sp/>are<sp/>only<sp/>used<sp/>if<sp/>the<sp/>MZ_ZIP_FLAG_COMPRESSED_DATA<sp/>flag<sp/>is<sp/>specified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a48ece9a3d251aa69af280e975b6cc080" kindref="member">mz_zip_writer_add_mem_ex</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>uncomp_size,<sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>uncomp_crc32);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a371c9af2ceab417c4d2cf4e79309f634" kindref="member">mz_zip_writer_add_mem_ex_v2</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags,</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>uncomp_size,<sp/><ref refid="miniz_8h_1ab1a91818a39ac203d5d9f12a003e8557" kindref="member">mz_uint32</ref><sp/>uncomp_crc32,<sp/><ref refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" kindref="member">MZ_TIME_T</ref><sp/>*last_modified,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_extra_data_local,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>user_extra_data_local_len,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_extra_data_central,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>user_extra_data_central_len);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MINIZ_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>disk<sp/>file<sp/>to<sp/>an<sp/>archive.<sp/>This<sp/>function<sp/>also<sp/>records<sp/>the<sp/>disk<sp/>file&apos;s<sp/>modified<sp/>time<sp/>into<sp/>the<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>level_and_flags<sp/>-<sp/>compression<sp/>level<sp/>(0-10,<sp/>see<sp/>MZ_BEST_SPEED,<sp/>MZ_BEST_COMPRESSION,<sp/>etc.)<sp/>logically<sp/>OR&apos;d<sp/>with<sp/>zero<sp/>or<sp/>more<sp/>mz_zip_flags,<sp/>or<sp/>just<sp/>set<sp/>to<sp/>MZ_DEFAULT_COMPRESSION.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a7e65ca89365aca18317932a5a6a53ec5" kindref="member">mz_zip_writer_add_file</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pSrc_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>mz_zip_writer_add_file(),<sp/>except<sp/>the<sp/>file<sp/>data<sp/>is<sp/>read<sp/>from<sp/>the<sp/>specified<sp/>FILE<sp/>stream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a32d55e4298dec2815704deec35f7596d" kindref="member">mz_zip_writer_add_cfile</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/><ref refid="miniz_8h_1a6c4ad5877435849bc193be7a6ba25843" kindref="member">MZ_FILE</ref><sp/>*pSrc_file,<sp/><ref refid="miniz_8h_1ad1ec3c4964d89baaf6427b699bf71f3f" kindref="member">mz_uint64</ref><sp/>size_to_add,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="miniz_8h_1a893addc64c536a05131458f6f15132eb" kindref="member">MZ_TIME_T</ref><sp/>*pFile_time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_extra_data_local,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>user_extra_data_local_len,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_extra_data_central,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>user_extra_data_central_len);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>a<sp/>file<sp/>to<sp/>an<sp/>archive<sp/>by<sp/>fully<sp/>cloning<sp/>the<sp/>data<sp/>from<sp/>another<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>fully<sp/>clones<sp/>the<sp/>source<sp/>file&apos;s<sp/>compressed<sp/>data<sp/>(no<sp/>recompression),<sp/>along<sp/>with<sp/>its<sp/>full<sp/>filename,<sp/>extra<sp/>data<sp/>(it<sp/>may<sp/>add<sp/>or<sp/>modify<sp/>the<sp/>zip64<sp/>local<sp/>header<sp/>extra<sp/>data<sp/>field),<sp/>and<sp/>the<sp/>optional<sp/>descriptor<sp/>following<sp/>the<sp/>compressed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a995089c55642ae721d39970627a6f692" kindref="member">mz_zip_writer_add_from_zip_reader</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/><ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pSource_zip,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>src_file_index);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Finalizes<sp/>the<sp/>archive<sp/>by<sp/>writing<sp/>the<sp/>central<sp/>directory<sp/>records<sp/>followed<sp/>by<sp/>the<sp/>end<sp/>of<sp/>central<sp/>directory<sp/>record.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>After<sp/>an<sp/>archive<sp/>is<sp/>finalized,<sp/>the<sp/>only<sp/>valid<sp/>call<sp/>on<sp/>the<sp/>mz_zip_archive<sp/>struct<sp/>is<sp/>mz_zip_writer_end().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>An<sp/>archive<sp/>must<sp/>be<sp/>manually<sp/>finalized<sp/>by<sp/>calling<sp/>this<sp/>function<sp/>for<sp/>it<sp/>to<sp/>be<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a0f7c5b26c1200daacd0eefa8744d9d1a" kindref="member">mz_zip_writer_finalize_archive</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Finalizes<sp/>a<sp/>heap<sp/>archive,<sp/>returning<sp/>a<sp/>poiner<sp/>to<sp/>the<sp/>heap<sp/>block<sp/>and<sp/>its<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>heap<sp/>block<sp/>will<sp/>be<sp/>allocated<sp/>using<sp/>the<sp/>mz_zip_archive&apos;s<sp/>alloc/realloc<sp/>callbacks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1ae21d7f8237b520a1c8681bddb68cad42" kindref="member">mz_zip_writer_finalize_heap_archive</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ppBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pSize);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>archive<sp/>writing,<sp/>freeing<sp/>all<sp/>allocations,<sp/>and<sp/>closing<sp/>the<sp/>output<sp/>file<sp/>if<sp/>mz_zip_writer_init_file()<sp/>was<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>for<sp/>the<sp/>archive<sp/>to<sp/>be<sp/>valid,<sp/>it<sp/>*must*<sp/>have<sp/>been<sp/>finalized<sp/>before<sp/>ending<sp/>(this<sp/>function<sp/>will<sp/>not<sp/>do<sp/>it<sp/>for<sp/>you).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a7ac49ded3cc37713226764131602e857" kindref="member">mz_zip_writer_end</ref>(<ref refid="structmz__zip__archive" kindref="compound">mz_zip_archive</ref><sp/>*pZip);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------<sp/>Misc.<sp/>high-level<sp/>helper<sp/>functions:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mz_zip_add_mem_to_archive_file_in_place()<sp/>efficiently<sp/>(but<sp/>not<sp/>atomically)<sp/>appends<sp/>a<sp/>memory<sp/>blob<sp/>to<sp/>a<sp/>ZIP<sp/>archive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>this<sp/>is<sp/>NOT<sp/>a<sp/>fully<sp/>safe<sp/>operation.<sp/>If<sp/>it<sp/>crashes<sp/>or<sp/>dies<sp/>in<sp/>some<sp/>way<sp/>your<sp/>archive<sp/>can<sp/>be<sp/>left<sp/>in<sp/>a<sp/>screwed<sp/>up<sp/>state<sp/>(without<sp/>a<sp/>central<sp/>directory).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>level_and_flags<sp/>-<sp/>compression<sp/>level<sp/>(0-10,<sp/>see<sp/>MZ_BEST_SPEED,<sp/>MZ_BEST_COMPRESSION,<sp/>etc.)<sp/>logically<sp/>OR&apos;d<sp/>with<sp/>zero<sp/>or<sp/>more<sp/>mz_zip_flags,<sp/>or<sp/>just<sp/>set<sp/>to<sp/>MZ_DEFAULT_COMPRESSION.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Perhaps<sp/>add<sp/>an<sp/>option<sp/>to<sp/>leave<sp/>the<sp/>existing<sp/>central<sp/>dir<sp/>in<sp/>place<sp/>in<sp/>case<sp/>the<sp/>add<sp/>dies?<sp/>We<sp/>could<sp/>then<sp/>truncate<sp/>the<sp/>file<sp/>(so<sp/>the<sp/>old<sp/>central<sp/>dir<sp/>would<sp/>be<sp/>at<sp/>the<sp/>end)<sp/>if<sp/>something<sp/>goes<sp/>wrong.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a36c32e80d9a7c3c217ae7afdfe1d30cf" kindref="member">mz_zip_add_mem_to_archive_file_in_place</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pZip_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><ref refid="miniz_8h_1a896b8bd8958fd11932180d7c9e247986" kindref="member">mz_bool</ref><sp/><ref refid="miniz_8h_1a443af52ee783e8ce9dc397761632d30e" kindref="member">mz_zip_add_mem_to_archive_file_in_place_v2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pZip_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pComment,<sp/><ref refid="miniz_8h_1ab88892139a542649bc9bbfa592a9d354" kindref="member">mz_uint16</ref><sp/>comment_size,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>level_and_flags,<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>*pErr);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reads<sp/>a<sp/>single<sp/>file<sp/>from<sp/>an<sp/>archive<sp/>into<sp/>a<sp/>heap<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>pComment<sp/>is<sp/>not<sp/>NULL,<sp/>only<sp/>the<sp/>file<sp/>with<sp/>the<sp/>specified<sp/>comment<sp/>will<sp/>be<sp/>extracted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>NULL<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1aebd3651c5138a33ff42d46ad9596fe6d" kindref="member">mz_zip_extract_archive_file_to_heap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pZip_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pSize,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="miniz_8h_1a94dc7c4eddd98466020dc02881d016d1" kindref="member">mz_zip_extract_archive_file_to_heap_v2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pZip_filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pArchive_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pComment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*pSize,<sp/><ref refid="miniz_8h_1a4195703cf0ade709ddce7f8777fc0cc2" kindref="member">mz_uint</ref><sp/>flags,<sp/><ref refid="miniz_8h_1ae12d56c14c748fc82c425478f017dc6d" kindref="member">mz_zip_error</ref><sp/>*pErr);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>MINIZ_NO_ARCHIVE_WRITING_APIS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MINIZ_NO_ARCHIVE_APIS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/miniz.h"/>
  </compounddef>
</doxygen>
