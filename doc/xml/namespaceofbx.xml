<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9">
  <compounddef id="namespaceofbx" kind="namespace" language="C++">
    <compoundname>ofbx</compoundname>
    <innerclass refid="structofbx_1_1_animation_curve" prot="public">ofbx::AnimationCurve</innerclass>
    <innerclass refid="structofbx_1_1_animation_curve_impl" prot="public">ofbx::AnimationCurveImpl</innerclass>
    <innerclass refid="structofbx_1_1_animation_curve_node" prot="public">ofbx::AnimationCurveNode</innerclass>
    <innerclass refid="structofbx_1_1_animation_curve_node_impl" prot="public">ofbx::AnimationCurveNodeImpl</innerclass>
    <innerclass refid="structofbx_1_1_animation_layer" prot="public">ofbx::AnimationLayer</innerclass>
    <innerclass refid="structofbx_1_1_animation_layer_impl" prot="public">ofbx::AnimationLayerImpl</innerclass>
    <innerclass refid="structofbx_1_1_animation_stack" prot="public">ofbx::AnimationStack</innerclass>
    <innerclass refid="structofbx_1_1_animation_stack_impl" prot="public">ofbx::AnimationStackImpl</innerclass>
    <innerclass refid="structofbx_1_1_cluster" prot="public">ofbx::Cluster</innerclass>
    <innerclass refid="structofbx_1_1_cluster_impl" prot="public">ofbx::ClusterImpl</innerclass>
    <innerclass refid="structofbx_1_1_color" prot="public">ofbx::Color</innerclass>
    <innerclass refid="structofbx_1_1_cursor" prot="public">ofbx::Cursor</innerclass>
    <innerclass refid="structofbx_1_1_data_view" prot="public">ofbx::DataView</innerclass>
    <innerclass refid="structofbx_1_1_element" prot="public">ofbx::Element</innerclass>
    <innerclass refid="structofbx_1_1_error" prot="public">ofbx::Error</innerclass>
    <innerclass refid="structofbx_1_1_geometry" prot="public">ofbx::Geometry</innerclass>
    <innerclass refid="structofbx_1_1_geometry_impl" prot="public">ofbx::GeometryImpl</innerclass>
    <innerclass refid="structofbx_1_1_header" prot="public">ofbx::Header</innerclass>
    <innerclass refid="structofbx_1_1_i_element" prot="public">ofbx::IElement</innerclass>
    <innerclass refid="structofbx_1_1_i_element_property" prot="public">ofbx::IElementProperty</innerclass>
    <innerclass refid="structofbx_1_1_i_scene" prot="public">ofbx::IScene</innerclass>
    <innerclass refid="structofbx_1_1_limb_node_impl" prot="public">ofbx::LimbNodeImpl</innerclass>
    <innerclass refid="structofbx_1_1_material" prot="public">ofbx::Material</innerclass>
    <innerclass refid="structofbx_1_1_material_impl" prot="public">ofbx::MaterialImpl</innerclass>
    <innerclass refid="structofbx_1_1_matrix" prot="public">ofbx::Matrix</innerclass>
    <innerclass refid="structofbx_1_1_mesh" prot="public">ofbx::Mesh</innerclass>
    <innerclass refid="structofbx_1_1_mesh_impl" prot="public">ofbx::MeshImpl</innerclass>
    <innerclass refid="structofbx_1_1_node_attribute" prot="public">ofbx::NodeAttribute</innerclass>
    <innerclass refid="structofbx_1_1_node_attribute_impl" prot="public">ofbx::NodeAttributeImpl</innerclass>
    <innerclass refid="structofbx_1_1_null_impl" prot="public">ofbx::NullImpl</innerclass>
    <innerclass refid="structofbx_1_1_object" prot="public">ofbx::Object</innerclass>
    <innerclass refid="structofbx_1_1_optional_error" prot="public">ofbx::OptionalError</innerclass>
    <innerclass refid="structofbx_1_1_property" prot="public">ofbx::Property</innerclass>
    <innerclass refid="structofbx_1_1_quat" prot="public">ofbx::Quat</innerclass>
    <innerclass refid="structofbx_1_1_root" prot="public">ofbx::Root</innerclass>
    <innerclass refid="structofbx_1_1_scene" prot="public">ofbx::Scene</innerclass>
    <innerclass refid="structofbx_1_1_skin" prot="public">ofbx::Skin</innerclass>
    <innerclass refid="structofbx_1_1_skin_impl" prot="public">ofbx::SkinImpl</innerclass>
    <innerclass refid="structofbx_1_1_take_info" prot="public">ofbx::TakeInfo</innerclass>
    <innerclass refid="structofbx_1_1_texture" prot="public">ofbx::Texture</innerclass>
    <innerclass refid="structofbx_1_1_texture_impl" prot="public">ofbx::TextureImpl</innerclass>
    <innerclass refid="structofbx_1_1_vec2" prot="public">ofbx::Vec2</innerclass>
    <innerclass refid="structofbx_1_1_vec3" prot="public">ofbx::Vec3</innerclass>
    <innerclass refid="structofbx_1_1_vec4" prot="public">ofbx::Vec4</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9" prot="public" static="no">
        <name>FrameRate</name>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a5c2de230347d442dd4902f48fe85c774" prot="public">
          <name>FrameRate_DEFAULT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9add6e6cf020012583a3f3d1bb57e865d7" prot="public">
          <name>FrameRate_120</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9ab27afe68ea555d5f50253f65cdcaff7a" prot="public">
          <name>FrameRate_100</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9aff11d5a09f1f2dc2faa4e3f9baf07285" prot="public">
          <name>FrameRate_60</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9af30e5cf668c524efb4ac2aa6a915639b" prot="public">
          <name>FrameRate_50</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a409d816a3d1c4c1f1871397357b1b693" prot="public">
          <name>FrameRate_48</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a18389c67ff442a47a304e31dd493ae8d" prot="public">
          <name>FrameRate_30</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a3961e188c9a221266c7da2e80c4ea344" prot="public">
          <name>FrameRate_30_DROP</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a8dc85f88376c569b9b5a1af91a556def" prot="public">
          <name>FrameRate_NTSC_DROP_FRAME</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a2981948efba8186066c58845a00131c9" prot="public">
          <name>FrameRate_NTSC_FULL_FRAME</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a04796e60d1ad50c274cd8a79264ab793" prot="public">
          <name>FrameRate_PAL</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a8fd92bab92b80d6650cd99fbe50d3bfe" prot="public">
          <name>FrameRate_CINEMA</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a84892f9697ba444564b5db1958df1a78" prot="public">
          <name>FrameRate_1000</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a35395d5f361f3e023f3da756b21954ee" prot="public">
          <name>FrameRate_CINEMA_ND</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a59f6112b2368f39ba74d84660704b4b9a852d4eb6c6f8fc2481f2e3f3758c8b88" prot="public">
          <name>FrameRate_CUSTOM</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2354" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2353" bodyend="2370"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661d" prot="public" static="no">
        <name>RotationOrder</name>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661da63267ecac1615d430633323b5948584c" prot="public">
          <name>EULER_XYZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661da7e3a81405cff5bddec7ac08ffcb17229" prot="public">
          <name>EULER_XZY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661da9af04487cef44f59419946109c01dd44" prot="public">
          <name>EULER_YZX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661da5b29173bc6e485284cb43abe0e638889" prot="public">
          <name>EULER_YXZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661dac762c3f23cb38955be92ade3220ec33f" prot="public">
          <name>EULER_ZXY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661daa904bb18a9d239a48252fa2d775e25ab" prot="public">
          <name>EULER_ZYX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceofbx_1a4019779f155facfcc3382f7c5df1661da2c85f790301aa577441acbb8ea5c1cd9" prot="public">
          <name>SPHERIC_XYZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="123" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="123" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char ofbx::u8</definition>
        <argsstring></argsstring>
        <name>u8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="7" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceofbx_1ab8594ca4036ae7b9da9044be6530286f" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short ofbx::u16</definition>
        <argsstring></argsstring>
        <name>u16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="8" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceofbx_1aba6b798771b4e2a6ed68a1131095853c" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int ofbx::u32</definition>
        <argsstring></argsstring>
        <name>u32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="9" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceofbx_1af4065f2803c4319bc66e848823cedccf" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>typedef unsigned long long ofbx::u64</definition>
        <argsstring></argsstring>
        <name>u64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="10" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceofbx_1a8d3ee2e17d76ee54cc59dbce4c102f48" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long ofbx::i64</definition>
        <argsstring></argsstring>
        <name>i64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" line="11" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceofbx_1ace5c74411dd0c304e862cf6cc73af9f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::setTranslation</definition>
        <argsstring>(const Vec3 &amp;t, Matrix *mtx)</argsstring>
        <name>setTranslation</name>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="86" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ad6481b285eb3458530048111718eff36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static Vec3 ofbx::operator-</definition>
        <argsstring>(const Vec3 &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="94" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a946a4675e249a1e8ecf596016e5c8c63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::operator*</definition>
        <argsstring>(const Matrix &amp;lhs, const Matrix &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="100" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="100" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a35a06f84205d12f6a0adff7df33098e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::makeIdentity</definition>
        <argsstring>()</argsstring>
        <name>makeIdentity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="119" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ab9503aef466457db7b8afd21a346ae03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::rotationX</definition>
        <argsstring>(double angle)</argsstring>
        <name>rotationX</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="125" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a03c54683f1ede6d33014f26aa94dbc8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::rotationY</definition>
        <argsstring>(double angle)</argsstring>
        <name>rotationY</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="139" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="139" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a3e2d09130d7bb66f2b695088aab69f6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::rotationZ</definition>
        <argsstring>(double angle)</argsstring>
        <name>rotationZ</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="153" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="153" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ac03b2a1adc5fa50893159207a5a7e7c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix ofbx::getRotationMatrix</definition>
        <argsstring>(const Vec3 &amp;euler, RotationOrder order)</argsstring>
        <name>getRotationMatrix</name>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>euler</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1a4019779f155facfcc3382f7c5df1661d" kindref="member">RotationOrder</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="167" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="167" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1aab6470abebce4bc6f327708a556eb490" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double ofbx::fbxTimeToSeconds</definition>
        <argsstring>(i64 value)</argsstring>
        <name>fbxTimeToSeconds</name>
        <param>
          <type><ref refid="namespaceofbx_1a8d3ee2e17d76ee54cc59dbce4c102f48" kindref="member">i64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="193" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1aea5558886b13e306201e954ecf34d2d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceofbx_1a8d3ee2e17d76ee54cc59dbce4c102f48" kindref="member">i64</ref></type>
        <definition>static i64 ofbx::secondsToFbxTime</definition>
        <argsstring>(double value)</argsstring>
        <name>secondsToFbxTime</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="199" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a420879a47c749fa554500414654f260c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static Vec3 ofbx::operator*</definition>
        <argsstring>(const Vec3 &amp;v, float f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="205" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a644d7d416471d486abec6e844e790833" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static Vec3 ofbx::operator+</definition>
        <argsstring>(const Vec3 &amp;a, const Vec3 &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="211" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a5017e20fb0514f5b39a8856e9f6eb832" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>SIZE</declname>
            <defname>SIZE</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::copyString</definition>
        <argsstring>(char(&amp;destination)[SIZE], const char *source)</argsstring>
        <name>copyString</name>
        <param>
          <type>char(&amp;)</type>
          <declname>destination</declname>
          <array>[SIZE]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="217" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="217" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a47097931568761de2fa57db7fba918dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::parseArrayRaw</definition>
        <argsstring>(const Property &amp;property, T *out, int max_size)</argsstring>
        <name>parseArrayRaw</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="319" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1673" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1abbe18b52710f7fec770e64a33a3a3cae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::parseBinaryArray</definition>
        <argsstring>(const Property &amp;property, std::vector&lt; T &gt; *out)</argsstring>
        <name>parseBinaryArray</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="320" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1835" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a632e81a17464c0a989849f9afc672217" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> *</type>
        <definition>static const Element* ofbx::findChild</definition>
        <argsstring>(const Element &amp;element, const char *id)</argsstring>
        <name>findChild</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="380" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="380" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a1126ce32141dca88ad712dd79d2b527a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_i_element" kindref="compound">IElement</ref> *</type>
        <definition>static IElement* ofbx::resolveProperty</definition>
        <argsstring>(const Object &amp;obj, const char *name)</argsstring>
        <name>resolveProperty</name>
        <param>
          <type>const <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="392" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="392" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a01b1e2bf4475105bc397f49823050f0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ofbx::resolveEnumProperty</definition>
        <argsstring>(const Object &amp;object, const char *name, int default_value)</argsstring>
        <name>resolveEnumProperty</name>
        <param>
          <type>const <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="410" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="410" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ac2df5f6b9ef4ded89f0bc1bfb15c5794" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static Vec3 ofbx::resolveVec3Property</definition>
        <argsstring>(const Object &amp;object, const char *name, const Vec3 &amp;default_value)</argsstring>
        <name>resolveVec3Property</name>
        <param>
          <type>const <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="421" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="421" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a44cfcf658ffcca30c426e509595e47a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::decompress</definition>
        <argsstring>(const u8 *in, size_t in_size, u8 *out, size_t out_size)</argsstring>
        <name>decompress</name>
        <param>
          <type>const <ref refid="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" kindref="member">u8</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" kindref="member">u8</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="450" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="450" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a7ce3c85efb484c493af78bf4c977c377" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; T &gt;</type>
        <definition>static OptionalError&lt;T&gt; ofbx::read</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="468" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="468" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a3c9c1a125a60fd6ccb1b50640ed128ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_data_view" kindref="compound">DataView</ref> &gt;</type>
        <definition>static OptionalError&lt;DataView&gt; ofbx::readShortString</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readShortString</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="477" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="477" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a072de9f50567dc18a42cb6712afa74e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_data_view" kindref="compound">DataView</ref> &gt;</type>
        <definition>static OptionalError&lt;DataView&gt; ofbx::readLongString</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readLongString</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="493" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="493" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a44090339917b3fe85affe3815bfb9885" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> * &gt;</type>
        <definition>static OptionalError&lt;Property*&gt; ofbx::readProperty</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readProperty</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="509" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="509" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a7486ca0c8fdb0f05695c5199fe3e0ce9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::deleteElement</definition>
        <argsstring>(Element *el)</argsstring>
        <name>deleteElement</name>
        <param>
          <type><ref refid="structofbx_1_1_element" kindref="compound">Element</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="563" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="563" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1abf1e6ee16b0f36aecf0755fd4017ee83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="namespaceofbx_1af4065f2803c4319bc66e848823cedccf" kindref="member">u64</ref> &gt;</type>
        <definition>static OptionalError&lt;u64&gt; ofbx::readElementOffset</definition>
        <argsstring>(Cursor *cursor, u16 version)</argsstring>
        <name>readElementOffset</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1ab8594ca4036ae7b9da9044be6530286f" kindref="member">u16</ref></type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="580" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="580" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a7153abdfff4dd68d3ff229219fe7e2c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> * &gt;</type>
        <definition>static OptionalError&lt;Element*&gt; ofbx::readElement</definition>
        <argsstring>(Cursor *cursor, u32 version)</argsstring>
        <name>readElement</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1aba6b798771b4e2a6ed68a1131095853c" kindref="member">u32</ref></type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="595" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="595" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a96a36fa1a7319854f3e276e8e9974bc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::isEndLine</definition>
        <argsstring>(const Cursor &amp;cursor)</argsstring>
        <name>isEndLine</name>
        <param>
          <type>const <ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> &amp;</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="660" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="660" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a65456c276ac6893656be7041dd03d6ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::skipInsignificantWhitespaces</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>skipInsignificantWhitespaces</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="666" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="666" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a78f856e5ffc1ae7b61ffbd95d979cd4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::skipLine</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>skipLine</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="675" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="675" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1abd372443ef690cc22eea569c743fd169" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::skipWhitespaces</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>skipWhitespaces</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="686" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="686" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a4b39837919c9be87ff945476800bc9ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::isTextTokenChar</definition>
        <argsstring>(char c)</argsstring>
        <name>isTextTokenChar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="696" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="696" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a78890bdb2bd40e52b6ec6b678a7fa594" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_data_view" kindref="compound">DataView</ref></type>
        <definition>static DataView ofbx::readTextToken</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readTextToken</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="702" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="702" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1af6db91dbf14826d7d88e7f3658ee6351" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> * &gt;</type>
        <definition>static OptionalError&lt;Property*&gt; ofbx::readTextProperty</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readTextProperty</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="715" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="715" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a64698e4e91f78c8a23a1da0c7d2fa31d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> * &gt;</type>
        <definition>static OptionalError&lt;Element*&gt; ofbx::readTextElement</definition>
        <argsstring>(Cursor *cursor)</argsstring>
        <name>readTextElement</name>
        <param>
          <type><ref refid="structofbx_1_1_cursor" kindref="compound">Cursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="813" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="813" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1aeac3bcca25cb27dccf6cb9db3b25f7ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> * &gt;</type>
        <definition>static OptionalError&lt;Element*&gt; ofbx::tokenizeText</definition>
        <argsstring>(const u8 *data, size_t size)</argsstring>
        <name>tokenizeText</name>
        <param>
          <type>const <ref refid="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" kindref="member">u8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="870" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="870" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ac5963538077e7f1c728b070429a9a6e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> * &gt;</type>
        <definition>static OptionalError&lt;Element*&gt; ofbx::tokenize</definition>
        <argsstring>(const u8 *data, size_t size)</argsstring>
        <name>tokenize</name>
        <param>
          <type>const <ref refid="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" kindref="member">u8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="909" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="909" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a51734ae96eec84c0b3f6cb0b68aa27b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::parseTemplates</definition>
        <argsstring>(const Element &amp;root)</argsstring>
        <name>parseTemplates</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="942" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="942" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1af69c5a461d16fbb938c747b764edfbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>struct OptionalError&lt; Object * &gt; ofbx::parseTexture</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseTexture</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1338" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1556" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1acdbe3961e1ea9620e8a83f8deba0182c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parse</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parse</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1573" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1573" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1aff9fec88a8dacc1be422244c9227465f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseCluster</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseCluster</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1580" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1580" bodyend="1604"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ab44f1cea7d458efacf2944587456f23a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseNodeAttribute</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseNodeAttribute</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1607" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1607" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a56d15f5878fd37e34aab3e7d980d1386" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseLimbNode</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseLimbNode</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1619" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1619" bodyend="1631"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a498c3b03ff55e0dad8fd500f71acf6c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseMesh</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseMesh</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1634" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1634" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ae5e0cd7afd29bf823a65f758a11e5623" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseMaterial</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseMaterial</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1648" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1648" bodyend="1668"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a9bd9d897459b94abf069eba4c3c77eee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::parseTextArrayRaw</definition>
        <argsstring>(const Property &amp;property, T *out, int max_size)</argsstring>
        <name>parseTextArrayRaw</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1671" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1820" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a0ba4934eddbc59a28b4076361fec4204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString</definition>
        <argsstring>(const char *str, const char *end, T *val)</argsstring>
        <name>fromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a699acc154809ad51f5aad9c9ffdbcdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; int &gt;</definition>
        <argsstring>(const char *str, const char *end, int *val)</argsstring>
        <name>fromString&lt; int &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1717" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1717" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1acbbbad54a5991707f386a618320803d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; u64 &gt;</definition>
        <argsstring>(const char *str, const char *end, u64 *val)</argsstring>
        <name>fromString&lt; u64 &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1af4065f2803c4319bc66e848823cedccf" kindref="member">u64</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1727" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1727" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a89d6fcc76627a5de7e24fa9cc1c86879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; i64 &gt;</definition>
        <argsstring>(const char *str, const char *end, i64 *val)</argsstring>
        <name>fromString&lt; i64 &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceofbx_1a8d3ee2e17d76ee54cc59dbce4c102f48" kindref="member">i64</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1737" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1737" bodyend="1744"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a3f17190f9a37944e197429727c291238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; double &gt;</definition>
        <argsstring>(const char *str, const char *end, double *val)</argsstring>
        <name>fromString&lt; double &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1747" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1747" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a3365af6f01b4473899029782c3d4711b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; float &gt;</definition>
        <argsstring>(const char *str, const char *end, float *val)</argsstring>
        <name>fromString&lt; float &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1757" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1757" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a8a592ad34fa336f83a5c838308b57382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ofbx::fromString</definition>
        <argsstring>(const char *str, const char *end, double *val, int count)</argsstring>
        <name>fromString</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1767" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1767" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a224d834d67f1018fac5a914b02175d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; Vec2 &gt;</definition>
        <argsstring>(const char *str, const char *end, Vec2 *val)</argsstring>
        <name>fromString&lt; Vec2 &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_vec2" kindref="compound">Vec2</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1784" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1784" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a256c64204a997e41d9274b11454fed8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; Vec3 &gt;</definition>
        <argsstring>(const char *str, const char *end, Vec3 *val)</argsstring>
        <name>fromString&lt; Vec3 &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_vec3" kindref="compound">Vec3</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1790" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1790" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a3115172f66813c9d32c9065c7ab30980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; Vec4 &gt;</definition>
        <argsstring>(const char *str, const char *end, Vec4 *val)</argsstring>
        <name>fromString&lt; Vec4 &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_vec4" kindref="compound">Vec4</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1796" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1796" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ab580329635e119ce289e6fe2d37de9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* ofbx::fromString&lt; Matrix &gt;</definition>
        <argsstring>(const char *str, const char *end, Matrix *val)</argsstring>
        <name>fromString&lt; Matrix &gt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1802" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1802" bodyend="1805"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ad78cc45b9a0894a7c5a57993ea539baf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ofbx::parseTextArray</definition>
        <argsstring>(const Property &amp;property, std::vector&lt; T &gt; *out)</argsstring>
        <name>parseTextArray</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1808" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1808" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a6adf8d04bcca0a80aab0e7ae53d13c1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::parseDoubleVecData</definition>
        <argsstring>(Property &amp;property, std::vector&lt; T &gt; *out_vec)</argsstring>
        <name>parseDoubleVecData</name>
        <param>
          <type><ref refid="structofbx_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1863" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1863" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a02198f8f8ba9796bf26ff1409a325689" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ofbx::parseVertexData</definition>
        <argsstring>(const Element &amp;element, const char *name, const char *index_name, std::vector&lt; T &gt; *out, std::vector&lt; int &gt; *out_indices, GeometryImpl::VertexDataMapping *mapping)</argsstring>
        <name>parseVertexData</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>index_name</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>out_indices</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_geometry_impl_1ab81bd25139a1d629cec2592ecdd4479b" kindref="member">GeometryImpl::VertexDataMapping</ref> *</type>
          <declname>mapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1893" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1893" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a5346515486a2a19c842a9bbdf40353c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ofbx::splat</definition>
        <argsstring>(std::vector&lt; T &gt; *out, GeometryImpl::VertexDataMapping mapping, const std::vector&lt; T &gt; &amp;data, const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; int &gt; &amp;original_indices)</argsstring>
        <name>splat</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_geometry_impl_1ab81bd25139a1d629cec2592ecdd4479b" kindref="member">GeometryImpl::VertexDataMapping</ref></type>
          <declname>mapping</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>original_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1948" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1948" bodyend="1996"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a43f179bd256dba0c6428bd1281f0eb98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ofbx::remap</definition>
        <argsstring>(std::vector&lt; T &gt; *out, const std::vector&lt; int &gt; &amp;map)</argsstring>
        <name>remap</name>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="1999" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="1999" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a18de47c1b05ca4012bc4809e5cb103a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseAnimationCurve</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseAnimationCurve</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2014" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2014" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ae22b7a559ea4f9f70d3ab6988d788631" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ofbx::getTriCountFromPoly</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;indices, int *idx)</argsstring>
        <name>getTriCountFromPoly</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2045" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2045" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1afdae00a18396d98493265b3a96e1dfcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::add</definition>
        <argsstring>(GeometryImpl::NewVertex &amp;vtx, int index)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="structofbx_1_1_geometry_impl_1_1_new_vertex" kindref="compound">GeometryImpl::NewVertex</ref> &amp;</type>
          <declname>vtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2058" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2058" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a6359da5481e6e1ba734cd83a2b22fb46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_optional_error" kindref="compound">OptionalError</ref>&lt; <ref refid="structofbx_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>static OptionalError&lt;Object*&gt; ofbx::parseGeometry</definition>
        <argsstring>(const Scene &amp;scene, const Element &amp;element)</argsstring>
        <name>parseGeometry</name>
        <param>
          <type>const <ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2076" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2076" bodyend="2223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a941b670bd968f12486f07fc8cfb8d9df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::isString</definition>
        <argsstring>(const Property *prop)</argsstring>
        <name>isString</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2226" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2226" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1abed087c9b9c31216749628c61a88f9c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::isLong</definition>
        <argsstring>(const Property *prop)</argsstring>
        <name>isLong</name>
        <param>
          <type>const <ref refid="structofbx_1_1_property" kindref="compound">Property</ref> *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2233" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2233" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a6a59024ff996e22c2fced08128e924f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::parseConnections</definition>
        <argsstring>(const Element &amp;root, Scene *scene)</argsstring>
        <name>parseConnections</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2240" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2240" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1ab9e27f5d1bb40a190e2228fc60ad2e07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::parseTakes</definition>
        <argsstring>(Scene *scene)</argsstring>
        <name>parseTakes</name>
        <param>
          <type><ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2289" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2289" bodyend="2349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a12969aec47352a41448f2cfc77555d73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float ofbx::getFramerateFromTimeMode</definition>
        <argsstring>(int time_mode)</argsstring>
        <name>getFramerateFromTimeMode</name>
        <param>
          <type>int</type>
          <declname>time_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2373" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2373" bodyend="2394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a8e6f3d34be4f3e7a745c900cafe5dbee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ofbx::parseGlobalSettings</definition>
        <argsstring>(const Element &amp;root, Scene *scene)</argsstring>
        <name>parseGlobalSettings</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2397" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2397" bodyend="2427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a909ba561bcc4b2124eeacba94db71c2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ofbx::parseObjects</definition>
        <argsstring>(const Element &amp;root, Scene *scene)</argsstring>
        <name>parseObjects</name>
        <param>
          <type>const <ref refid="structofbx_1_1_element" kindref="compound">Element</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="structofbx_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2430" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2430" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a02f6cc8c2a2a57b81200c7cde1b42227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structofbx_1_1_i_scene" kindref="compound">IScene</ref> *</type>
        <definition>IScene * ofbx::load</definition>
        <argsstring>(const u8 *data, int size)</argsstring>
        <name>load</name>
        <param>
          <type>const <ref refid="namespaceofbx_1a945a0ff1279eb02e17a3eadfb947ad0d" kindref="member">u8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2903" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2903" bodyend="2926"/>
      </memberdef>
      <memberdef kind="function" id="namespaceofbx_1a8c46adae69b78ccd63f699f07ec6cfa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ofbx::getError</definition>
        <argsstring>()</argsstring>
        <name>getError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="2929" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" bodystart="2929" bodyend="2932"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/ofbx.cpp" line="12" column="1"/>
  </compounddef>
</doxygen>
