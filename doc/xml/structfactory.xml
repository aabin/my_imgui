<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9">
  <compounddef id="structfactory" kind="struct" language="C++" prot="public">
    <compoundname>factory</compoundname>
    <includes refid="factory_8h" local="no">factory.h</includes>
    <innerclass refid="structfactory_1_1register__t" prot="public">factory::register_t</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structfactory_1aca9876ac406fd13afba86f7890caa849" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::function&lt; <ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> *()&gt; &gt;</type>
        <definition>std::map&lt;std::string, std::function&lt;base_ui_component*()&gt; &gt; factory::map_</definition>
        <argsstring></argsstring>
        <name>map_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="62" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfactory_1ad4fc5cb957afccf416871694d991e809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> *</type>
        <definition>base_ui_component* factory::produce</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>produce</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="24" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1ae68a4c12268961ca539f05f887149a5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> *</type>
        <definition>base_ui_component* factory::produce</definition>
        <argsstring>(const std::string &amp;key, Args &amp;&amp;...args)</argsstring>
        <name>produce</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="32" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1acadbebdb899c3fde153ac63d710eb47f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> &gt;</type>
        <definition>std::unique_ptr&lt;base_ui_component&gt; factory::produce_unique</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>produce_unique</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="39" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1a39ffbb63bb89d83b88356d8833816fef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> &gt;</type>
        <definition>std::shared_ptr&lt;base_ui_component&gt; factory::produce_shared</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>produce_shared</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="44" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1a0cfc869b112782c55d40563c8aa1745c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void factory::iterate_types</definition>
        <argsstring>(function&lt; void(string, function&lt; base_ui_component *()&gt;)&gt; imp)</argsstring>
        <name>iterate_types</name>
        <param>
          <type>function&lt; void(string, function&lt; <ref refid="classbase__ui__component" kindref="compound">base_ui_component</ref> *()&gt;)&gt;</type>
          <declname>imp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="48" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="48" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>factory::factory</definition>
        <argsstring>()</argsstring>
        <name>factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="57" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1a513d99496a9d820770113f38c6fd9dca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>factory::factory</definition>
        <argsstring>(const factory &amp;)=delete</argsstring>
        <name>factory</name>
        <param>
          <type>const <ref refid="structfactory" kindref="compound">factory</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfactory_1aa41182e6a831b11148305f6eee743c73" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>factory::factory</definition>
        <argsstring>(factory &amp;&amp;)=delete</argsstring>
        <name>factory</name>
        <param>
          <type><ref refid="structfactory" kindref="compound">factory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structfactory_1ac6af064c46767497e3d079c0c0904c2a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfactory" kindref="compound">factory</ref> &amp;</type>
        <definition>static factory&amp; factory::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="64" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="64" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" line="8" column="1" bodyfile="G:/GitHub/my_imgui/my_imgui/examples/auto_future_graphics_design/factory.h" bodystart="7" bodyend="69"/>
    <listofallmembers>
      <member refid="structfactory_1aebdaa4768b64b19e795bfd094af0cea8" prot="private" virt="non-virtual"><scope>factory</scope><name>factory</name></member>
      <member refid="structfactory_1a513d99496a9d820770113f38c6fd9dca" prot="private" virt="non-virtual"><scope>factory</scope><name>factory</name></member>
      <member refid="structfactory_1aa41182e6a831b11148305f6eee743c73" prot="private" virt="non-virtual"><scope>factory</scope><name>factory</name></member>
      <member refid="structfactory_1ac6af064c46767497e3d079c0c0904c2a" prot="public" virt="non-virtual"><scope>factory</scope><name>get</name></member>
      <member refid="structfactory_1a0cfc869b112782c55d40563c8aa1745c" prot="public" virt="non-virtual"><scope>factory</scope><name>iterate_types</name></member>
      <member refid="structfactory_1aca9876ac406fd13afba86f7890caa849" prot="private" virt="non-virtual"><scope>factory</scope><name>map_</name></member>
      <member refid="structfactory_1ad4fc5cb957afccf416871694d991e809" prot="public" virt="non-virtual"><scope>factory</scope><name>produce</name></member>
      <member refid="structfactory_1ae68a4c12268961ca539f05f887149a5c" prot="public" virt="non-virtual"><scope>factory</scope><name>produce</name></member>
      <member refid="structfactory_1a39ffbb63bb89d83b88356d8833816fef" prot="public" virt="non-virtual"><scope>factory</scope><name>produce_shared</name></member>
      <member refid="structfactory_1acadbebdb899c3fde153ac63d710eb47f" prot="public" virt="non-virtual"><scope>factory</scope><name>produce_unique</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
