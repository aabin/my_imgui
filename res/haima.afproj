
{
	"childs" : 
	[
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 960.0,
				"y" : 360.0
			},
			"name" : "background",
			"screen_pos" : 
			{
				"x" : 0.0,
				"y" : 0.0
			},
			"size" : 
			{
				"h" : 720.0,
				"w" : 1920.0
			},
			"texture_id_index" : 0,
			"texture_index" : 1,
			"type" : "ft_image"
		},
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 330.0,
				"y" : 303.0
			},
			"name" : "pointer_left",
			"screen_pos" : 
			{
				"x" : 104.0,
				"y" : 67.0
			},
			"size" : 
			{
				"h" : 472.0,
				"w" : 452.0
			},
			"texture_id_index" : 0,
			"texture_index" : 2,
			"type" : "ft_image"
		},
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 801.50,
				"y" : 303.0
			},
			"name" : "pointer_right",
			"screen_pos" : 
			{
				"x" : 576.0,
				"y" : 67.0
			},
			"size" : 
			{
				"h" : 69.0,
				"w" : 225.0
			},
			"texture_id_index" : 0,
			"texture_index" : 16,
			"type" : "ft_image"
		},
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 330.0,
				"y" : 303.0
			},
			"name" : "pointer_left",
			"screen_pos" : 
			{
				"x" : 104.0,
				"y" : 67.0
			},
			"size" : 
			{
				"h" : 472.0,
				"w" : 452.0
			},
			"texture_id_index" : 0,
			"texture_index" : 2,
			"type" : "ft_image"
		},
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 801.50,
				"y" : 303.0
			},
			"childs" : 
			[
				
				{
					"axipos" : 
					{
						"angle" : 0.0,
						"x" : 0.0,
						"y" : 0.0
					},
					"name" : "ft_image",
					"screen_pos" : 
					{
						"x" : 0.0,
						"y" : 0.0
					},
					"size" : 
					{
						"h" : 65.0,
						"w" : 14.0
					},
					"texture_id_index" : 0,
					"texture_index" : 6,
					"type" : "ft_image"
				}
			],
			"name" : "pointer_right",
			"screen_pos" : 
			{
				"x" : 576.0,
				"y" : 67.0
			},
			"size" : 
			{
				"h" : 472.0,
				"w" : 451.0
			},
			"texture_id_index" : 0,
			"texture_index" : 3,
			"type" : "ft_image"
		},
		
		{
			"axipos" : 
			{
				"angle" : 0.0,
				"x" : 801.50,
				"y" : 303.0
			},
			"childs" : 
			[
				
				{
					"content" : "gfdgdgfdgfd",
					"name" : "ft_textblock",
					"screen_pos" : 
					{
						"x" : 146.5790100097656,
						"y" : 45.62800216674805
					},
					"txt_color" : 
					{
						"w" : 1.0,
						"x" : 0.5051184892654419,
						"y" : 0.6189618110656738,
						"z" : 0.7299578189849854
					},
					"type" : "ft_textblock",
					"width" : 560.0,
					"wrapped" : false
				},
				
				{
					"background color" : 
					{
						"w" : 0.50,
						"x" : 0.50,
						"y" : 0.4582278430461884,
						"z" : 0.1999999880790710
					},
					"name" : "ft_scene3d",
					"screen_pos" : 
					{
						"x" : 238.3450164794922,
						"y" : 0.0
					},
					"size" : 
					{
						"h" : 600.0,
						"w" : 800.0
					},
					"type" : "ft_scene3d"
				}
			],
			"name" : "pointer_right",
			"screen_pos" : 
			{
				"x" : 854.62402343750,
				"y" : 65.46200561523438
			},
			"size" : 
			{
				"h" : 472.0,
				"w" : 451.0
			},
			"texture_id_index" : 0,
			"texture_index" : 3,
			"type" : "ft_image"
		},
		
		{
			"childs" : 
			[
				
				{
					"axipos" : 
					{
						"angle" : 0.0,
						"x" : 801.50,
						"y" : 303.0
					},
					"name" : "pointer_right",
					"screen_pos" : 
					{
						"x" : 0.0,
						"y" : 0.0
					},
					"size" : 
					{
						"h" : 69.0,
						"w" : 225.0
					},
					"texture_id_index" : 0,
					"texture_index" : 16,
					"type" : "ft_image"
				},
				
				{
					"axipos" : 
					{
						"angle" : 0.0,
						"x" : 801.50,
						"y" : 303.0
					},
					"name" : "pointer_right",
					"screen_pos" : 
					{
						"x" : 0.0,
						"y" : 69.0
					},
					"size" : 
					{
						"h" : 69.0,
						"w" : 225.0
					},
					"texture_id_index" : 0,
					"texture_index" : 16,
					"type" : "ft_image"
				},
				
				{
					"axipos" : 
					{
						"angle" : 0.0,
						"x" : 801.50,
						"y" : 303.0
					},
					"name" : "pointer_right",
					"screen_pos" : 
					{
						"x" : 0.0,
						"y" : 138.0
					},
					"size" : 
					{
						"h" : 69.0,
						"w" : 225.0
					},
					"texture_id_index" : 0,
					"texture_index" : 16,
					"type" : "ft_image"
				},
				
				{
					"axipos" : 
					{
						"angle" : 0.0,
						"x" : 801.50,
						"y" : 303.0
					},
					"name" : "pointer_right",
					"screen_pos" : 
					{
						"x" : 0.0,
						"y" : 207.0
					},
					"size" : 
					{
						"h" : 69.0,
						"w" : 225.0
					},
					"texture_id_index" : 0,
					"texture_index" : 16,
					"type" : "ft_image"
				}
			],
			"name" : "ft_listbox",
			"range" : 
			{
				"max" : 100.0,
				"min" : 1.0
			},
			"screen_pos" : 
			{
				"x" : 145.6550140380859,
				"y" : 104.2760086059570
			},
			"size" : 
			{
				"h" : 191.1720123291016,
				"w" : 337.6550292968750
			},
			"type" : "ft_listbox",
			"vertical" : true
		}
	],
	"material_list" : 
	[
		
		{
			"name" : "color1",
			"shader" : "color",
			"uniform_list" : 
			{
				"model" : 
				{
					"el_size" : 16,
					"type" : "shader_uf_float",
					"usize" : 1,
					"utype" : 35676,
					"value_list" : 
					[
						1.0,
						0.0,
						0.0,
						0.0,
						0.0,
						1.0,
						0.0,
						0.0,
						0.0,
						0.0,
						1.0,
						0.0,
						0.0,
						0.0,
						0.0,
						1.0
					]
				},
				"proj" : 
				{
					"el_size" : 16,
					"type" : "shader_uf_float",
					"usize" : 1,
					"utype" : 35676,
					"value_list" : 
					[
						1.299038052558899,
						0.0,
						0.0,
						0.0,
						0.0,
						1.732050895690918,
						0.0,
						0.0,
						0.0,
						0.0,
						-1.222222208976746,
						-1.0,
						0.0,
						0.0,
						-2.222222328186035,
						0.0
					]
				},
				"view" : 
				{
					"el_size" : 16,
					"type" : "shader_uf_float",
					"usize" : 1,
					"utype" : 35676,
					"value_list" : 
					[
						-0.7071068286895752,
						0.0,
						-0.7071068286895752,
						0.0,
						0.0,
						1.000000119209290,
						-0.0,
						0.0,
						0.7071068286895752,
						-0.0,
						-0.7071068286895752,
						0.0,
						-0.0,
						-0.0,
						-2.121320486068726,
						1.0
					]
				}
			}
		}
	],
	"name" : "screen",
	"screen_pos" : 
	{
		"x" : 0.0,
		"y" : 0.0
	},
	"screenh" : 720.0,
	"screenw" : 1920.0,
	"shader_list" : 
	[
		
		{
			"fs_code" : "varying lowp vec4 vColor;\n\nvoid main()\n{\n    precision lowp float;\n    \n    gl_FragColor.rgba = vColor;\n}\n",
			"fs_name" : "Phong.frag.glsl",
			"name" : "Phong",
			"vs_code" : "attribute vec3 kzPosition;\nattribute vec3 kzNormal;\nuniform highp mat4 kzProjectionCameraWorldMatrix;\nuniform highp mat4 kzWorldMatrix;\nuniform highp mat4 kzNormalMatrix;\nuniform highp vec3 kzCameraPosition;\nuniform mediump vec3 PointLightPosition[2];\nuniform lowp vec4 PointLightColor[2];\nuniform mediump vec3 PointLightAttenuation[2];\nuniform lowp vec4 DirectionalLightColor[1];\nuniform mediump vec3 DirectionalLightDirection[1];\nuniform lowp float BlendIntensity;\nuniform lowp vec4 Emissive;\n\nuniform lowp vec4 Ambient;\nuniform lowp vec4 Diffuse;\nuniform lowp vec4 SpecularColor;\nuniform mediump float SpecularExponent;\n\nvarying lowp vec4 vColor;\n\nvoid main()\n{\n    precision mediump float;\n    \n    vec3 pointLightDirection[2];\n    vec4 positionWorld = kzWorldMatrix * vec4(kzPosition.xyz, 1.0);\n    vec3 V = normalize(positionWorld.xyz - kzCameraPosition);\n    vec4 Norm = kzNormalMatrix * vec4(kzNormal, 1.0);\n    vec3 N = normalize(Norm.xyz);\n\n    pointLightDirection[0] = positionWorld.xyz - PointLightPosition[0];\n    pointLightDirection[1] = positionWorld.xyz - PointLightPosition[1];\n    \n    vec3 L[3];\n    vec3 H[3];\n    float LdotN, NdotH;\n    float specular;\n    vec3 c;\n    float d, attenuation;\n    \n    lowp vec3 vAmbDif = vec3(0.0);\n    lowp vec3 vSpec = vec3(0.0);\n    \n    L[0] = vec3(1.0, 0.0, 0.0);\n    if(length(DirectionalLightDirection[0]) > 0.01)\n    {\n        L[0] = normalize(-DirectionalLightDirection[0]);\n    }\n    H[0] = normalize(-V + L[0]);\n    \n    L[1] = normalize(-pointLightDirection[0]);\n    H[1] = normalize(-V + L[1]);\n    \n    L[2] = normalize(-pointLightDirection[1]);\n    H[2] = normalize(-V + L[2]);\n\n    vAmbDif += Ambient.rgb;\n  \n    // Apply directional light 0.\n    {\n        LdotN = max(0.0, dot(L[0], N));\n        NdotH = max(0.0, dot(N, H[0]));\n        specular = pow(NdotH, SpecularExponent);\n        vAmbDif += (LdotN * Diffuse.rgb) * DirectionalLightColor[0].rgb;\n        vSpec += SpecularColor.rgb * specular * DirectionalLightColor[0].rgb;\n    }\n    \n    // Apply point light 0.\n    {\n        LdotN = max(0.0, dot(L[1], N));\n        NdotH = max(0.0, dot(N, H[1]));\n        specular = pow(NdotH, SpecularExponent);\n        c = PointLightAttenuation[0];\n        d = length(pointLightDirection[0]);\n        attenuation = 1.0 / max(0.001, (c.x + c.y * d + c.z * d * d));\n        vAmbDif += (LdotN * Diffuse.rgb) * attenuation * PointLightColor[0].rgb;\n        vSpec +=  SpecularColor.rgb * specular * attenuation * PointLightColor[0].rgb;\n    }\n\n    // Apply point light 1.\n    {\n        LdotN = max(0.0, dot(L[2], N));\n        NdotH = max(0.0, dot(N, H[2]));\n        specular = pow(NdotH, SpecularExponent);\n        c = PointLightAttenuation[1];\n        d = length(pointLightDirection[1]);\n        attenuation = 1.0 / max(0.001, (c.x + c.y * d + c.z * d * d));\n        vAmbDif += (LdotN * Diffuse.rgb) * attenuation * PointLightColor[1].rgb;\n        vSpec +=  SpecularColor.rgb * specular * attenuation * PointLightColor[1].rgb;\n    }\n\n    vColor.rgb = (vAmbDif.rgb + vSpec.rgb + Emissive.rgb) * BlendIntensity;\n    vColor.a = BlendIntensity;\n    gl_Position = kzProjectionCameraWorldMatrix * vec4(kzPosition.xyz, 1.0);\n}",
			"vs_name" : "Phong.vert.glsl"
		},
		
		{
			"fs_code" : "varying vec3 Color;\nvarying vec2 Texcoord;\n//out vec4 outColor;\n//uniform sampler2D texPuppy;\nvoid main()\n{\n\t//outColor = texture(texPuppy, Texcoord);\n\tgl_FragColor = vec4(Color, 1.0);\n}\n",
			"fs_name" : "color.fs",
			"name" : "color",
			"vs_code" : "layout(location = 0) attribute vec3 position;\nlayout(location = 1) attribute vec3 color;\nlayout(location = 2) attribute vec2 texcoord;\nvarying vec3 Color;\nvarying vec2 Texcoord;\nuniform highp mat4 model;\nuniform highp mat4 view;\nuniform highp mat4 proj;\nvoid main()\n{\n\tColor = color;\n\tTexcoord = texcoord;\n\tgl_Position = proj * view * model * vec4(position, 1.0);\n\t//gl_Position =  vec4(position, 1.0);\n}\n",
			"vs_name" : "color.vs"
		},
		
		{
			"fs_code" : "#version 330 core\n\n// Interpolated values from the vertex shaders\nin vec2 UV;\nin vec4 particlecolor;\n\n// Ouput data\nout vec4 color;\n\nuniform sampler2D myTextureSampler;\n\nvoid main(){\n\t// Output color = color of the texture at the specified UV\n\t//color = texture( myTextureSampler, UV ) * particlecolor;\n\tcolor = texture( myTextureSampler, UV );\n}\n",
			"fs_name" : "particles.fs",
			"name" : "particles",
			"vs_code" : "#version 330 core\n\n// Input vertex data, different for all executions of this shader.\nlayout(location = 0) in vec3 squareVertices;\nlayout(location = 1) in vec4 xyzs; // Position of the center of the particule and size of the square\nlayout(location = 2) in vec4 color; // Position of the center of the particule and size of the square\n\n// Output data ; will be interpolated for each fragment.\nout vec2 UV;\nout vec4 particlecolor;\n\n// Values that stay constant for the whole mesh.\nuniform vec3 CameraRight_worldspace;\nuniform vec3 CameraUp_worldspace;\nuniform mat4 VP; // Model-View-Projection matrix, but without the Model (the position is in BillboardPos; the orientation depends on the camera)\n\nvoid main()\n{\n\tfloat particleSize = xyzs.w; // because we encoded it this way.\n\tvec3 particleCenter_wordspace = xyzs.xyz;\n\t\n\tvec3 vertexPosition_worldspace = \n\t\tparticleCenter_wordspace\n\t\t+ CameraRight_worldspace * squareVertices.x * particleSize\n\t\t+ CameraUp_worldspace * squareVertices.y * particleSize;\n\n\t// Output position of the vertex\n\tgl_Position = VP * vec4(vertexPosition_worldspace, 1.0f);\n\n\t// UV of the vertex. No special space for this one.\n\tUV = squareVertices.xy + vec2(0.5, 0.5);\n\tparticlecolor = color;\n}\n\n",
			"vs_name" : "particles.vs"
		}
	],
	"texture_list" : [ "1.png", "VW_Golf_VII_2013.png", "blue_ring.png" ],
	"texture_res_list" : 
	[
		
		{
			"texture_data_file" : "mainview.json",
			"texture_pack_file" : "mainview.png"
		},
		
		{
			"texture_data_file" : "sportview.json",
			"texture_pack_file" : "sportview.png"
		},
		
		{
			"texture_data_file" : "sportview.json",
			"texture_pack_file" : "sportview.png"
		},
		
		{
			"texture_data_file" : "sportview.json",
			"texture_pack_file" : "sportview.png"
		}
	],
	"type" : "ft_base"
}

